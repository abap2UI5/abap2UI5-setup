const {z2ui5_cl_ui5} = await import("./z2ui5_cl_ui5.clas.mjs");
const {cx_root} = await import("./cx_root.clas.mjs");
// z2ui5_cl_ui5_m.clas.abap
class z2ui5_cl_ui5_m extends z2ui5_cl_ui5 {
  static INTERNAL_TYPE = 'CLAS';
  static INTERNAL_NAME = 'Z2UI5_CL_UI5_M';
  static IMPLEMENTED_INTERFACES = [];
  static ATTRIBUTES = {};
  static METHODS = {"SUGGESTIONITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "TOOLBARSPACER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTABLESUGGESTIONVALUEHELP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGESTIONITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGESTIONROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUGGESTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUEHELP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPREQUEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBMIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUELIVEUPDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOCOMPLETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXSUGGESTIONWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTFORMATTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTFORMATMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STARTSUGGESTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESUGGESTIONSHIGHLIGHTING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLETABLEAUTOPOPINMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVBUTTONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNAVBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTONLYBUSY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVBUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FLOATINGFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUBHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SHELL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "TITLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "CONTENT_MIDDLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "PANEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "EXPANDABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKYHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONFIRST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACCESSIBLEROLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LABEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELFOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCOLON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINK": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIDATEURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPHASIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACCESSIBLEROLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HEADERCONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "ILLUSTRATEDMESSAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "ENABLEVERTICALRESPONSIVENESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEFORMATTEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ILLUSTRATIONTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ILLUSTRATIONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MESSAGESTRIP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEXT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERWHITESPACE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LAYOUTDATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "FLEXBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "CLASS_": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FITCONTAINER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "JUSTIFYCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYINLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FOOTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "OVERFLOWTOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}},
  "OVERFLOWTOOLBARTOGGLEBUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOWTOOLBARBUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOWTOOLBARMENUBUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUTTONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTACTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ADDITIONALCONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});}, "is_optional": " "}}}};
  constructor() {
    super();
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
  }
  async constructor_(INPUT) {
    if (super.constructor_) { await super.constructor_(INPUT); }
    return this;
  }
  async panel(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let expandable = INPUT?.expandable || new abap.types.Character();
    let expanded = INPUT?.expanded || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let stickyheader = INPUT?.stickyheader || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let temp1 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp2 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp1);
    temp2.get().n.set(new abap.types.String().set(`expandable`));
    temp2.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expandable})));
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`expanded`));
    temp2.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expanded})));
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`stickyHeader`));
    temp2.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: stickyheader})));
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`height`));
    temp2.get().v.set(height);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`headerText`));
    temp2.get().v.set(headertext);
    abap.statements.insertInternal({data: temp2, table: temp1});
    result.set((await (await this._add({n: new abap.types.String().set(`Panel`), ns: new abap.types.String().set(`sap.m`), t_p: temp1})).get()._ns_m()));
    return result;
  }
  async additionalcontent() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({ns: new abap.types.String().set(`sap.m`), n: new abap.types.String().set(`additionalContent`)})).get()._ns_m()));
    return result;
  }
  async illustratedmessage(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let enableverticalresponsiveness = INPUT?.enableverticalresponsiveness || new abap.types.Character();
    let enableformattedtext = INPUT?.enableformattedtext || new abap.types.Character();
    let illustrationtype = INPUT?.illustrationtype || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let illustrationsize = INPUT?.illustrationsize || new abap.types.Character();
    let temp3 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp4 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp3);
    temp4.get().n.set(new abap.types.String().set(`enableVerticalResponsiveness`));
    temp4.get().v.set(enableverticalresponsiveness);
    abap.statements.insertInternal({data: temp4, table: temp3});
    temp4.get().n.set(new abap.types.String().set(`illustrationType`));
    temp4.get().v.set(illustrationtype);
    abap.statements.insertInternal({data: temp4, table: temp3});
    temp4.get().n.set(new abap.types.String().set(`enableFormattedText`));
    temp4.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableformattedtext})));
    abap.statements.insertInternal({data: temp4, table: temp3});
    temp4.get().n.set(new abap.types.String().set(`illustrationSize`));
    temp4.get().v.set(illustrationsize);
    abap.statements.insertInternal({data: temp4, table: temp3});
    temp4.get().n.set(new abap.types.String().set(`description`));
    temp4.get().v.set(description);
    abap.statements.insertInternal({data: temp4, table: temp3});
    temp4.get().n.set(new abap.types.String().set(`title`));
    temp4.get().v.set(title);
    abap.statements.insertInternal({data: temp4, table: temp3});
    result.set((await (await this._add({ns: new abap.types.String().set(`sap.m`), n: new abap.types.String().set(`IllustratedMessage`), t_p: temp3})).get()._ns_m()));
    return result;
  }
  async toolbarspacer() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set(this.me);
    await (await this._add({n: new abap.types.String().set(`ToolbarSpacer`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m();
    return result;
  }
  async overflowtoolbar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`OverflowToolbar`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async overflowtoolbarbutton(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let temp5 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp6 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp5);
    temp6.get().n.set(new abap.types.String().set(`press`));
    temp6.get().v.set(press);
    abap.statements.insertInternal({data: temp6, table: temp5});
    temp6.get().n.set(new abap.types.String().set(`text`));
    temp6.get().v.set(text);
    abap.statements.insertInternal({data: temp6, table: temp5});
    temp6.get().n.set(new abap.types.String().set(`enabled`));
    temp6.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp6, table: temp5});
    temp6.get().n.set(new abap.types.String().set(`icon`));
    temp6.get().v.set(icon);
    abap.statements.insertInternal({data: temp6, table: temp5});
    temp6.get().n.set(new abap.types.String().set(`type`));
    temp6.get().v.set(type);
    abap.statements.insertInternal({data: temp6, table: temp5});
    temp6.get().n.set(new abap.types.String().set(`tooltip`));
    temp6.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp6, table: temp5});
    await this._add({n: new abap.types.String().set(`OverflowToolbarButton`), ns: new abap.types.String().set(`sap.m`), t_p: temp5});
    return result;
  }
  async overflowtoolbarmenubutton(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let buttonmode = INPUT?.buttonmode || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let defaultaction = INPUT?.defaultaction || new abap.types.Character();
    let temp7 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp8 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp7);
    temp8.get().n.set(new abap.types.String().set(`buttonMode`));
    temp8.get().v.set(buttonmode);
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`defaultAction`));
    temp8.get().v.set(defaultaction);
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`text`));
    temp8.get().v.set(text);
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`enabled`));
    temp8.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`icon`));
    temp8.get().v.set(icon);
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`type`));
    temp8.get().v.set(type);
    abap.statements.insertInternal({data: temp8, table: temp7});
    temp8.get().n.set(new abap.types.String().set(`tooltip`));
    temp8.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp8, table: temp7});
    result.set((await (await this._add({n: new abap.types.String().set(`OverflowToolbarMenuButton`), ns: new abap.types.String().set(`sap.m`), t_p: temp7})).get()._ns_m()));
    return result;
  }
  async overflowtoolbartogglebutton(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let temp9 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp10 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp9);
    temp10.get().n.set(new abap.types.String().set(`press`));
    temp10.get().v.set(press);
    abap.statements.insertInternal({data: temp10, table: temp9});
    temp10.get().n.set(new abap.types.String().set(`text`));
    temp10.get().v.set(text);
    abap.statements.insertInternal({data: temp10, table: temp9});
    temp10.get().n.set(new abap.types.String().set(`enabled`));
    temp10.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp10, table: temp9});
    temp10.get().n.set(new abap.types.String().set(`icon`));
    temp10.get().v.set(icon);
    abap.statements.insertInternal({data: temp10, table: temp9});
    temp10.get().n.set(new abap.types.String().set(`type`));
    temp10.get().v.set(type);
    abap.statements.insertInternal({data: temp10, table: temp9});
    temp10.get().n.set(new abap.types.String().set(`tooltip`));
    temp10.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp10, table: temp9});
    await this._add({n: new abap.types.String().set(`OverflowToolbarToggleButton`), ns: new abap.types.String().set(`sap.m`), t_p: temp9});
    return result;
  }
  async footer() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({ns: new abap.types.String().set(`sap.m`), n: new abap.types.String().set(`footer`)})).get()._ns_m()));
    return result;
  }
  async suggestionitems() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({ns: new abap.types.String().set(`sap.m`), n: new abap.types.String().set(`suggestionItems`)})).get()._ns_m()));
    return result;
  }
  async items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`items`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async flexbox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let class_ = INPUT?.class_ || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let fitcontainer = INPUT?.fitcontainer || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let alignitems = INPUT?.alignitems || new abap.types.Character();
    let justifycontent = INPUT?.justifycontent || new abap.types.Character();
    let wrap = INPUT?.wrap || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let direction = INPUT?.direction || new abap.types.Character();
    let displayinline = INPUT?.displayinline || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let temp11 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp12 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp11);
    temp12.get().n.set(new abap.types.String().set(`class`));
    temp12.get().v.set(class_);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`renderType`));
    temp12.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`width`));
    temp12.get().v.set(width);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`height`));
    temp12.get().v.set(height);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`alignItems`));
    temp12.get().v.set(alignitems);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`fitContainer`));
    temp12.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fitcontainer})));
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`justifyContent`));
    temp12.get().v.set(justifycontent);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`wrap`));
    temp12.get().v.set(wrap);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`direction`));
    temp12.get().v.set(direction);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`alignContent`));
    temp12.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp12.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`displayInline`));
    temp12.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayinline})));
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`visible`));
    temp12.get().v.set(visible);
    abap.statements.insertInternal({data: temp12, table: temp11});
    result.set((await (await this._add({n: new abap.types.String().set(`FlexBox`), ns: new abap.types.String().set(`sap.m`), t_p: temp11})).get()._ns_m()));
    return result;
  }
  async messagestrip(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let showicon = INPUT?.showicon || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let temp13 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp14 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp13);
    temp14.get().n.set(new abap.types.String().set(`text`));
    temp14.get().v.set(text);
    abap.statements.insertInternal({data: temp14, table: temp13});
    temp14.get().n.set(new abap.types.String().set(`type`));
    temp14.get().v.set(type);
    abap.statements.insertInternal({data: temp14, table: temp13});
    temp14.get().n.set(new abap.types.String().set(`showIcon`));
    temp14.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicon})));
    abap.statements.insertInternal({data: temp14, table: temp13});
    temp14.get().n.set(new abap.types.String().set(`class`));
    temp14.get().v.set(class_);
    abap.statements.insertInternal({data: temp14, table: temp13});
    await this._add({n: new abap.types.String().set(`MessageStrip`), ns: new abap.types.String().set(`sap.m`), t_p: temp13});
    return result;
  }
  async text(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let maxlines = INPUT?.maxlines || new abap.types.Character();
    let renderwhitespace = INPUT?.renderwhitespace || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp15 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp16 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp15);
    temp16.get().n.set(new abap.types.String().set(`text`));
    temp16.get().v.set(text);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp16.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`maxLines`));
    temp16.get().v.set(maxlines);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`renderWhitespace`));
    temp16.get().v.set(renderwhitespace);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`textAlign`));
    temp16.get().v.set(textalign);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`textDirection`));
    temp16.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`width`));
    temp16.get().v.set(width);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`id`));
    temp16.get().v.set(id);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`wrapping`));
    temp16.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`wrappingType`));
    temp16.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`class`));
    temp16.get().v.set(class_);
    abap.statements.insertInternal({data: temp16, table: temp15});
    await this._add({n: new abap.types.String().set(`Text`), ns: new abap.types.String().set(`sap.m`), t_p: temp15});
    return result;
  }
  async headercontent() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`headerContent`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async link(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let href = INPUT?.href || new abap.types.Character();
    let target = INPUT?.target || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let validateurl = INPUT?.validateurl || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let subtle = INPUT?.subtle || new abap.types.Character();
    let rel = INPUT?.rel || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let emphasized = INPUT?.emphasized || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let accessiblerole = INPUT?.accessiblerole || new abap.types.Character();
    let temp17 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp18 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp17);
    temp18.get().n.set(new abap.types.String().set(`text`));
    temp18.get().v.set(text);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`target`));
    temp18.get().v.set(target);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`href`));
    temp18.get().v.set(href);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`press`));
    temp18.get().v.set(press);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`id`));
    temp18.get().v.set(id);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`accessibleRole`));
    temp18.get().v.set(accessiblerole);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp18.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp18.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`rel`));
    temp18.get().v.set(rel);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`subtle`));
    temp18.get().v.set((await this._2bool({val: subtle})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`textAlign`));
    temp18.get().v.set(textalign);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`textDirection`));
    temp18.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`validateUrl`));
    temp18.get().v.set((await this._2bool({val: validateurl})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`width`));
    temp18.get().v.set(width);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`wrapping`));
    temp18.get().v.set((await this._2bool({val: wrapping})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`emphasized`));
    temp18.get().v.set((await this._2bool({val: emphasized})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`enabled`));
    temp18.get().v.set((await this._2bool({val: enabled})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    await this._add({n: new abap.types.String().set(`Link`), ns: new abap.types.String().set(`sap.m`), t_p: temp17});
    return result;
  }
  async button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let iconfirst = INPUT?.iconfirst || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let accessiblerole = INPUT?.accessiblerole || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let temp19 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp20 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp19);
    temp20.get().n.set(new abap.types.String().set(`press`));
    temp20.get().v.set(press);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`text`));
    temp20.get().v.set(text);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`enabled`));
    temp20.get().v.set((await this._2bool({val: enabled})));
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`visible`));
    temp20.get().v.set((await this._2bool({val: visible})));
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp20.get().v.set((await this._2bool({val: icondensityaware})));
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`iconFirst`));
    temp20.get().v.set((await this._2bool({val: iconfirst})));
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`icon`));
    temp20.get().v.set(icon);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`type`));
    temp20.get().v.set(type);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`id`));
    temp20.get().v.set(id);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`width`));
    temp20.get().v.set(width);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`tooltip`));
    temp20.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`textDirection`));
    temp20.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`accessibleRole`));
    temp20.get().v.set(accessiblerole);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`activeIcon`));
    temp20.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp20.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`class`));
    temp20.get().v.set(class_);
    abap.statements.insertInternal({data: temp20, table: temp19});
    await this._add({n: new abap.types.String().set(`Button`), ns: new abap.types.String().set(`sap.m`), t_p: temp19});
    return result;
  }
  async layoutdata() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`layoutData`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async label(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let labelfor = INPUT?.labelfor || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let displayonly = INPUT?.displayonly || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let showcolon = INPUT?.showcolon || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let valign = INPUT?.valign || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let temp21 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp22 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp21);
    temp22.get().n.set(new abap.types.String().set(`text`));
    temp22.get().v.set(text);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`displayOnly`));
    temp22.get().v.set((await this._2bool({val: displayonly})));
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`required`));
    temp22.get().v.set((await this._2bool({val: required})));
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`showColon`));
    temp22.get().v.set((await this._2bool({val: showcolon})));
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`textAlign`));
    temp22.get().v.set(textalign);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`textDirection`));
    temp22.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`vAlign`));
    temp22.get().v.set(valign);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`width`));
    temp22.get().v.set(width);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`wrapping`));
    temp22.get().v.set((await this._2bool({val: wrapping})));
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`wrappingType`));
    temp22.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`design`));
    temp22.get().v.set(design);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`id`));
    temp22.get().v.set(id);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`class`));
    temp22.get().v.set(class_);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`labelFor`));
    temp22.get().v.set(labelfor);
    abap.statements.insertInternal({data: temp22, table: temp21});
    await this._add({n: new abap.types.String().set(`Label`), ns: new abap.types.String().set(`sap.m`), t_p: temp21});
    return result;
  }
  async title(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let text = INPUT?.text || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let level = INPUT?.level || new abap.types.Character();
    let temp23 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp24 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp23);
    temp24.get().n.set(new abap.types.String().set(`text`));
    temp24.get().v.set(text);
    abap.statements.insertInternal({data: temp24, table: temp23});
    temp24.get().n.set(new abap.types.String().set(`wrapping`));
    temp24.get().v.set((await this._2bool({val: wrapping})));
    abap.statements.insertInternal({data: temp24, table: temp23});
    temp24.get().n.set(new abap.types.String().set(`level`));
    temp24.get().v.set(level);
    abap.statements.insertInternal({data: temp24, table: temp23});
    await this._add({n: new abap.types.String().set(`Title`), ns: new abap.types.String().set(`sap.m`), t_p: temp23});
    return result;
  }
  async page(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let title = INPUT?.title || new abap.types.Character();
    let navbuttonpress = INPUT?.navbuttonpress || new abap.types.Character();
    let shownavbutton = INPUT?.shownavbutton || new abap.types.Character();
    let showheader = INPUT?.showheader || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let contentonlybusy = INPUT?.contentonlybusy || new abap.types.Character();
    let enablescrolling = INPUT?.enablescrolling || new abap.types.Character();
    let navbuttontooltip = INPUT?.navbuttontooltip || new abap.types.Character();
    let floatingfooter = INPUT?.floatingfooter || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let showsubheader = INPUT?.showsubheader || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let temp25 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp26 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp25);
    temp26.get().n.set(new abap.types.String().set(`title`));
    temp26.get().v.set(title);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showNavButton`));
    temp26.get().v.set((await this._2bool({val: shownavbutton})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`navButtonPress`));
    temp26.get().v.set(navbuttonpress);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showHeader`));
    temp26.get().v.set((await this._2bool({val: showheader})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`class`));
    temp26.get().v.set(class_);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp26.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`navButtonTooltip`));
    temp26.get().v.set(navbuttontooltip);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp26.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`titleLevel`));
    temp26.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`contentOnlyBusy`));
    temp26.get().v.set((await this._2bool({val: contentonlybusy})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`enableScrolling`));
    temp26.get().v.set((await this._2bool({val: enablescrolling})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`floatingFooter`));
    temp26.get().v.set((await this._2bool({val: floatingfooter})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showFooter`));
    temp26.get().v.set((await this._2bool({val: showfooter})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showSubHeader`));
    temp26.get().v.set((await this._2bool({val: showsubheader})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`id`));
    temp26.get().v.set(id);
    abap.statements.insertInternal({data: temp26, table: temp25});
    result.set((await (await this._add({n: new abap.types.String().set(`Page`), ns: new abap.types.String().set(`sap.m`), t_p: temp25})).get()._ns_m()));
    return result;
  }
  async shell() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`Shell`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async bar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`Bar`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async content_middle() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    result.set((await (await this._add({n: new abap.types.String().set(`contentMiddle`), ns: new abap.types.String().set(`sap.m`)})).get()._ns_m()));
    return result;
  }
  async input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_UI5_M", RTTIName: "\\CLASS=Z2UI5_CL_UI5_M"});
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let showtablesuggestionvaluehelp = INPUT?.showtablesuggestionvaluehelp || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let suggestionitems = INPUT?.suggestionitems || new abap.types.Character();
    let suggestionrows = INPUT?.suggestionrows || new abap.types.Character();
    let showsuggestion = INPUT?.showsuggestion || new abap.types.Character();
    let showvaluehelp = INPUT?.showvaluehelp || new abap.types.Character();
    let valuehelprequest = INPUT?.valuehelprequest || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let suggest = INPUT?.suggest || new abap.types.Character();
    let class_ = INPUT?.class_ || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let submit = INPUT?.submit || new abap.types.Character();
    let valueliveupdate = INPUT?.valueliveupdate || new abap.types.Character();
    let autocomplete = INPUT?.autocomplete || new abap.types.Character();
    let maxsuggestionwidth = INPUT?.maxsuggestionwidth || new abap.types.Character();
    let fieldwidth = INPUT?.fieldwidth || new abap.types.Character();
    let valuehelponly = INPUT?.valuehelponly || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let valuehelpiconsrc = INPUT?.valuehelpiconsrc || new abap.types.Character();
    let textformatter = INPUT?.textformatter || new abap.types.Character();
    let textformatmode = INPUT?.textformatmode || new abap.types.Character();
    let maxlength = INPUT?.maxlength || new abap.types.Character();
    let startsuggestion = INPUT?.startsuggestion || new abap.types.Character();
    let enablesuggestionshighlighting = INPUT?.enablesuggestionshighlighting || new abap.types.Character();
    let enabletableautopopinmode = INPUT?.enabletableautopopinmode || new abap.types.Character();
    let temp27 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp28 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp27);
    temp28.get().n.set(new abap.types.String().set(`id`));
    temp28.get().v.set(id);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`placeholder`));
    temp28.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`type`));
    temp28.get().v.set(type);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`maxLength`));
    temp28.get().v.set(maxlength);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp28.get().v.set((await this._2bool({val: showclearicon})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`description`));
    temp28.get().v.set(description);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`editable`));
    temp28.get().v.set((await this._2bool({val: editable})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`enabled`));
    temp28.get().v.set((await this._2bool({val: enabled})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`visible`));
    temp28.get().v.set((await this._2bool({val: visible})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`enableTableAutoPopinMode`));
    temp28.get().v.set((await this._2bool({val: enabletableautopopinmode})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`enableSuggestionsHighlighting`));
    temp28.get().v.set((await this._2bool({val: enablesuggestionshighlighting})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`showTableSuggestionValueHelp`));
    temp28.get().v.set((await this._2bool({val: showtablesuggestionvaluehelp})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueState`));
    temp28.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueStateText`));
    temp28.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`value`));
    temp28.get().v.set(value);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`required`));
    temp28.get().v.set((await this._2bool({val: required})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`suggest`));
    temp28.get().v.set(suggest);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`suggestionItems`));
    temp28.get().v.set(suggestionitems);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`suggestionRows`));
    temp28.get().v.set(suggestionrows);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`showSuggestion`));
    temp28.get().v.set((await this._2bool({val: showsuggestion})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueHelpRequest`));
    temp28.get().v.set(valuehelprequest);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`autocomplete`));
    temp28.get().v.set((await this._2bool({val: autocomplete})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueLiveUpdate`));
    temp28.get().v.set((await this._2bool({val: valueliveupdate})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`submit`));
    temp28.get().v.set((await this._2bool({val: submit})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`showValueHelp`));
    temp28.get().v.set((await this._2bool({val: showvaluehelp})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueHelpOnly`));
    temp28.get().v.set((await this._2bool({val: valuehelponly})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`class`));
    temp28.get().v.set(class_);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`change`));
    temp28.get().v.set(change);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`maxSuggestionWidth`));
    temp28.get().v.set(maxsuggestionwidth);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`width`));
    temp28.get().v.set(width);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`textFormatter`));
    temp28.get().v.set(textformatter);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`startSuggestion`));
    temp28.get().v.set(startsuggestion);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`valueHelpIconSrc`));
    temp28.get().v.set(valuehelpiconsrc);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`textFormatMode`));
    temp28.get().v.set(textformatmode);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`fieldWidth`));
    temp28.get().v.set(fieldwidth);
    abap.statements.insertInternal({data: temp28, table: temp27});
    await this._add({n: new abap.types.String().set(`Input`), ns: new abap.types.String().set(`sap.m`), t_p: temp27});
    return result;
  }
}
abap.Classes['Z2UI5_CL_UI5_M'] = z2ui5_cl_ui5_m;
export {z2ui5_cl_ui5_m};
//# sourceMappingURL=z2ui5_cl_ui5_m.clas.mjs.map