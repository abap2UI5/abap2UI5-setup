const {cx_root} = await import("./cx_root.clas.mjs");
// z2ui5_cl_xml_view.clas.abap
class z2ui5_cl_xml_view {
  static INTERNAL_TYPE = 'CLAS';
  static INTERNAL_NAME = 'Z2UI5_CL_XML_VIEW';
  static IMPLEMENTED_INTERFACES = [];
  static ATTRIBUTES = {"MV_NAME": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MV_NS": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MT_PROP": {"type": () => {return abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":false,"keyFields":["N"]},"secondary":[]}, "");}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MT_NS": {"type": () => {return abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":true,"keyFields":["TABLE_LINE"]},"secondary":[]}, "");}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MO_ROOT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MO_PREVIOUS": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MO_PARENT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "visibility": "O", "is_constant": " ", "is_class": " "},
  "MT_CHILD": {"type": () => {return abap.types.TableFactory.construct(new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "");}, "visibility": "O", "is_constant": " ", "is_class": " "}};
  static METHODS = {"FACTORY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "T_NS": {"type": () => {return abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");}, "is_optional": " "}}},
  "FACTORY_PLAIN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "FACTORY_POPUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "T_NS": {"type": () => {return abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");}, "is_optional": " "}}},
  "CONSTRUCTOR": {"visibility": "U", "parameters": {}},
  "HORIZONTAL_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALLOWWRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ICON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEICONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NOTABSTOP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVERBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DECORATIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DYNAMIC_PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEADEREXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERPINNED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLEHEADERONTITLECLICK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DYNAMIC_PAGE_TITLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "DYNAMIC_PAGE_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PINNABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HTML": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERRENDERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PREFERDOM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SANITIZECONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ILLUSTRATED_MESSAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ENABLEVERTICALRESPONSIVENESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEFORMATTEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ILLUSTRATIONTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ILLUSTRATIONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "P_CELL_SELECTOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "P_COPY_PROVIDER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXTRACT_DATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COPY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ADDITIONAL_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "FLEX_BOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FITCONTAINER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "JUSTIFYCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYINLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "POPOVER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALFOCUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWARROW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HORIZONTALSCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VERTICALSCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OFFSETX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OFFSETY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTMINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORECLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADDITIONALTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGSCROLLTOLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALTERNATEROWCOLORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOPOPINMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEPARATORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWOVERLAY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDDENINPOPIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POPINLAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDLAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ANALYTICAL_TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ROWMODE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BREADCRUMBS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CURRENT_LOCATION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLOR_PALETTE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLORSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "AUTO": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWCONTENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MESSAGE_STRIP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLOSEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEFORMATTEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FOOTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "is_optional": " "}}},
  "MESSAGE_PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SHOW_HEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEFORMATTEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_PAGE_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SHOWTITLEINHEADERCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEDITHEADERBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITHEADERBUTTONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPPERCASEANCHORBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALWAYSSHOWCONTENTHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLELAZYLOADING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FLEXENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCONTENTPINNABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCONTENTPINNED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISCHILDPAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESERVEHEADERSTATEONSCROLL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWANCHORBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWANCHORBARPOPOVER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADERCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWONLYHIGHIMPORTANCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBSECTIONLAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLEHEADERONTITLECLICK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEICONTABBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USETWOCOLUMNSFORLARGESCREEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGNANCHORBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECTIONTITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORENAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCONTENTPINNEDSTATECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBSECTIONVISIBILITYCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLEANCHORBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_PAGE_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ISACTIONAREAALWAYSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISOBJECTICONALWAYSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISOBJECTSUBTITLEALWAYSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISOBJECTTITLEALWAYSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKCHANGES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKFAVORITE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKFLAGGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKLOCKED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTIMAGEALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTIMAGEBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTIMAGEDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTIMAGESHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTIMAGEURI": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTSUBTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OBJECTTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWMARKERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWPLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLESELECTOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKCHANGESPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKLOCKEDPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESELECTORPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_PAGE_HEADER_ACTION_BTN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONFIRST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMPORTANCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_PAGE_DYN_HEADER_TITLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GENERIC_TILE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADDITIONALTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPSHORTCUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDIMAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DROPAREAOFFSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FRAMETYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FAILEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERIMAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCOPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZEBEHAVIOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SYSTEMINFO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TILEBADGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TILEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "URL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMAGEDESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATIONBUTTONTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERONTHEMECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLENAVIGATIONBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESSENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONLOADED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NUMERIC_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WITHMARGIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADAPTIVEFONTSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ANIMATETEXTCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FORMATTERVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INDICATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NULLIFYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TRUNCATEVALUETO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINK_TILE_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LINKHREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINKTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINKPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "IMAGE_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TILE_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "UNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BLOCKED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FRAMETYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRIORITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRIORITYTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "EXPANDED_HEADING": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SNAPPED_HEADING": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "EXPANDED_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SNAPPED_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HEADING": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ACTIONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SNAPPED_TITLE_ON_MOBILE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NAVIGATION_ACTIONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "AVATAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BADGEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BADGETOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BADGEVALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMDISPLAYSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMFONTSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FALLBACKICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMAGEFITTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBORDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DECORATIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HEADER_TITLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SECTIONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "OBJECT_PAGE_SECTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLEUPPERCASE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMPORTANCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ANCHORBARBUTTONCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SUB_SECTIONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "OBJECT_PAGE_SUB_SECTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMPORTANCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEUPPERCASE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SHELL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPWIDTHLIMITED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SHELL_BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HOMEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOMEICONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NOTIFICATIONSNUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECONDTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCOPILOT": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "SHOWMENUBUTTON": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "SHOWNAVBUTTON": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "SHOWNOTIFICATIONS": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "SHOWPRODUCTSWITCHER": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "SHOWSEARCH": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AVATARPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COPILOTPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOMEICONPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MENUBUTTONPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVBUTTONPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NOTIFICATIONSPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRODUCTSWITCHERPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCHBUTTONPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BLOCKS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "LAYOUT_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FLEX_ITEM_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "GROWFACTOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BASESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STYLECLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHRINKFACTOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CODE_EDITOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SUGGESTION_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SUGGESTION_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SUGGESTION_COLUMNS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SUGGESTION_ROWS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "VERTICAL_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MULTI_INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUEHELP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGESTIONITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOKENUPDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOKENS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBMIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPREQUEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUGGESTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOKENS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOKEN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTABLESUGGESTIONVALUEHELP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGESTIONITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGESTIONROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUGGESTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUEHELP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPREQUEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBMIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUELIVEUPDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOCOMPLETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXSUGGESTIONWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEHELPICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTFORMATTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTFORMATMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STARTSUGGESTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESUGGESTIONSHIGHLIGHTING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLETABLEAUTOPOPINMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABELLEDBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIADESCRIBEDBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DIALOG": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STRETCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HORIZONTALSCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VERTICALSCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORECLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DRAGGABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLOSEONNAVIGATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ESCAPEHANDLER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CAROUSEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LOOP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARROWSPLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PAGEINDICATORBACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PAGEINDICATORBORDERDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PAGEINDICATORPLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWPAGEINDICATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BUTTONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GET_ROOT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GET_PARENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GET": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "is_optional": " "}}},
  "GET_CHILD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "INDEX": {"type": () => {return new abap.types.Integer({qualifiedName: "I"});}, "is_optional": " "}}},
  "COLUMNS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ANALYTICAL_COLUMN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINSCREENWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEMANDPOPIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STYLECLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTINDICATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POPINDISPLAY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MERGEFUNCTIONNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MERGEDUPLICATES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMPORTANCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOPOPINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERMENU": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INTERACT_DONUT_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTIONCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGETITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWERROR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDSEGMENTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEGMENTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SEGMENTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "INTERACT_DONUT_CHART_SEGMENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INTERACT_BAR_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTIONCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGETITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWERROR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDBARS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BARS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BARS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "INTERACT_BAR_CHART_BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INTERACT_LINE_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTIONCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRECEDINGPOINT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUCCEDDINGPOINT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERRORMESSAGETITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWERROR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDPOINTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POINTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "POINTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "INTERACT_LINE_CHART_POINT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECONDARYLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYEDVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RADIAL_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PERCENTAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ACTION_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CELLS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTENT_LEFT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTENT_MIDDLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTENT_RIGHT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTENT_AREAS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FIELD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEMPTYINDICATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CUSTOM_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "HEADER_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SUB_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CUSTOM_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CORE_CUSTOM_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BADGE_CUSTOM_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOGGLE_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONFIRST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACCESSIBLEROLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABELLEDBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIADESCRIBEDBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BEGIN_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "END_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SEARCH_FIELD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUGGEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESUGGESTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWREFRESHBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEARCHBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MESSAGE_VIEW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BARCODE_SCANNER_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCANSUCCESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCANFAIL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INPUTLIVEUPDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIALOGTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MESSAGE_POPOVER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LISTSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVETITLEPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORECLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALLYEXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MESSAGE_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKUPDESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LONGTEXTURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVETITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVBUTTONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNAVBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTONLYBUSY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESCROLLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVBUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FLOATINGFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUBHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MENU_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUTTONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTACTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PANEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "EXPANDABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKYHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDANIMATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPAND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "JUSTIFYCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYINLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FITCONTAINER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "JUSTIFYCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYINLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FITCONTAINER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SCROLL_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VERTICAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HORIZONTAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOCUSABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SIMPLE_FORM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNSXL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNSL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNSM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADJUSTLABELSPAN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BREAKPOINTL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BREAKPOINTM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BREAKPOINTXL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYSPANL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYSPANM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYSPANS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYSPANXL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELSPANS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELSPANM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELSPANL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELSPANXL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXCONTAINERCOLS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SINGLECONTAINERFULLSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "_CC_PLAIN_XML": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TITLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESTYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TAB_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TAB": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOW_TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ASYNCMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOW_TOOLBAR_TOGGLE_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOW_TOOLBAR_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OVERFLOW_TOOLBAR_MENU_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUTTONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTACTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MENU_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOOLBAR_SPACER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LABEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELFOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCOLON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "IMAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEMAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LAZYLOADING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DECORATIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDREPEAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVESRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ERROR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DATE_PICKER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCURRENTDATEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEINPUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CALENDARWEEKNUMBERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYFORMATTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALFOCUSEDDATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TIME_PICKER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LOCALEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASKMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINUTESSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDERSYMBOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECONDSSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCURRENTTIMEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORT2400": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALFOCUSEDDATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEINPUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERVALUEHELPOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERVALUEHELPCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DATE_TIME_PICKER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINK": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIDATEURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPHASIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACCESSIBLEROLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LIST": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEPARATORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTRIGGERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODEANIMATIONON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGSCROLLTOLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INCLUDEITEMINSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMEMBERSELECTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWUNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CUSTOM_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "INPUT_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STANDARD_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INFO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPCHARLIMIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INFOSTATEINVERTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INFOSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADAPTTITLESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SEGMENTED_BUTTON_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COMBOBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSECONDARYVALUES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEMID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSECONDARYVALUES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MULTI_COMBOBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEYS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONFINISH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSECONDARYVALUES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEMID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSECONDARYVALUES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSELECTALL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GRID": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULT_SPAN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTAINERQUERY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HSPACING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VSPACING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GRID_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SPAN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINEBREAK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INDENTL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INDENTM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEXT_AREA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUELIVEUPDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEXCEEDEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RANGE_SLIDER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "MAX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STARTVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTICKMARKS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELINTERVAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE2": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GENERIC_TAG": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABELLEDBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_ATTRIBUTE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_NUMBER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPHASIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERUNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INVERTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SWITCH": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMTEXTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMTEXTOFF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STEP_INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYVALUEPRECISION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LARGERSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEPMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIDATIONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PROGRESS_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PERCENTVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SEGMENTED_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTED_KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTION_CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CHECKBOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEHANDLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PARTIALLYSELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEENTIREWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HEADER_TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIAHASPOPUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEXT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERWHITESPACE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FORMATTED_TEXT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HTMLTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONVERTEDLINKSDEFAULTTARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONVERTLINKSTOANCHORTAGS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTROLS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "_GENERIC": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "T_PROP": {"type": () => {return abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");}, "is_optional": " "}}},
  "_GENERIC_PROPERTY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VAL": {"type": () => {return new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});}, "is_optional": " "}}},
  "XML_GET": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "is_optional": " "}}},
  "STRINGIFY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "is_optional": " "}}},
  "TREE_TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECOLUMNREORDERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDFIRSTLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWSELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONBEHAVIOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALTERNATEROWCOLORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNHEADERVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECELLFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECOLUMNFREEZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECUSTOMFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESELECTALL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWOVERLAY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNHEADERHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIRSTVISIBLEROW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDCOLUMNCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "THRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEGROUPMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPHEADERPROPERTY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWACTIONCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDINDEX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEROWCOUNTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINAUTOROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDBOTTOMROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLEOPENSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TREE_COLUMNS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TREE_COLUMN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEMPLATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TREE_TEMPLATE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "FILTER_BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "USETOOLBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PERSISTENCYKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERVARIANTLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERVARIANTSAVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ASSIGNEDFILTERSCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREVARIANTFETCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLEAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSDIALOGBEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSDIALOGCANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSDIALOGCLOSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALISE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERCONTAINERWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ADVANCEDMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISRUNNINGINVALUEHELPDIALOG": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWALLFILTERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARONFB": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFILTERCONFIGURATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGOONFB": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWRESTOREBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWRESTOREONFB": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USESNAPSHOT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCHENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONSIDERGROUPTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELTAVARIANTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISABLESEARCHMATCHESPATTERNW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERBAREXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FILTER_GROUP_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "FILTER_GROUP_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEINFILTERBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MANDATORY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTROLTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENTITYSETNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENTITYTYPENAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDDENFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FILTER_CONTROL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "FLEXIBLE_COLUMN_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAMEBEGINCOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAMEENDCOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAMEMIDCOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOFOCUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESTOREFOCUSONBACKNAVIGATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERBEGINCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERENDCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERMIDCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEGINCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNRESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MIDCOLUMNNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BEGIN_COLUMN_PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "MID_COLUMN_PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "END_COLUMN_PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNHEADERVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECELLFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEGROUPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESELECTALL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIRSTVISIBLEROW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDBOTTOMROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDCOLUMNCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXEDROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINAUTOROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWACTIONCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCOLUMNVISIBILITYMENU": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDINDEX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "THRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEROWCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEROWCOUNTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALTERNATEROWCOLORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWSELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FLEX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONBEHAVIOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "UI_COLUMN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSORTMENUENTRY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTPROPERTY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTORESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERPROPERTY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFILTERMENUENTRY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTFILTEROPERATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "UI_COLUMNS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_CUSTOM_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_EXTENSION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_TEMPLATE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CURRENCY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CURRENCY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USESYMBOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXPRECISION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STRINGVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "UI_ROW_ACTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_ROW_ACTION_TEMPLATE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UI_ROW_ACTION_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RADIO_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVEHANDLING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEENTIREWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RADIO_BUTTON_GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDINDEX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DYNAMIC_SIDE_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDECONTENTVISIBILITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSIDECONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTAINERQUERY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SIDE_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PLANNING_CALENDAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STARTDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTSVISUALIZATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEMPTYINTERVALHEADERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWWEEKNUMBERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDAYNAMESLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEGEND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTROUNDWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUILTINVIEWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CALENDARWEEKNUMBERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIRSTDAYOFWEEK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPAPPOINTMENTSMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRIMARYCALENDARTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECONDARYCALENDARTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWHEADERPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWSELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STARTDATECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEWCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKYHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEWKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SINGLESELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWROWHEADERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTIPLEAPPOINTMENTSSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWINTERVALHEADERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PLANNING_CALENDAR_VIEW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "APPOINTMENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALLABELFORMATTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALSL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALSM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALSS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RELATIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUBINTERVALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PLANNING_CALENDAR_ROW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "APPOINTMENTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTERVALHEADERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEAPPOINTMENTSCREATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEAPPOINTMENTSDRAGANDDROP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEAPPOINTMENTSRESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NOAPPOINTMENTSTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NONWORKINGHOURS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWHEADERDESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NONWORKINGDAYS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTCREATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTDRAGENTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTDROP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTRESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PLANNING_CALENDAR_LEGEND": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPOINTMENTITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STANDARDITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CALENDAR_LEGEND_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "APPOINTMENT_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "INFO_LABEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLORSCHEME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ROWS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "APPOINTMENTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CALENDAR_APPOINTMENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "STARTDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TENTATIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INTERVAL_HEADERS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "BLOCK_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BACKGROUND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BLOCK_LAYOUT_ROW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ROWCOLORSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BLOCK_LAYOUT_CELL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BACKGROUNDCOLORSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLORSHADE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_IDENTIFIER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_STATUS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INVERTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATEANNOUNCEMENTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TREE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INCLUDEITEMINSELECTION": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "INSET": {"type": () => {return new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLEOPENSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STANDARD_TREE_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ICON_TAB_BAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPAND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPPERCASE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TABSOVERFLOWMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TABDENSITYMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STRETCHCONTENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXNESTINGLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERBACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLETABREORDERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "APPLYCONTENTPADDING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ICON_TAB_FILTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWALL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ICON_TAB_SEPARATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "_Z2UI5": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW_CC", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW_CC"});}, "is_optional": " "}}},
  "GANTT_CHART_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTAINER_TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SHOWSEARCHBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCUSTOMCONTENTTORIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FINDMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FINDBUTTONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INFOOFSELECTITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBIRDEYEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDISPLAYTYPEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWLEGENDBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSETTINGBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTIMEZOOMCONTROL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEPCOUNTOFSLIDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ZOOMCONTROLTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ZOOMLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GANTT_CHART_WITH_TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPESELECTIONMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ISCONNECTORDETAILSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "AXIS_TIME_STRATEGY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "PROPORTION_ZOOM_STRATEGY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ZOOMLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOTAL_HORIZON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TIME_HORIZON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "STARTTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VISIBLE_HORIZON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "ROW_SETTINGS_TEMPLATE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GANTT_ROW_SETTINGS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ROWID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPES1": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RELATIONSHIPS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPES2": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SHAPES1": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SHAPES2": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TASK": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONNECTABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GANTT_TABLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "RATING_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "MAXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GANTT_TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "BASE_RECTANGLE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENDTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDFILL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ANIMATIONSETTINGS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FONTSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONNECTABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FONTFAMILY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TRANSFORM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTINBIRDEYE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FONTWEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HORIZONTALTEXTALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOOL_PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TOOL_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "ICON_TAB_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIATEXTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLETABREORDERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXNESTINGLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TABDENSITYMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TABSOVERFLOWMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NAV_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "INITIALPAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOFOCUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "MAIN_CONTENTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TABLE_SELECT_DIALOG": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CONFIRMBUTTONTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DRAGGABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMEMBERSELECTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCHPLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONFIRM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PROCESS_FLOW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOLDEDCORNERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLLABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WHEELZOOMABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODEPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ONERROR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LANES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NODES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NODE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLLAPSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CORENODESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTIONLINESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCHECKBOXSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWACTIONLINKSBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDETAILBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEXPANDBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELINESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "X": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "Y": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLLAPSEEXPAND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCHECKBOXPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ATTRIBUTES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIONBUTTONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NODE_IMAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LANES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "PROCESS_FLOW_NODE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LANEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEABBREVIATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHILDREN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOCUSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TAG": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PROCESS_FLOW_LANE_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LANEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ZOOMLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VIEW_SETTINGS_DIALOG": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CONFIRM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERDETAILPAGEOPENED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESETFILTERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERSEARCHOPERATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPDESCENDING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTDESCENDING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDGROUPITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDPRESETFILTERITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDSORTITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FILTER_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SORT_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "GROUP_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "VIEW_SETTINGS_FILTER_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VIEW_SETTINGS_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VARIANT_MANAGEMENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DEFAULTVARIANTKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INERRORSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALSELECTIONKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIFECYCLESUPPORT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCREATETILE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEXECUTEONSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSETASDEFAULT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSHARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STANDARDITEMAUTHOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STANDARDITEMTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEFAVORITES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VARIANTITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MANAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SAVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USERVARCREATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VARIANT_ITEMS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "VARIANT_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "EXECUTEONSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GLOBAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELREADONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIFECYCLEPACKAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIFECYCLETRANSPORTID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAMESPACE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "READONLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXECUTEONSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTHOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGEABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FAVORITE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIGINALTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIGINALEXECUTEONSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMOVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIGINALFAVORITE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHARING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VARIANT_MANAGEMENT_SAPM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CREATIONALLOWED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INERRORSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODIFIED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POPOVERTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSAVEAS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORTAPPLYAUTOMATICALLY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORTCONTEXTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORTDEFAULT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORTFAVORITES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUPPORTPUBLIC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESTYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MANAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MANAGECANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SAVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VARIANT_ITEM_SAPM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "AUTHOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGEABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTEXTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXECUTEONSELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FAVORITE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMOVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHARING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FEED_INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXLENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROWS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEXCEEDEDTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FEED_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONVERTEDLINKSDEFAULTTARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONVERTLINKSTOANCHORTAGS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INFO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LESSLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXCHARACTERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MORELABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SENDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SENDERACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TIMESTAMP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SENDERPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FEED_LIST_ITEM_ACTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FEED_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CONTENTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NEWS_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CONTENTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBHEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLOR_PICKER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLORSTRING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MASK_INPUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDERSYMBOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLEARICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RESPONSIVE_SPLITTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DEFAULTPANE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPLITTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INVISIBLE_TEXT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FIX_FLEX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIXCONTENTSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FIX_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FLEX_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PANE_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "RESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPLIT_PANE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIREDPARENTWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPLITTER_LAYOUT_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TOOLBAR_LAYOUT_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHRINKABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONDENSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FULLSCREENOPTIMIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMAGESHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTRO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROHREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROTARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROTEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERTEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERUNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESPONSIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTITLESELECTOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEHREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESELECTORTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLETARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLETEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESELECTORPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ADDITIONAL_NUMBERS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "HEADER_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SCROLLSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLLTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MARKERS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STATUSES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STATUS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BORDERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BORDERSTYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BORDERWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCONTENTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVERBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVERBORDERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVERCONTENTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEGENDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDBORDERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDCONTENTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEFOCUSCOLORASCONTENTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FIRST_STATUS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SECOND_STATUS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "OBJECT_MARKER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ADDITIONALINFO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBILITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "OBJECT_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTIVEICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTRO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INTROTEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERTEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERUNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLETEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DETAIL_BOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "LIGHT_BOX": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LIGHT_BOX_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMAGESRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINE_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEFTBOTTOMLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LEFTTOPLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RIGHTBOTTOMLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RIGHTTOPLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "THRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "THRESHOLDDISPLAYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBOTTOMLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWPOINTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTHRESHOLDLINE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTHRESHOLDVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTOPLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINE_MICRO_CHART_LINE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "POINTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINE_MICRO_CHART_POINT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "X": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "Y": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINE_MICRO_CHART_EMPSZD_POINT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "X": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "Y": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STACKED_BAR_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRECISION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYZEROVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALLOWCOLUMNLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBOTTOMLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTOPLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MICRO_CHART_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COMPARISON_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLORPALETTE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHRINKABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DELTA_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELTADISPLAYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYVALUE1": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYVALUE2": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE2": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE1": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE2": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE1": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BULLET_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTUALVALUELABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELTAVALUELABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGETVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGETVALUELABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWACTUALVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDELTAVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTARGETVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTHRESHOLDS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUEMARKER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SMALLRANGEALLOWED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FORECASTVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SAVIDM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HARVEY_BALL_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLORPALETTE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOTAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOTALLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FORMATTEDLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFRACTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTOTAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOTALSCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "AREA_MICRO_CHART": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COLORPALETTE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINXVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINYVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNCONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEONNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "RICH_TEXT_EDITOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BUTTONGROUPS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMTOOLBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITORTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLUGINS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SANITIZEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPCLIPBOARD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPFONT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPFONTSTYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPINSERT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPLINK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPSTRUCTURE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPTEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWGROUPUNDO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USELEGACYTHEME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREEDITORINIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "READY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "READYRECURRING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SLIDER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "MAX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MIN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLETICKMARKS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INPUTSASTOOLTIPS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWADVANCEDTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHANDLETOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "UPLOAD_SET": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INSTANTUPLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TERMINATIONENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILETYPES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXFILENAMELENGTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXFILESIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MEDIATYPES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADCOMPLETED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERITEMADDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SAMEFILENAMEALLOWED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADBUTTONINVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DIRECTORY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTIPLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DRAGDROPDESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DRAGDROPTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATADESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATAILLUSTRATIONTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERITEMEDITED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERITEMREMOVED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREITEMADDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREITEMEDITED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREITEMREMOVED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREUPLOADSTARTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREUPLOADTERMINATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILENAMELENGTHEXCEEDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILERENAMED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILESIZEEXCEEDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILETYPEMISMATCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMDRAGSTART": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMDROP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MEDIATYPEMISMATCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADTERMINATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "UPLOAD_SET_TOOLBAR_PLACEHOLDER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "UPLOAD_SET_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "FILENAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MEDIATYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "URL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "THUMBNAILURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MARKERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEDEDIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEDREMOVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEEDIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLEREMOVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPLOADURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OPENPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMOVEPRESSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MARKERS_AS_STATUS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "RULES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "MASK_INPUT_RULE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "MASKFORMATSYMBOL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REGEX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SIDE_PANEL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ACTIONBAREXPANDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELMAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELMINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELRESIZABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELRESIZELARGERSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELRESIZESTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEPANELWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOGGLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SIDE_PANEL_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MAIN_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "QUICK_VIEW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORECLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "QUICK_VIEW_PAGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PAGEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "QUICK_VIEW_PAGE_AVATAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "QUICK_VIEW_GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "HEADING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "QUICK_VIEW_GROUP_ELEMENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "EMAILSUBJECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PAGELINKID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "URL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DATE_RANGE_SELECTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEHOLDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUEFORMAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCURRENTDATEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDEINPUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWFOOTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWVALUESTATEMESSAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXDATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CALENDARWEEKNUMBERING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DISPLAYFORMATTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SECONDDATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALFOCUSEDDATEVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELIMITER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VARIANT_MANAGEMENT_FL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DISPLAYTEXTFSV": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EXECUTEONSELECTIONFORSTANDFLT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INERRORSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODELNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESETONCONTEXTCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSETASDEFAULT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLESTYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPDATEVARIANTINURL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALIZED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MANAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SAVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_ELEMENT_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "CELLSLARGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CELLSSMALL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FB_CONTROL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SMART_VARIANT_MANAGEMENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEXECUTEONSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FORM_TOOLBAR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "PAGING_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "COUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NEXTBUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PREVIOUSBUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TIMELINE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEDOUBLESIDED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPBY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTOLDESTFIRST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AXISORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEMODELFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLESCROLL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FORCEGROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LAZYLOADING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWHEADERBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWICONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWITEMFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSORT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWTIMEFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPBYTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERLIST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMFILTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TIMELINE_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATETIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USERNAMECLICKABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USEICONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USERNAMECLICKED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USERPICTURE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "USERNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILTERVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXCHARACTERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REPLYCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMACTIONCLICKED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REPLYLISTOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REPLYPOST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPLIT_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALDETAIL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALMASTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDIMAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDOPACITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDREPEAT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAMEDETAIL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFAULTTRANSITIONNAMEMASTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASTERBUTTONTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASTERBUTTONTOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERDETAILNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERMASTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERMASTERNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERMASTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREMASTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREMASTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASTERBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MASTERNAVIGATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DETAIL_PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "MASTER_PAGES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CONTAINER_CONTENT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MAP_CONTAINER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOADJUSTHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPOT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONTENTOFFSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOOLTIP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "IMAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLICK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ANALYTIC_MAP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALZOOM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SPOTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "VOS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "ACTION_SHEET": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCELBUTTONTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCANCELBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTEROPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORECLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCELBUTTONPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "EXPANDABLE_TEXT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EMPTYINDICATORMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXCHARACTERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OVERFLOWMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERWHITESPACE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPPINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SELECT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOADJUSTWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLUMNRATIO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "EDITABLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FORCESELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REQUIRED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESETONMISSINGKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEMID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSECONDARYVALUES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTALIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUESTATETEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WRAPITEMSTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVECHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "EMBEDDED_CONTROL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "HEADER_CONTAINER_CONTROL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GRIDLAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLLSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLLSTEPBYITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLLTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDIVIDERS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWOVERFLOWITEM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCROLL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SNAPTOROW": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DEPENDENTS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CARD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CARD_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLEMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATATIMESTAMP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NUMERIC_HEADER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATATIMESTAMP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILSMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILSSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONBACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONDISPLAYSHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONSRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICONVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBERVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCALE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIDEINDICATORSALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUSVISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBTITLEMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLEMAXLINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TREND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNITOFMEASUREMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NUMERIC_SIDE_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NUMBER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNIT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SLIDE_TILE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "DISPLAYTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SCOPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZEBEHAVIOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TRANSITIONTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TILES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "BUSY_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICONHEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICONROTATIONSPEED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICONWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CUSTOMICONDENSITYAWARE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "CUSTOM_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CAROUSEL_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "VISIBLEPAGESCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FACET_FILTER": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LIVESEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWPERSONALIZATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWPOPOVEROKBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWRESET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSUMMARYBAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONFIRM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LISTS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FACET_FILTER_LIST": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALLCOUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATATYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEBUSYINDICATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECASEINSENSITIVESEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGSCROLLTOLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTRIGGERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INCLUDEITEMINSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEYBOARDMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODEANIMATIONON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMEMBERSELECTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RETAINLISTSEQUENCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEQUENCE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWREMOVEFACETICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEPARATORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWUNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SWIPEDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WORDWRAP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LISTCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LISTOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FACET_FILTER_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "DRAFT_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINDISPLAYTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HTML_MAP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HTML_AREA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COORDS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TARGET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ONCLICK": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "HTML_CANVAS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STYLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NOTIFICATION_LIST": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FOOTERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGSCROLLTOLOAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTHRESHOLD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGTRIGGERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERLEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INCLUDEITEMINSELECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INSET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEYBOARDMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MODEANIMATIONON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MULTISELECTMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "REMEMBERSELECTIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEPARATORS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWUNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STICKY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SWIPEDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPENCONTEXTMENU": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DELETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGFINISHED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROWINGSTARTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SWIPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPDATEFINISHED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UPDATESTARTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NOTIFICATION_LIST_GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTOPRIORITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLLAPSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLECOLLAPSEBUTTONWHENEMPTY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRIORITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBUTTONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLOSEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWEMPTYGROUP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWITEMSCOUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ONCOLLAPSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NOTIFICATION_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTHORAVATARCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTHORINITIALS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIDESHOWMOREBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TRUNCATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTHORNAME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AUTHORPICTURE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COUNTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DATETIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HIGHLIGHTTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRIORITY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWBUTTONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCLOSEBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "UNREAD": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DETAILPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "WIZARD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDDESIGN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSYINDICATORDELAY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSYINDICATORSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEBRANCHING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDGROUPIDS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FINISHBUTTONTEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERMODE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWNEXTBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEPTITLELEVEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COMPLETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NAVIGATIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEPACTIVATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "WIZARD_STEP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSYINDICATORDELAY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BUSYINDICATORSIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FIELDGROUPIDS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OPTIONAL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALIDATED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ACTIVATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUBSEQUENTSTEPS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NEXTSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COMPLETE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEMPLATE_REPEAT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "LIST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEMPLATE_WITH": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "PATH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HELPER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VAR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEMPLATE_IF": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TEMPLATE_THEN": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TEMPLATE_ELSE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TEMPLATE_ELSEIF": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RELATIONSHIP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "SHAPEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SUCCESSOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PREDECESSOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "RELATIONSHIPS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "NO_DATA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LINE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARROWORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARROWPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FROM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINETYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STRETCHTOCENTER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TO": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HOVER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GROUPS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLLAPSED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DESCRIPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCHECKBOXSTATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MINWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PARENTGROUPKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATUS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLLAPSEEXPAND": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEADERCHECKBOXPRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWDETAIL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NETWORK_GRAPH": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LAYOUT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDIMAGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATATEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ORIENTATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEWHEELZOOM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLEZOOM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODATA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERLAYOUTING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFORELAYOUTING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FAILURE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GRAPHREADY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SEARCHSUGGEST": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTIONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ZOOMCHANGED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LAYOUT_ALGORITHM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "LAYERED_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINESPACINGFACTOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MERGEEDGES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODEPLACEMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "NODESPACING": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FORCE_BASED_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ALPHA": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHARGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FRICTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXIMUMDURATION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FORCE_DIRECTED_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COOLDOWNSTEP": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "INITIALTEMPERATURE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXITERATIONS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "MAXTIME": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "OPTIMALDISTANCECONSTANT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATICNODES": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NOOP_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SWIM_LANE_CHAIN_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "TWO_COLUMNS_LAYOUT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "ATTRIBUTES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ELEMENT_ATTRIBUTE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ACTION_BUTTONS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "NS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ACTION_BUTTON": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ROUTES": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LEGEND_AREA": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "LEGENDITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "LEGEND": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ITEMS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CAPTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "ROUTE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "POSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ROUTETYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINEDASH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "COLORBORDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LINEWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERCLOSE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BEFOREOPEN": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESETBUTTONENABLED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCANCELBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWCONFIRMBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWRESETBUTTON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CANCEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CONFIRM": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RESET": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_ACTION_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_ACTION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CATEGORY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_ACTION_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_GROUP_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "GROUPED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_SORT": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_SORT_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SORTORDER": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_TOTAL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "COLUMN_MENU_QUICK_TOTAL_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOTALED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MICRO_PROCESS_FLOW": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "RENDERTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "MICRO_PROCESS_FLOW_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWINTERMEDIARY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWSEPARATOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STATE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STEPWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TITLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "INTERMEDIARY": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "CUSTOM_CONTROL": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "RESPONSIVE_SCALE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TICKMARKSBETWEENLABELS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "STATUS_INDICATOR": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "LABELPOSITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHOWLABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SIZE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VIEWBOX": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "PRESS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "PROPERTY_THRESHOLDS": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "PROPERTY_THRESHOLD": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILLCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TOVALUE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ARIALABEL": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "SHAPE_GROUP": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "LIBRARY_SHAPE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ANIMATIONONCHANGE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "DEFINITION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILLCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILLINGANGLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILLINGDIRECTION": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "FILLINGTYPE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HEIGHT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HORIZONTALALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SHAPEID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STROKECOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "STROKEWIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VERTICALALIGNMENT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "VISIBLE": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "WIDTH": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "X": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "Y": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "AFTERSHAPELOADED": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "TILE_INFO": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BACKGROUNDCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "BORDERCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SRC": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "TEXTCOLOR": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "BADGE": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "SIDE_NAVIGATION": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "ID": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "CLASS": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECTEDKEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "NAVIGATION_LIST": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}},
  "NAVIGATION_LIST_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}, "TEXT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "ICON": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "SELECT": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "HREF": {"type": () => {return new abap.types.Character();}, "is_optional": " "}, "KEY": {"type": () => {return new abap.types.Character();}, "is_optional": " "}}},
  "FIXED_ITEM": {"visibility": "U", "parameters": {"RESULT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});}, "is_optional": " "}}}};
  constructor() {
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
    this.mv_name = new abap.types.String({qualifiedName: "STRING"});
    this.mv_ns = new abap.types.String({qualifiedName: "STRING"});
    this.mt_prop = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":false,"keyFields":["N"]},"secondary":[]}, "");
    this.mt_ns = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":true,"keyFields":["TABLE_LINE"]},"secondary":[]}, "");
    this.mo_root = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    this.mo_previous = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    this.mo_parent = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    this.mt_child = abap.types.TableFactory.construct(new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "");
  }
  async actions(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns;
    result.set((await this._generic({name: new abap.types.String().set(`actions`), ns: ns})));
    return result;
  }
  async action_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let position = INPUT?.position || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp1 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp2 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp1);
    temp2.get().n.set(new abap.types.String().set(`id`));
    temp2.get().v.set(id);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`class`));
    temp2.get().v.set($class);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`icon`));
    temp2.get().v.set(icon);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`position`));
    temp2.get().v.set(position);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`title`));
    temp2.get().v.set(title);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`press`));
    temp2.get().v.set(press);
    abap.statements.insertInternal({data: temp2, table: temp1});
    temp2.get().n.set(new abap.types.String().set(`enabled`));
    temp2.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp2, table: temp1});
    result.set((await this._generic({name: new abap.types.String().set(`ActionButton`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp1})));
    return result;
  }
  async action_buttons(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let temp3 = new abap.types.String({qualifiedName: "STRING"});
    let unique177 = ns;
    if (abap.compare.eq(unique177, new abap.types.Character(1).set(''))) {
      temp3.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp3.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`actionButtons`), ns: temp3})));
    return result;
  }
  async action_sheet(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let cancelbuttontext = INPUT?.cancelbuttontext || new abap.types.Character();
    let placement = INPUT?.placement || new abap.types.Character();
    let showcancelbutton = INPUT?.showcancelbutton || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let afteropen = INPUT?.afteropen || new abap.types.Character();
    let beforeclose = INPUT?.beforeclose || new abap.types.Character();
    let beforeopen = INPUT?.beforeopen || new abap.types.Character();
    let cancelbuttonpress = INPUT?.cancelbuttonpress || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp4 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp5 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp4);
    temp5.get().n.set(new abap.types.String().set(`id`));
    temp5.get().v.set(id);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`class`));
    temp5.get().v.set($class);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`cancelbuttontext`));
    temp5.get().v.set(cancelbuttontext);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`placement`));
    temp5.get().v.set(placement);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`showCancelButton`));
    temp5.get().v.set(showcancelbutton);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`title`));
    temp5.get().v.set(title);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`afterClose`));
    temp5.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`afterOpen`));
    temp5.get().v.set(afteropen);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`beforeClose`));
    temp5.get().v.set(beforeclose);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`beforeOpen`));
    temp5.get().v.set(beforeopen);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`cancelButtonPress`));
    temp5.get().v.set(cancelbuttonpress);
    abap.statements.insertInternal({data: temp5, table: temp4});
    temp5.get().n.set(new abap.types.String().set(`visible`));
    temp5.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp5, table: temp4});
    result.set((await this._generic({name: new abap.types.String().set(`ActionSheet`), t_prop: temp4})));
    return result;
  }
  async additional_content() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`additionalContent`)})));
    return result;
  }
  async additional_numbers() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`additionalNumbers`)})));
    return result;
  }
  async analytic_map(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let initialposition = INPUT?.initialposition || new abap.types.Character();
    let initialzoom = INPUT?.initialzoom || new abap.types.Character();
    let temp6 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp7 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp6);
    temp7.get().n.set(new abap.types.String().set(`id`));
    temp7.get().v.set(id);
    abap.statements.insertInternal({data: temp7, table: temp6});
    temp7.get().n.set(new abap.types.String().set(`initialPosition`));
    temp7.get().v.set(initialposition);
    abap.statements.insertInternal({data: temp7, table: temp6});
    temp7.get().n.set(new abap.types.String().set(`initialZoom`));
    temp7.get().v.set(initialzoom);
    abap.statements.insertInternal({data: temp7, table: temp6});
    result.set((await this._generic({name: new abap.types.String().set(`AnalyticMap`), ns: new abap.types.String().set(`vbm`), t_prop: temp6})));
    return result;
  }
  async appointments() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`appointments`)})));
    return result;
  }
  async appointment_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`appointmentItems`)})));
    return result;
  }
  async area_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let colorpalette = INPUT?.colorpalette || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let maxxvalue = INPUT?.maxxvalue || new abap.types.Character();
    let maxyvalue = INPUT?.maxyvalue || new abap.types.Character();
    let minxvalue = INPUT?.minxvalue || new abap.types.Character();
    let minyvalue = INPUT?.minyvalue || new abap.types.Character();
    let view = INPUT?.view || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let showlabel = INPUT?.showlabel || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp8 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp9 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp8);
    temp9.get().n.set(new abap.types.String().set(`colorPalette`));
    temp9.get().v.set(colorpalette);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`press`));
    temp9.get().v.set(press);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`size`));
    temp9.get().v.set(size);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`height`));
    temp9.get().v.set(height);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`maxXValue`));
    temp9.get().v.set(maxxvalue);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`maxYValue`));
    temp9.get().v.set(maxyvalue);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`minXValue`));
    temp9.get().v.set(minxvalue);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`minYValue`));
    temp9.get().v.set(minyvalue);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`view`));
    temp9.get().v.set(view);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`alignContent`));
    temp9.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp9.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`showLabel`));
    temp9.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showlabel})));
    abap.statements.insertInternal({data: temp9, table: temp8});
    temp9.get().n.set(new abap.types.String().set(`width`));
    temp9.get().v.set(width);
    abap.statements.insertInternal({data: temp9, table: temp8});
    await this._generic({name: new abap.types.String().set(`AreaMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp8});
    return result;
  }
  async attributes(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let temp10 = new abap.types.String({qualifiedName: "STRING"});
    let unique178 = ns;
    if (abap.compare.eq(unique178, new abap.types.Character(1).set(''))) {
      temp10.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp10.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`attributes`), ns: temp10})));
    return result;
  }
  async avatar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let src = INPUT?.src || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let displaysize = INPUT?.displaysize || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let badgeicon = INPUT?.badgeicon || new abap.types.Character();
    let badgetooltip = INPUT?.badgetooltip || new abap.types.Character();
    let badgevaluestate = INPUT?.badgevaluestate || new abap.types.Character();
    let customdisplaysize = INPUT?.customdisplaysize || new abap.types.Character();
    let customfontsize = INPUT?.customfontsize || new abap.types.Character();
    let displayshape = INPUT?.displayshape || new abap.types.Character();
    let fallbackicon = INPUT?.fallbackicon || new abap.types.Character();
    let imagefittype = INPUT?.imagefittype || new abap.types.Character();
    let initials = INPUT?.initials || new abap.types.Character();
    let showborder = INPUT?.showborder || new abap.types.Character();
    let decorative = INPUT?.decorative || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let temp11 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp12 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp11);
    temp12.get().n.set(new abap.types.String().set(`src`));
    temp12.get().v.set(src);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`class`));
    temp12.get().v.set($class);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp12.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp12.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`badgeIcon`));
    temp12.get().v.set(badgeicon);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`badgeTooltip`));
    temp12.get().v.set(badgetooltip);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`badgeValueState`));
    temp12.get().v.set(badgevaluestate);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`customDisplaySize`));
    temp12.get().v.set(customdisplaysize);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`customFontSize`));
    temp12.get().v.set(customfontsize);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`displayShape`));
    temp12.get().v.set(displayshape);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`fallbackIcon`));
    temp12.get().v.set(fallbackicon);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`imageFitType`));
    temp12.get().v.set(imagefittype);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`initials`));
    temp12.get().v.set(initials);
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`showBorder`));
    temp12.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showborder})));
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`decorative`));
    temp12.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: decorative})));
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`enabled`));
    temp12.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp12, table: temp11});
    temp12.get().n.set(new abap.types.String().set(`displaySize`));
    temp12.get().v.set(displaysize);
    abap.statements.insertInternal({data: temp12, table: temp11});
    await this._generic({name: new abap.types.String().set(`Avatar`), ns: ns, t_prop: temp11});
    return result;
  }
  async axis_time_strategy() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`axisTimeStrategy`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async badge() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`badge`)})));
    return result;
  }
  async badge_custom_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let key = INPUT?.key || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp13 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp14 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp13);
    temp14.get().n.set(new abap.types.String().set(`key`));
    temp14.get().v.set(key);
    abap.statements.insertInternal({data: temp14, table: temp13});
    temp14.get().n.set(new abap.types.String().set(`value`));
    temp14.get().v.set(value);
    abap.statements.insertInternal({data: temp14, table: temp13});
    temp14.get().n.set(new abap.types.String().set(`visible`));
    temp14.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp14, table: temp13});
    await this._generic({name: new abap.types.String().set(`BadgeCustomData`), t_prop: temp13});
    return result;
  }
  async bar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`Bar`)})));
    return result;
  }
  async barcode_scanner_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let scansuccess = INPUT?.scansuccess || new abap.types.Character();
    let scanfail = INPUT?.scanfail || new abap.types.Character();
    let inputliveupdate = INPUT?.inputliveupdate || new abap.types.Character();
    let dialogtitle = INPUT?.dialogtitle || new abap.types.Character();
    let temp15 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp16 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp15);
    temp16.get().n.set(new abap.types.String().set(`id`));
    temp16.get().v.set(id);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`scanSuccess`));
    temp16.get().v.set(scansuccess);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`scanFail`));
    temp16.get().v.set(scanfail);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`inputLiveUpdate`));
    temp16.get().v.set(inputliveupdate);
    abap.statements.insertInternal({data: temp16, table: temp15});
    temp16.get().n.set(new abap.types.String().set(`dialogTitle`));
    temp16.get().v.set(dialogtitle);
    abap.statements.insertInternal({data: temp16, table: temp15});
    result.set((await this._generic({name: new abap.types.String().set(`BarcodeScannerButton`), ns: new abap.types.Character(3).set('ndc'), t_prop: temp15})));
    return result;
  }
  async bars() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`bars`), ns: new abap.types.String().set(`mchart`)})));
    return result;
  }
  async base_rectangle(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let time = INPUT?.time || new abap.types.Character();
    let shapeid = INPUT?.shapeid || new abap.types.Character();
    let endtime = INPUT?.endtime || new abap.types.Character();
    let selectable = INPUT?.selectable || new abap.types.Character();
    let selectedfill = INPUT?.selectedfill || new abap.types.Character();
    let fill = INPUT?.fill || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let animationsettings = INPUT?.animationsettings || new abap.types.Character();
    let alignshape = INPUT?.alignshape || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let fontsize = INPUT?.fontsize || new abap.types.Character();
    let connectable = INPUT?.connectable || new abap.types.Character();
    let fontfamily = INPUT?.fontfamily || new abap.types.Character();
    let filter = INPUT?.filter || new abap.types.Character();
    let transform = INPUT?.transform || new abap.types.Character();
    let countinbirdeye = INPUT?.countinbirdeye || new abap.types.Character();
    let fontweight = INPUT?.fontweight || new abap.types.Character();
    let showtitle = INPUT?.showtitle || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let horizontaltextalignment = INPUT?.horizontaltextalignment || new abap.types.Character();
    let highlighted = INPUT?.highlighted || new abap.types.Character();
    let highlightable = INPUT?.highlightable || new abap.types.Character();
    let temp17 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp18 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp17);
    temp18.get().n.set(new abap.types.String().set(`time`));
    temp18.get().v.set(time);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`endTime`));
    temp18.get().v.set(endtime);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`selectable`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selectable})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`selectedFill`));
    temp18.get().v.set(selectedfill);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`fill`));
    temp18.get().v.set(fill);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`height`));
    temp18.get().v.set(height);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`title`));
    temp18.get().v.set(title);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`animationSettings`));
    temp18.get().v.set(animationsettings);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`alignShape`));
    temp18.get().v.set(alignshape);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`color`));
    temp18.get().v.set(color);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`fontSize`));
    temp18.get().v.set(fontsize);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`connectable`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: connectable})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`fontFamily`));
    temp18.get().v.set(fontfamily);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`filter`));
    temp18.get().v.set(filter);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`transform`));
    temp18.get().v.set(transform);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`countInBirdEye`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: countinbirdeye})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`fontWeight`));
    temp18.get().v.set(fontweight);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`showTitle`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitle})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`selected`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`resizable`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`horizontalTextAlignment`));
    temp18.get().v.set(horizontaltextalignment);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`shapeId`));
    temp18.get().v.set(shapeid);
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`highlighted`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: highlighted})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    temp18.get().n.set(new abap.types.String().set(`highlightable`));
    temp18.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: highlightable})));
    abap.statements.insertInternal({data: temp18, table: temp17});
    result.set((await this._generic({name: new abap.types.String().set(`BaseRectangle`), ns: new abap.types.Character(5).set('gantt'), t_prop: temp17})));
    return result;
  }
  async begin_button() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`beginButton`)})));
    return result;
  }
  async begin_column_pages() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`beginColumnPages`), ns: new abap.types.String().set(`f`)})));
    return result;
  }
  async blocks() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`blocks`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async block_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let background = INPUT?.background || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp19 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp20 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp19);
    temp20.get().n.set(new abap.types.String().set(`background`));
    temp20.get().v.set(background);
    abap.statements.insertInternal({data: temp20, table: temp19});
    temp20.get().n.set(new abap.types.String().set(`id`));
    temp20.get().v.set(id);
    abap.statements.insertInternal({data: temp20, table: temp19});
    result.set((await this._generic({name: new abap.types.String().set(`BlockLayout`), ns: new abap.types.String().set(`layout`), t_prop: temp19})));
    return result;
  }
  async block_layout_cell(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let backgroundcolorset = INPUT?.backgroundcolorset || new abap.types.Character();
    let backgroundcolorshade = INPUT?.backgroundcolorshade || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp21 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp22 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp21);
    temp22.get().n.set(new abap.types.String().set(`backgroundColorSet`));
    temp22.get().v.set(backgroundcolorset);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`backgroundColorShade`));
    temp22.get().v.set(backgroundcolorshade);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`title`));
    temp22.get().v.set(title);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp22.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`width`));
    temp22.get().v.set(width);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`class`));
    temp22.get().v.set($class);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`id`));
    temp22.get().v.set(id);
    abap.statements.insertInternal({data: temp22, table: temp21});
    temp22.get().n.set(new abap.types.String().set(`titleLevel`));
    temp22.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp22, table: temp21});
    result.set((await this._generic({name: new abap.types.String().set(`BlockLayoutCell`), ns: new abap.types.String().set(`layout`), t_prop: temp21})));
    return result;
  }
  async block_layout_row(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let rowcolorset = INPUT?.rowcolorset || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp23 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp24 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp23);
    temp24.get().n.set(new abap.types.String().set(`rowColorSet`));
    temp24.get().v.set(rowcolorset);
    abap.statements.insertInternal({data: temp24, table: temp23});
    temp24.get().n.set(new abap.types.String().set(`id`));
    temp24.get().v.set(id);
    abap.statements.insertInternal({data: temp24, table: temp23});
    result.set((await this._generic({name: new abap.types.String().set(`BlockLayoutRow`), ns: new abap.types.String().set(`layout`), t_prop: temp23})));
    return result;
  }
  async bullet_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let actualvaluelabel = INPUT?.actualvaluelabel || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let deltavaluelabel = INPUT?.deltavaluelabel || new abap.types.Character();
    let maxvalue = INPUT?.maxvalue || new abap.types.Character();
    let minvalue = INPUT?.minvalue || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let scale = INPUT?.scale || new abap.types.Character();
    let targetvalue = INPUT?.targetvalue || new abap.types.Character();
    let targetvaluelabel = INPUT?.targetvaluelabel || new abap.types.Character();
    let scalecolor = INPUT?.scalecolor || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let showactualvalue = INPUT?.showactualvalue || new abap.types.Character();
    let showdeltavalue = INPUT?.showdeltavalue || new abap.types.Character();
    let showtargetvalue = INPUT?.showtargetvalue || new abap.types.Character();
    let showthresholds = INPUT?.showthresholds || new abap.types.Character();
    let showvaluemarker = INPUT?.showvaluemarker || new abap.types.Character();
    let smallrangeallowed = INPUT?.smallrangeallowed || new abap.types.Character();
    let forecastvalue = INPUT?.forecastvalue || new abap.types.Character();
    let savidm = INPUT?.savidm || new abap.types.Character();
    let temp25 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp26 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp25);
    temp26.get().n.set(new abap.types.String().set(`actualValueLabel`));
    temp26.get().v.set(actualvaluelabel);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`press`));
    temp26.get().v.set(press);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`size`));
    temp26.get().v.set(size);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`height`));
    temp26.get().v.set(height);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`width`));
    temp26.get().v.set(width);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`deltaValueLabel`));
    temp26.get().v.set(deltavaluelabel);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`maxValue`));
    temp26.get().v.set(maxvalue);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`minValue`));
    temp26.get().v.set(minvalue);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`mode`));
    temp26.get().v.set(mode);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`scale`));
    temp26.get().v.set(scale);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`targetValue`));
    temp26.get().v.set(targetvalue);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`targetValueLabel`));
    temp26.get().v.set(targetvaluelabel);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`scaleColor`));
    temp26.get().v.set(scalecolor);
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showActualValue`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showactualvalue})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showActualValueInDeltaMode`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: savidm})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showDeltaValue`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showdeltavalue})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showTargetValue`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtargetvalue})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showThresholds`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showthresholds})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`showValueMarker`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluemarker})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`smallRangeAllowed`));
    temp26.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: smallrangeallowed})));
    abap.statements.insertInternal({data: temp26, table: temp25});
    temp26.get().n.set(new abap.types.String().set(`forecastValue`));
    temp26.get().v.set(forecastvalue);
    abap.statements.insertInternal({data: temp26, table: temp25});
    await this._generic({name: new abap.types.String().set(`BulletMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp25});
    return result;
  }
  async busy_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let customicon = INPUT?.customicon || new abap.types.Character();
    let customiconheight = INPUT?.customiconheight || new abap.types.Character();
    let customiconrotationspeed = INPUT?.customiconrotationspeed || new abap.types.Character();
    let customiconwidth = INPUT?.customiconwidth || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let customicondensityaware = INPUT?.customicondensityaware || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp27 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp28 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp27);
    temp28.get().n.set(new abap.types.String().set(`id`));
    temp28.get().v.set(id);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`class`));
    temp28.get().v.set($class);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`customIcon`));
    temp28.get().v.set(customicon);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`customIconHeight`));
    temp28.get().v.set(customiconheight);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`customIconRotationSpeed`));
    temp28.get().v.set(customiconrotationspeed);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`customIconWidth`));
    temp28.get().v.set(customiconwidth);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`size`));
    temp28.get().v.set(size);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`text`));
    temp28.get().v.set(text);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`textDirection`));
    temp28.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`customIconDensityAware`));
    temp28.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: customicondensityaware})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    temp28.get().n.set(new abap.types.String().set(`visible`));
    temp28.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp28, table: temp27});
    result.set((await this._generic({name: new abap.types.String().set(`BusyIndicator`), t_prop: temp27})));
    return result;
  }
  async button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let ns = INPUT?.ns || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let iconfirst = INPUT?.iconfirst || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let accessiblerole = INPUT?.accessiblerole || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let arialabelledby = INPUT?.arialabelledby || new abap.types.Character();
    let ariadescribedby = INPUT?.ariadescribedby || new abap.types.Character();
    let temp29 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp30 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp29);
    temp30.get().n.set(new abap.types.String().set(`press`));
    temp30.get().v.set(press);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`text`));
    temp30.get().v.set(text);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`enabled`));
    temp30.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`visible`));
    temp30.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp30.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`iconFirst`));
    temp30.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconfirst})));
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`icon`));
    temp30.get().v.set(icon);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`type`));
    temp30.get().v.set(type);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`id`));
    temp30.get().v.set(id);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`width`));
    temp30.get().v.set(width);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`tooltip`));
    temp30.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`textDirection`));
    temp30.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`accessibleRole`));
    temp30.get().v.set(accessiblerole);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`activeIcon`));
    temp30.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp30.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`class`));
    temp30.get().v.set($class);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`ariaLabelledBy`));
    temp30.get().v.set(arialabelledby);
    abap.statements.insertInternal({data: temp30, table: temp29});
    temp30.get().n.set(new abap.types.String().set(`ariaDescribedBy`));
    temp30.get().v.set(ariadescribedby);
    abap.statements.insertInternal({data: temp30, table: temp29});
    await this._generic({name: new abap.types.String().set(`Button`), ns: ns, t_prop: temp29});
    return result;
  }
  async buttons() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`buttons`)})));
    return result;
  }
  async calendar_appointment(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let startdate = INPUT?.startdate || new abap.types.Character();
    let enddate = INPUT?.enddate || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let tentative = INPUT?.tentative || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let temp31 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp32 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp31);
    temp32.get().n.set(new abap.types.String().set(`startDate`));
    temp32.get().v.set(startdate);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`endDate`));
    temp32.get().v.set(enddate);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`icon`));
    temp32.get().v.set(icon);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`title`));
    temp32.get().v.set(title);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`text`));
    temp32.get().v.set(text);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`type`));
    temp32.get().v.set(type);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`key`));
    temp32.get().v.set(key);
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`selected`));
    temp32.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp32, table: temp31});
    temp32.get().n.set(new abap.types.String().set(`tentative`));
    temp32.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: tentative})));
    abap.statements.insertInternal({data: temp32, table: temp31});
    result.set((await this._generic({name: new abap.types.String().set(`CalendarAppointment`), ns: new abap.types.String().set(`u`), t_prop: temp31})));
    return result;
  }
  async calendar_legend_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let temp33 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp34 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp33);
    temp34.get().n.set(new abap.types.String().set(`text`));
    temp34.get().v.set(text);
    abap.statements.insertInternal({data: temp34, table: temp33});
    temp34.get().n.set(new abap.types.String().set(`type`));
    temp34.get().v.set(type);
    abap.statements.insertInternal({data: temp34, table: temp33});
    temp34.get().n.set(new abap.types.String().set(`tooltip`));
    temp34.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp34, table: temp33});
    temp34.get().n.set(new abap.types.String().set(`color`));
    temp34.get().v.set(color);
    abap.statements.insertInternal({data: temp34, table: temp33});
    result.set((await this._generic({name: new abap.types.String().set(`CalendarLegendItem`), t_prop: temp33})));
    return result;
  }
  async card(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let headerposition = INPUT?.headerposition || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp35 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp36 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp35);
    temp36.get().n.set(new abap.types.String().set(`id`));
    temp36.get().v.set(id);
    abap.statements.insertInternal({data: temp36, table: temp35});
    temp36.get().n.set(new abap.types.String().set(`class`));
    temp36.get().v.set($class);
    abap.statements.insertInternal({data: temp36, table: temp35});
    temp36.get().n.set(new abap.types.String().set(`headerPosition`));
    temp36.get().v.set(headerposition);
    abap.statements.insertInternal({data: temp36, table: temp35});
    temp36.get().n.set(new abap.types.String().set(`height`));
    temp36.get().v.set(height);
    abap.statements.insertInternal({data: temp36, table: temp35});
    temp36.get().n.set(new abap.types.String().set(`width`));
    temp36.get().v.set(width);
    abap.statements.insertInternal({data: temp36, table: temp35});
    temp36.get().n.set(new abap.types.String().set(`visible`));
    temp36.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp36, table: temp35});
    result.set((await this._generic({name: new abap.types.String().set(`Card`), ns: new abap.types.String().set(`f`), t_prop: temp35})));
    return result;
  }
  async card_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let iconalt = INPUT?.iconalt || new abap.types.Character();
    let iconbackgroundcolor = INPUT?.iconbackgroundcolor || new abap.types.Character();
    let icondisplayshape = INPUT?.icondisplayshape || new abap.types.Character();
    let iconinitials = INPUT?.iconinitials || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let iconsrc = INPUT?.iconsrc || new abap.types.Character();
    let iconvisible = INPUT?.iconvisible || new abap.types.Character();
    let statustext = INPUT?.statustext || new abap.types.Character();
    let statusvisible = INPUT?.statusvisible || new abap.types.Character();
    let subtitle = INPUT?.subtitle || new abap.types.Character();
    let subtitlemaxlines = INPUT?.subtitlemaxlines || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titlemaxlines = INPUT?.titlemaxlines || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let datatimestamp = INPUT?.datatimestamp || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp37 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp38 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp37);
    temp38.get().n.set(new abap.types.String().set(`id`));
    temp38.get().v.set(id);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`class`));
    temp38.get().v.set($class);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`dataTimestamp`));
    temp38.get().v.set(datatimestamp);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconAlt`));
    temp38.get().v.set(iconalt);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconBackgroundColor`));
    temp38.get().v.set(iconbackgroundcolor);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconDisplayShape`));
    temp38.get().v.set(icondisplayshape);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconInitials`));
    temp38.get().v.set(iconinitials);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconSize`));
    temp38.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconSrc`));
    temp38.get().v.set(iconsrc);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`statusText`));
    temp38.get().v.set(statustext);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`statusVisible`));
    temp38.get().v.set(statusvisible);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`subtitle`));
    temp38.get().v.set(subtitle);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`subtitleMaxLines`));
    temp38.get().v.set(subtitlemaxlines);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`title`));
    temp38.get().v.set(title);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`press`));
    temp38.get().v.set(press);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`titleMaxLines`));
    temp38.get().v.set(titlemaxlines);
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`iconVisible`));
    temp38.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconvisible})));
    abap.statements.insertInternal({data: temp38, table: temp37});
    temp38.get().n.set(new abap.types.String().set(`visible`));
    temp38.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp38, table: temp37});
    result.set((await this._generic({name: new abap.types.String().set(`Header`), ns: new abap.types.String().set(`card`), t_prop: temp37})));
    return result;
  }
  async carousel(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let height = INPUT?.height || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let loop = INPUT?.loop || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let arrowsplacement = INPUT?.arrowsplacement || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let pageindicatorbackgrounddesign = INPUT?.pageindicatorbackgrounddesign || new abap.types.Character();
    let pageindicatorborderdesign = INPUT?.pageindicatorborderdesign || new abap.types.Character();
    let pageindicatorplacement = INPUT?.pageindicatorplacement || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let showpageindicator = INPUT?.showpageindicator || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp39 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp40 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp39);
    temp40.get().n.set(new abap.types.String().set(`loop`));
    temp40.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: loop})));
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`class`));
    temp40.get().v.set($class);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`height`));
    temp40.get().v.set(height);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`id`));
    temp40.get().v.set(id);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`arrowsPlacement`));
    temp40.get().v.set(arrowsplacement);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp40.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`pageIndicatorBackgroundDesign`));
    temp40.get().v.set(pageindicatorbackgrounddesign);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`pageIndicatorBorderDesign`));
    temp40.get().v.set(pageindicatorborderdesign);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`pageIndicatorPlacement`));
    temp40.get().v.set(pageindicatorplacement);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`width`));
    temp40.get().v.set(width);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`showPageIndicator`));
    temp40.get().v.set(showpageindicator);
    abap.statements.insertInternal({data: temp40, table: temp39});
    temp40.get().n.set(new abap.types.String().set(`visible`));
    temp40.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp40, table: temp39});
    result.set((await this._generic({name: new abap.types.String().set(`Carousel`), t_prop: temp39})));
    return result;
  }
  async carousel_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let visiblepagescount = INPUT?.visiblepagescount || new abap.types.Character();
    let temp41 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp42 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp41);
    temp42.get().n.set(new abap.types.String().set(`visiblePagesCount`));
    temp42.get().v.set(visiblepagescount);
    abap.statements.insertInternal({data: temp42, table: temp41});
    result.set((await this._generic({name: new abap.types.String().set(`CarouselLayout`), t_prop: temp41})));
    return result;
  }
  async cells() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`cells`)})));
    return result;
  }
  async checkbox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let activehandling = INPUT?.activehandling || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let displayonly = INPUT?.displayonly || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let partiallyselected = INPUT?.partiallyselected || new abap.types.Character();
    let useentirewidth = INPUT?.useentirewidth || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let temp43 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp44 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp43);
    temp44.get().n.set(new abap.types.String().set(`text`));
    temp44.get().v.set(text);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`id`));
    temp44.get().v.set(id);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`class`));
    temp44.get().v.set($class);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`name`));
    temp44.get().v.set(name);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`selected`));
    temp44.get().v.set(selected);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`textAlign`));
    temp44.get().v.set(textalign);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`textDirection`));
    temp44.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`valueState`));
    temp44.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`width`));
    temp44.get().v.set(width);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`activeHandling`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: activehandling})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`enabled`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`visible`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`displayOnly`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayonly})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`editable`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`partiallySelected`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: partiallyselected})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`useEntireWidth`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: useentirewidth})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`wrapping`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`select`));
    temp44.get().v.set(select);
    abap.statements.insertInternal({data: temp44, table: temp43});
    temp44.get().n.set(new abap.types.String().set(`required`));
    temp44.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp44, table: temp43});
    await this._generic({name: new abap.types.String().set(`CheckBox`), t_prop: temp43});
    return result;
  }
  async code_editor(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let temp45 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp46 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp45);
    temp46.get().n.set(new abap.types.String().set(`value`));
    temp46.get().v.set(value);
    abap.statements.insertInternal({data: temp46, table: temp45});
    temp46.get().n.set(new abap.types.String().set(`type`));
    temp46.get().v.set(type);
    abap.statements.insertInternal({data: temp46, table: temp45});
    temp46.get().n.set(new abap.types.String().set(`editable`));
    temp46.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp46, table: temp45});
    temp46.get().n.set(new abap.types.String().set(`height`));
    temp46.get().v.set(height);
    abap.statements.insertInternal({data: temp46, table: temp45});
    temp46.get().n.set(new abap.types.String().set(`width`));
    temp46.get().v.set(width);
    abap.statements.insertInternal({data: temp46, table: temp45});
    await this._generic({name: new abap.types.String().set(`CodeEditor`), ns: new abap.types.String().set(`editor`), t_prop: temp45});
    return result;
  }
  async column(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let minscreenwidth = INPUT?.minscreenwidth || new abap.types.Character();
    let demandpopin = INPUT?.demandpopin || new abap.types.Character();
    let halign = INPUT?.halign || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let valign = INPUT?.valign || new abap.types.Character();
    let styleclass = INPUT?.styleclass || new abap.types.Character();
    let sortindicator = INPUT?.sortindicator || new abap.types.Character();
    let popindisplay = INPUT?.popindisplay || new abap.types.Character();
    let mergefunctionname = INPUT?.mergefunctionname || new abap.types.Character();
    let mergeduplicates = INPUT?.mergeduplicates || new abap.types.Character();
    let importance = INPUT?.importance || new abap.types.Character();
    let autopopinwidth = INPUT?.autopopinwidth || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let headermenu = INPUT?.headermenu || new abap.types.Character();
    let temp47 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp48 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp47);
    temp48.get().n.set(new abap.types.String().set(`width`));
    temp48.get().v.set(width);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`minScreenWidth`));
    temp48.get().v.set(minscreenwidth);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`hAlign`));
    temp48.get().v.set(halign);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`headerMenu`));
    temp48.get().v.set(headermenu);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`autoPopinWidth`));
    temp48.get().v.set(autopopinwidth);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`vAlign`));
    temp48.get().v.set(valign);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`importance`));
    temp48.get().v.set(importance);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`mergeFunctionName`));
    temp48.get().v.set(mergefunctionname);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`popinDisplay`));
    temp48.get().v.set(popindisplay);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`sortIndicator`));
    temp48.get().v.set(sortindicator);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`styleClass`));
    temp48.get().v.set(styleclass);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`id`));
    temp48.get().v.set(id);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`class`));
    temp48.get().v.set($class);
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`mergeDuplicates`));
    temp48.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: mergeduplicates})));
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`visible`));
    temp48.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp48, table: temp47});
    temp48.get().n.set(new abap.types.String().set(`demandPopin`));
    temp48.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: demandpopin})));
    abap.statements.insertInternal({data: temp48, table: temp47});
    result.set((await this._generic({name: new abap.types.String().set(`Column`), t_prop: temp47})));
    return result;
  }
  async columns(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`columns`)})));
    return result;
  }
  async column_element_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let cellslarge = INPUT?.cellslarge || new abap.types.Character();
    let cellssmall = INPUT?.cellssmall || new abap.types.Character();
    let temp49 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp50 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp49);
    temp50.get().n.set(new abap.types.String().set(`cellsLarge`));
    temp50.get().v.set(cellslarge);
    abap.statements.insertInternal({data: temp50, table: temp49});
    temp50.get().n.set(new abap.types.String().set(`cellsSmall`));
    temp50.get().v.set(cellssmall);
    abap.statements.insertInternal({data: temp50, table: temp49});
    result.set((await this._generic({name: new abap.types.String().set(`ColumnElementData`), ns: new abap.types.String().set(`form`), t_prop: temp49})));
    return result;
  }
  async column_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let valign = INPUT?.valign || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let highlight = INPUT?.highlight || new abap.types.Character();
    let highlighttext = INPUT?.highlighttext || new abap.types.Character();
    let navigated = INPUT?.navigated || new abap.types.Character();
    let unread = INPUT?.unread || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let detailpress = INPUT?.detailpress || new abap.types.Character();
    let temp51 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp52 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp51);
    temp52.get().n.set(new abap.types.String().set(`vAlign`));
    temp52.get().v.set(valign);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`id`));
    temp52.get().v.set(id);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`selected`));
    temp52.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`unread`));
    temp52.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: unread})));
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`visible`));
    temp52.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`type`));
    temp52.get().v.set(type);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`counter`));
    temp52.get().v.set(counter);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`highlight`));
    temp52.get().v.set(highlight);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`highlightText`));
    temp52.get().v.set(highlighttext);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`detailPress`));
    temp52.get().v.set(detailpress);
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`navigated`));
    temp52.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: navigated})));
    abap.statements.insertInternal({data: temp52, table: temp51});
    temp52.get().n.set(new abap.types.String().set(`press`));
    temp52.get().v.set(press);
    abap.statements.insertInternal({data: temp52, table: temp51});
    result.set((await this._generic({name: new abap.types.String().set(`ColumnListItem`), t_prop: temp51})));
    return result;
  }
  async action_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let temp53 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp54 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp53);
    temp54.get().n.set(new abap.types.String().set(`id`));
    temp54.get().v.set(id);
    abap.statements.insertInternal({data: temp54, table: temp53});
    temp54.get().n.set(new abap.types.String().set(`text`));
    temp54.get().v.set(text);
    abap.statements.insertInternal({data: temp54, table: temp53});
    result.set((await this._generic({name: new abap.types.String().set(`ActionListItem`), t_prop: temp53})));
    return result;
  }
  async column_menu(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let beforeopen = INPUT?.beforeopen || new abap.types.Character();
    let temp55 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp56 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp55);
    temp56.get().n.set(new abap.types.String().set(`id`));
    temp56.get().v.set(id);
    abap.statements.insertInternal({data: temp56, table: temp55});
    temp56.get().n.set(new abap.types.String().set(`class`));
    temp56.get().v.set($class);
    abap.statements.insertInternal({data: temp56, table: temp55});
    temp56.get().n.set(new abap.types.String().set(`afterClose`));
    temp56.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp56, table: temp55});
    temp56.get().n.set(new abap.types.String().set(`beforeOpen`));
    temp56.get().v.set(beforeopen);
    abap.statements.insertInternal({data: temp56, table: temp55});
    temp56.get().n.set(new abap.types.String().set(`visible`));
    temp56.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp56, table: temp55});
    result.set((await this._generic({name: new abap.types.String().set(`Menu`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp55})));
    return result;
  }
  async column_menu_action_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp57 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp58 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp57);
    temp58.get().n.set(new abap.types.String().set(`id`));
    temp58.get().v.set(id);
    abap.statements.insertInternal({data: temp58, table: temp57});
    temp58.get().n.set(new abap.types.String().set(`class`));
    temp58.get().v.set($class);
    abap.statements.insertInternal({data: temp58, table: temp57});
    temp58.get().n.set(new abap.types.String().set(`icon`));
    temp58.get().v.set(icon);
    abap.statements.insertInternal({data: temp58, table: temp57});
    temp58.get().n.set(new abap.types.String().set(`label`));
    temp58.get().v.set(label);
    abap.statements.insertInternal({data: temp58, table: temp57});
    temp58.get().n.set(new abap.types.String().set(`press`));
    temp58.get().v.set(press);
    abap.statements.insertInternal({data: temp58, table: temp57});
    temp58.get().n.set(new abap.types.String().set(`visible`));
    temp58.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp58, table: temp57});
    result.set((await this._generic({name: new abap.types.String().set(`ActionItem`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp57})));
    return result;
  }
  async column_menu_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let resetbuttonenabled = INPUT?.resetbuttonenabled || new abap.types.Character();
    let showcancelbutton = INPUT?.showcancelbutton || new abap.types.Character();
    let showconfirmbutton = INPUT?.showconfirmbutton || new abap.types.Character();
    let showresetbutton = INPUT?.showresetbutton || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let confirm = INPUT?.confirm || new abap.types.Character();
    let reset = INPUT?.reset || new abap.types.Character();
    let temp59 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp60 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp59);
    temp60.get().n.set(new abap.types.String().set(`id`));
    temp60.get().v.set(id);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`class`));
    temp60.get().v.set($class);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`icon`));
    temp60.get().v.set(icon);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`label`));
    temp60.get().v.set(label);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`cancel`));
    temp60.get().v.set(cancel);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`confirm`));
    temp60.get().v.set(confirm);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`reset`));
    temp60.get().v.set(reset);
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`resetButtonEnabled`));
    temp60.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resetbuttonenabled})));
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`showCancelButton`));
    temp60.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcancelbutton})));
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`showConfirmButton`));
    temp60.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showconfirmbutton})));
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`showResetButton`));
    temp60.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showresetbutton})));
    abap.statements.insertInternal({data: temp60, table: temp59});
    temp60.get().n.set(new abap.types.String().set(`visible`));
    temp60.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp60, table: temp59});
    result.set((await this._generic({name: new abap.types.String().set(`Item`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp59})));
    return result;
  }
  async column_menu_quick_action(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let category = INPUT?.category || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp61 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp62 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp61);
    temp62.get().n.set(new abap.types.String().set(`id`));
    temp62.get().v.set(id);
    abap.statements.insertInternal({data: temp62, table: temp61});
    temp62.get().n.set(new abap.types.String().set(`class`));
    temp62.get().v.set($class);
    abap.statements.insertInternal({data: temp62, table: temp61});
    temp62.get().n.set(new abap.types.String().set(`category`));
    temp62.get().v.set(category);
    abap.statements.insertInternal({data: temp62, table: temp61});
    temp62.get().n.set(new abap.types.String().set(`label`));
    temp62.get().v.set(label);
    abap.statements.insertInternal({data: temp62, table: temp61});
    temp62.get().n.set(new abap.types.String().set(`visible`));
    temp62.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp62, table: temp61});
    result.set((await this._generic({name: new abap.types.String().set(`QuickAction`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp61})));
    return result;
  }
  async column_menu_quick_action_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp63 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp64 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp63);
    temp64.get().n.set(new abap.types.String().set(`id`));
    temp64.get().v.set(id);
    abap.statements.insertInternal({data: temp64, table: temp63});
    temp64.get().n.set(new abap.types.String().set(`class`));
    temp64.get().v.set($class);
    abap.statements.insertInternal({data: temp64, table: temp63});
    temp64.get().n.set(new abap.types.String().set(`key`));
    temp64.get().v.set(key);
    abap.statements.insertInternal({data: temp64, table: temp63});
    temp64.get().n.set(new abap.types.String().set(`label`));
    temp64.get().v.set(label);
    abap.statements.insertInternal({data: temp64, table: temp63});
    temp64.get().n.set(new abap.types.String().set(`visible`));
    temp64.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp64, table: temp63});
    result.set((await this._generic({name: new abap.types.String().set(`QuickActionItem`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp63})));
    return result;
  }
  async column_menu_quick_group(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp65 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp66 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp65);
    temp66.get().n.set(new abap.types.String().set(`id`));
    temp66.get().v.set(id);
    abap.statements.insertInternal({data: temp66, table: temp65});
    temp66.get().n.set(new abap.types.String().set(`class`));
    temp66.get().v.set($class);
    abap.statements.insertInternal({data: temp66, table: temp65});
    temp66.get().n.set(new abap.types.String().set(`change`));
    temp66.get().v.set(change);
    abap.statements.insertInternal({data: temp66, table: temp65});
    temp66.get().n.set(new abap.types.String().set(`visible`));
    temp66.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp66, table: temp65});
    result.set((await this._generic({name: new abap.types.String().set(`QuickGroup`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp65})));
    return result;
  }
  async column_menu_quick_group_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let grouped = INPUT?.grouped || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp67 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp68 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp67);
    temp68.get().n.set(new abap.types.String().set(`id`));
    temp68.get().v.set(id);
    abap.statements.insertInternal({data: temp68, table: temp67});
    temp68.get().n.set(new abap.types.String().set(`class`));
    temp68.get().v.set($class);
    abap.statements.insertInternal({data: temp68, table: temp67});
    temp68.get().n.set(new abap.types.String().set(`key`));
    temp68.get().v.set(key);
    abap.statements.insertInternal({data: temp68, table: temp67});
    temp68.get().n.set(new abap.types.String().set(`label`));
    temp68.get().v.set(label);
    abap.statements.insertInternal({data: temp68, table: temp67});
    temp68.get().n.set(new abap.types.String().set(`grouped`));
    temp68.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: grouped})));
    abap.statements.insertInternal({data: temp68, table: temp67});
    temp68.get().n.set(new abap.types.String().set(`visible`));
    temp68.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp68, table: temp67});
    result.set((await this._generic({name: new abap.types.String().set(`QuickGroupItem`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp67})));
    return result;
  }
  async column_menu_quick_sort(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp69 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp70 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp69);
    temp70.get().n.set(new abap.types.String().set(`id`));
    temp70.get().v.set(id);
    abap.statements.insertInternal({data: temp70, table: temp69});
    temp70.get().n.set(new abap.types.String().set(`class`));
    temp70.get().v.set($class);
    abap.statements.insertInternal({data: temp70, table: temp69});
    temp70.get().n.set(new abap.types.String().set(`change`));
    temp70.get().v.set(change);
    abap.statements.insertInternal({data: temp70, table: temp69});
    temp70.get().n.set(new abap.types.String().set(`visible`));
    temp70.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp70, table: temp69});
    result.set((await this._generic({name: new abap.types.String().set(`QuickSort`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp69})));
    return result;
  }
  async column_menu_quick_sort_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let sortorder = INPUT?.sortorder || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp71 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp72 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp71);
    temp72.get().n.set(new abap.types.String().set(`id`));
    temp72.get().v.set(id);
    abap.statements.insertInternal({data: temp72, table: temp71});
    temp72.get().n.set(new abap.types.String().set(`class`));
    temp72.get().v.set($class);
    abap.statements.insertInternal({data: temp72, table: temp71});
    temp72.get().n.set(new abap.types.String().set(`key`));
    temp72.get().v.set(key);
    abap.statements.insertInternal({data: temp72, table: temp71});
    temp72.get().n.set(new abap.types.String().set(`label`));
    temp72.get().v.set(label);
    abap.statements.insertInternal({data: temp72, table: temp71});
    temp72.get().n.set(new abap.types.String().set(`sortOrder`));
    temp72.get().v.set(sortorder);
    abap.statements.insertInternal({data: temp72, table: temp71});
    temp72.get().n.set(new abap.types.String().set(`visible`));
    temp72.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp72, table: temp71});
    result.set((await this._generic({name: new abap.types.String().set(`QuickSortItem`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp71})));
    return result;
  }
  async column_menu_quick_total(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp73 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp74 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp73);
    temp74.get().n.set(new abap.types.String().set(`id`));
    temp74.get().v.set(id);
    abap.statements.insertInternal({data: temp74, table: temp73});
    temp74.get().n.set(new abap.types.String().set(`class`));
    temp74.get().v.set($class);
    abap.statements.insertInternal({data: temp74, table: temp73});
    temp74.get().n.set(new abap.types.String().set(`change`));
    temp74.get().v.set(change);
    abap.statements.insertInternal({data: temp74, table: temp73});
    temp74.get().n.set(new abap.types.String().set(`visible`));
    temp74.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp74, table: temp73});
    result.set((await this._generic({name: new abap.types.String().set(`QuickTotal`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp73})));
    return result;
  }
  async column_menu_quick_total_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let totaled = INPUT?.totaled || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp75 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp76 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp75);
    temp76.get().n.set(new abap.types.String().set(`id`));
    temp76.get().v.set(id);
    abap.statements.insertInternal({data: temp76, table: temp75});
    temp76.get().n.set(new abap.types.String().set(`class`));
    temp76.get().v.set($class);
    abap.statements.insertInternal({data: temp76, table: temp75});
    temp76.get().n.set(new abap.types.String().set(`key`));
    temp76.get().v.set(key);
    abap.statements.insertInternal({data: temp76, table: temp75});
    temp76.get().n.set(new abap.types.String().set(`label`));
    temp76.get().v.set(label);
    abap.statements.insertInternal({data: temp76, table: temp75});
    temp76.get().n.set(new abap.types.String().set(`totaled`));
    temp76.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: totaled})));
    abap.statements.insertInternal({data: temp76, table: temp75});
    temp76.get().n.set(new abap.types.String().set(`visible`));
    temp76.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp76, table: temp75});
    result.set((await this._generic({name: new abap.types.String().set(`QuickTotalItem`), ns: new abap.types.String().set(`columnmenu`), t_prop: temp75})));
    return result;
  }
  async column_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let width = INPUT?.width || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let allowcolumnlabels = INPUT?.allowcolumnlabels || new abap.types.Character();
    let showbottomlabels = INPUT?.showbottomlabels || new abap.types.Character();
    let showtoplabels = INPUT?.showtoplabels || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let temp77 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp78 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp77);
    temp78.get().n.set(new abap.types.String().set(`width`));
    temp78.get().v.set(width);
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`press`));
    temp78.get().v.set(press);
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`size`));
    temp78.get().v.set(size);
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`alignContent`));
    temp78.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp78.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`allowColumnLabels`));
    temp78.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: allowcolumnlabels})));
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`showBottomLabels`));
    temp78.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbottomlabels})));
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`showTopLabels`));
    temp78.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtoplabels})));
    abap.statements.insertInternal({data: temp78, table: temp77});
    temp78.get().n.set(new abap.types.String().set(`height`));
    temp78.get().v.set(height);
    abap.statements.insertInternal({data: temp78, table: temp77});
    await this._generic({name: new abap.types.String().set(`ColumnMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp77});
    return result;
  }
  async column_micro_chart_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let displayvalue = INPUT?.displayvalue || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp79 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp80 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp79);
    temp80.get().n.set(new abap.types.String().set(`color`));
    temp80.get().v.set(color);
    abap.statements.insertInternal({data: temp80, table: temp79});
    temp80.get().n.set(new abap.types.String().set(`displayValue`));
    temp80.get().v.set(displayvalue);
    abap.statements.insertInternal({data: temp80, table: temp79});
    temp80.get().n.set(new abap.types.String().set(`label`));
    temp80.get().v.set(label);
    abap.statements.insertInternal({data: temp80, table: temp79});
    temp80.get().n.set(new abap.types.String().set(`value`));
    temp80.get().v.set(value);
    abap.statements.insertInternal({data: temp80, table: temp79});
    temp80.get().n.set(new abap.types.String().set(`press`));
    temp80.get().v.set(press);
    abap.statements.insertInternal({data: temp80, table: temp79});
    await this._generic({name: new abap.types.String().set(`ColumnMicroChartData`), ns: new abap.types.String().set(`mchart`), t_prop: temp79});
    return result;
  }
  async combobox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let selecteditem = INPUT?.selecteditem || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let showsecondaryvalues = INPUT?.showsecondaryvalues || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let selecteditemid = INPUT?.selecteditemid || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let showbutton = INPUT?.showbutton || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let filtersecondaryvalues = INPUT?.filtersecondaryvalues || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp81 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp82 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp81);
    temp82.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearicon})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`selectedKey`));
    temp82.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`items`));
    temp82.get().v.set(items);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`id`));
    temp82.get().v.set(id);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`class`));
    temp82.get().v.set($class);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`selectionchange`));
    temp82.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`selectedItem`));
    temp82.get().v.set(selecteditem);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`selectedItemId`));
    temp82.get().v.set(selecteditemid);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`name`));
    temp82.get().v.set(name);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`value`));
    temp82.get().v.set(value);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`valueState`));
    temp82.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`valueStateText`));
    temp82.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`textAlign`));
    temp82.get().v.set(textalign);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`showSecondaryValues`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsecondaryvalues})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`visible`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`showButton`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbutton})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`required`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`editable`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`enabled`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`filterSecondaryValues`));
    temp82.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: filtersecondaryvalues})));
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`width`));
    temp82.get().v.set(width);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`placeholder`));
    temp82.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp82, table: temp81});
    temp82.get().n.set(new abap.types.String().set(`change`));
    temp82.get().v.set(change);
    abap.statements.insertInternal({data: temp82, table: temp81});
    result.set((await this._generic({name: new abap.types.String().set(`ComboBox`), t_prop: temp81})));
    return result;
  }
  async comparison_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let colorpalette = INPUT?.colorpalette || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let maxvalue = INPUT?.maxvalue || new abap.types.Character();
    let minvalue = INPUT?.minvalue || new abap.types.Character();
    let scale = INPUT?.scale || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let shrinkable = INPUT?.shrinkable || new abap.types.Character();
    let view = INPUT?.view || new abap.types.Character();
    let temp83 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp84 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp83);
    temp84.get().n.set(new abap.types.String().set(`colorPalette`));
    temp84.get().v.set(colorpalette);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`press`));
    temp84.get().v.set(press);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`size`));
    temp84.get().v.set(size);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`height`));
    temp84.get().v.set(height);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`maxValue`));
    temp84.get().v.set(maxvalue);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`minValue`));
    temp84.get().v.set(minvalue);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`scale`));
    temp84.get().v.set(scale);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`width`));
    temp84.get().v.set(width);
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp84.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`shrinkable`));
    temp84.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shrinkable})));
    abap.statements.insertInternal({data: temp84, table: temp83});
    temp84.get().n.set(new abap.types.String().set(`view`));
    temp84.get().v.set(view);
    abap.statements.insertInternal({data: temp84, table: temp83});
    await this._generic({name: new abap.types.String().set(`ComparisonMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp83});
    return result;
  }
  async constructor_(INPUT) {
    return this;
  }
  async container_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let temp85 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp86 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp85);
    temp86.get().n.set(new abap.types.String().set(`id`));
    temp86.get().v.set(id);
    abap.statements.insertInternal({data: temp86, table: temp85});
    temp86.get().n.set(new abap.types.String().set(`title`));
    temp86.get().v.set(title);
    abap.statements.insertInternal({data: temp86, table: temp85});
    temp86.get().n.set(new abap.types.String().set(`icon`));
    temp86.get().v.set(icon);
    abap.statements.insertInternal({data: temp86, table: temp85});
    result.set((await this._generic({name: new abap.types.String().set(`ContainerContent`), ns: new abap.types.String().set(`vk`), t_prop: temp85})));
    return result;
  }
  async container_toolbar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let showsearchbutton = INPUT?.showsearchbutton || new abap.types.Character();
    let aligncustomcontenttoright = INPUT?.aligncustomcontenttoright || new abap.types.Character();
    let findmode = INPUT?.findmode || new abap.types.Character();
    let findbuttonpress = INPUT?.findbuttonpress || new abap.types.Character();
    let infoofselectitems = INPUT?.infoofselectitems || new abap.types.Character();
    let showbirdeyebutton = INPUT?.showbirdeyebutton || new abap.types.Character();
    let showdisplaytypebutton = INPUT?.showdisplaytypebutton || new abap.types.Character();
    let showlegendbutton = INPUT?.showlegendbutton || new abap.types.Character();
    let showsettingbutton = INPUT?.showsettingbutton || new abap.types.Character();
    let showtimezoomcontrol = INPUT?.showtimezoomcontrol || new abap.types.Character();
    let stepcountofslider = INPUT?.stepcountofslider || new abap.types.Character();
    let zoomcontroltype = INPUT?.zoomcontroltype || new abap.types.Character();
    let zoomlevel = INPUT?.zoomlevel || new abap.types.Character();
    let temp87 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp88 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp87);
    temp88.get().n.set(new abap.types.String().set(`showSearchButton`));
    temp88.get().v.set(showsearchbutton);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`alignCustomContentToRight`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: aligncustomcontenttoright})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`findMode`));
    temp88.get().v.set(findmode);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`infoOfSelectItems`));
    temp88.get().v.set(infoofselectitems);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`findbuttonpress`));
    temp88.get().v.set(findbuttonpress);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`showBirdEyeButton`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbirdeyebutton})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`showDisplayTypeButton`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showdisplaytypebutton})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`showLegendButton`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showlegendbutton})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`showSettingButton`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsettingbutton})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`showTimeZoomControl`));
    temp88.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtimezoomcontrol})));
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`stepCountOfSlider`));
    temp88.get().v.set(stepcountofslider);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`zoomControlType`));
    temp88.get().v.set(zoomcontroltype);
    abap.statements.insertInternal({data: temp88, table: temp87});
    temp88.get().n.set(new abap.types.String().set(`zoomLevel`));
    temp88.get().v.set(zoomlevel);
    abap.statements.insertInternal({data: temp88, table: temp87});
    result.set((await this._generic({name: new abap.types.String().set(`ContainerToolbar`), ns: new abap.types.String().set(`gantt`), t_prop: temp87})));
    return result;
  }
  async content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`content`)})));
    return result;
  }
  async content_left() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`contentLeft`)})));
    return result;
  }
  async content_middle() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`contentMiddle`)})));
    return result;
  }
  async content_right() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`contentRight`)})));
    return result;
  }
  async core_custom_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let key = INPUT?.key || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let temp89 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp90 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp89);
    temp90.get().n.set(new abap.types.String().set(`value`));
    temp90.get().v.set(value);
    abap.statements.insertInternal({data: temp90, table: temp89});
    temp90.get().n.set(new abap.types.String().set(`key`));
    temp90.get().v.set(key);
    abap.statements.insertInternal({data: temp90, table: temp89});
    await this._generic({name: new abap.types.String().set(`CustomData`), ns: new abap.types.String().set(`core`), t_prop: temp89});
    return result;
  }
  async currency(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let currency = INPUT?.currency || new abap.types.Character();
    let usesymbol = INPUT?.usesymbol || new abap.types.Character();
    let maxprecision = INPUT?.maxprecision || new abap.types.Character();
    let stringvalue = INPUT?.stringvalue || new abap.types.Character();
    let temp91 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp92 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp91);
    temp92.get().n.set(new abap.types.String().set(`value`));
    temp92.get().v.set(value);
    abap.statements.insertInternal({data: temp92, table: temp91});
    temp92.get().n.set(new abap.types.String().set(`currency`));
    temp92.get().v.set(currency);
    abap.statements.insertInternal({data: temp92, table: temp91});
    temp92.get().n.set(new abap.types.String().set(`useSymbol`));
    temp92.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usesymbol})));
    abap.statements.insertInternal({data: temp92, table: temp91});
    temp92.get().n.set(new abap.types.String().set(`maxPrecision`));
    temp92.get().v.set(maxprecision);
    abap.statements.insertInternal({data: temp92, table: temp91});
    temp92.get().n.set(new abap.types.String().set(`stringValue`));
    temp92.get().v.set(stringvalue);
    abap.statements.insertInternal({data: temp92, table: temp91});
    result.set((await this._generic({name: new abap.types.String().set(`Currency`), ns: new abap.types.Character(1).set('u'), t_prop: temp91})));
    return result;
  }
  async custom_control() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`customControl`), ns: new abap.types.String().set(`commons`)})));
    return result;
  }
  async custom_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`customData`), ns: ns})));
    return result;
  }
  async custom_header() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`customHeader`)})));
    return result;
  }
  async custom_layout() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`customLayout`)})));
    return result;
  }
  async custom_list_item() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`CustomListItem`)})));
    return result;
  }
  async data() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`data`), ns: new abap.types.String().set(`mchart`)})));
    return result;
  }
  async date_picker(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let displayformat = INPUT?.displayformat || new abap.types.Character();
    let valueformat = INPUT?.valueformat || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let showcurrentdatebutton = INPUT?.showcurrentdatebutton || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let hideinput = INPUT?.hideinput || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let mindate = INPUT?.mindate || new abap.types.Character();
    let maxdate = INPUT?.maxdate || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let calendarweeknumbering = INPUT?.calendarweeknumbering || new abap.types.Character();
    let displayformattype = INPUT?.displayformattype || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let datevalue = INPUT?.datevalue || new abap.types.Character();
    let initialfocuseddatevalue = INPUT?.initialfocuseddatevalue || new abap.types.Character();
    let temp93 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp94 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp93);
    temp94.get().n.set(new abap.types.String().set(`value`));
    temp94.get().v.set(value);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`displayFormat`));
    temp94.get().v.set(displayformat);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`displayFormatType`));
    temp94.get().v.set(displayformattype);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`valueFormat`));
    temp94.get().v.set(valueformat);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`required`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`valueState`));
    temp94.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`valueStateText`));
    temp94.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`placeholder`));
    temp94.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`textAlign`));
    temp94.get().v.set(textalign);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`textDirection`));
    temp94.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`change`));
    temp94.get().v.set(change);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`maxDate`));
    temp94.get().v.set(maxdate);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`minDate`));
    temp94.get().v.set(mindate);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`width`));
    temp94.get().v.set(width);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`id`));
    temp94.get().v.set(id);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`dateValue`));
    temp94.get().v.set(datevalue);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`name`));
    temp94.get().v.set(name);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`class`));
    temp94.get().v.set($class);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`calendarWeekNumbering`));
    temp94.get().v.set(calendarweeknumbering);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`initialFocusedDateValue`));
    temp94.get().v.set(initialfocuseddatevalue);
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`enabled`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`visible`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`editable`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`hideInput`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideinput})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`showFooter`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    temp94.get().n.set(new abap.types.String().set(`showCurrentDateButton`));
    temp94.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcurrentdatebutton})));
    abap.statements.insertInternal({data: temp94, table: temp93});
    await this._generic({name: new abap.types.String().set(`DatePicker`), t_prop: temp93});
    return result;
  }
  async date_time_picker(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let temp95 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp96 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp95);
    temp96.get().n.set(new abap.types.String().set(`value`));
    temp96.get().v.set(value);
    abap.statements.insertInternal({data: temp96, table: temp95});
    temp96.get().n.set(new abap.types.String().set(`placeholder`));
    temp96.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp96, table: temp95});
    temp96.get().n.set(new abap.types.String().set(`enabled`));
    temp96.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp96, table: temp95});
    temp96.get().n.set(new abap.types.String().set(`valueState`));
    temp96.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp96, table: temp95});
    await this._generic({name: new abap.types.String().set(`DateTimePicker`), t_prop: temp95});
    return result;
  }
  async delta_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let color = INPUT?.color || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let deltadisplayvalue = INPUT?.deltadisplayvalue || new abap.types.Character();
    let displayvalue1 = INPUT?.displayvalue1 || new abap.types.Character();
    let displayvalue2 = INPUT?.displayvalue2 || new abap.types.Character();
    let title2 = INPUT?.title2 || new abap.types.Character();
    let value1 = INPUT?.value1 || new abap.types.Character();
    let value2 = INPUT?.value2 || new abap.types.Character();
    let view = INPUT?.view || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let title1 = INPUT?.title1 || new abap.types.Character();
    let temp97 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp98 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp97);
    temp98.get().n.set(new abap.types.String().set(`color`));
    temp98.get().v.set(color);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`press`));
    temp98.get().v.set(press);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`size`));
    temp98.get().v.set(size);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`height`));
    temp98.get().v.set(height);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`width`));
    temp98.get().v.set(width);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`deltaDisplayValue`));
    temp98.get().v.set(deltadisplayvalue);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`displayValue1`));
    temp98.get().v.set(displayvalue1);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`displayValue2`));
    temp98.get().v.set(displayvalue2);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`title2`));
    temp98.get().v.set(title2);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`value1`));
    temp98.get().v.set(value1);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`value2`));
    temp98.get().v.set(value2);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`view`));
    temp98.get().v.set(view);
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp98.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp98, table: temp97});
    temp98.get().n.set(new abap.types.String().set(`title1`));
    temp98.get().v.set(title1);
    abap.statements.insertInternal({data: temp98, table: temp97});
    await this._generic({name: new abap.types.String().set(`DeltaMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp97});
    return result;
  }
  async dependents(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`dependents`), ns: ns})));
    return result;
  }
  async detail_box() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`detailBox`)})));
    return result;
  }
  async detail_pages() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`detailPages`)})));
    return result;
  }
  async dialog(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let showheader = INPUT?.showheader || new abap.types.Character();
    let stretch = INPUT?.stretch || new abap.types.Character();
    let contentheight = INPUT?.contentheight || new abap.types.Character();
    let contentwidth = INPUT?.contentwidth || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let horizontalscrolling = INPUT?.horizontalscrolling || new abap.types.Character();
    let verticalscrolling = INPUT?.verticalscrolling || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let beforeopen = INPUT?.beforeopen || new abap.types.Character();
    let beforeclose = INPUT?.beforeclose || new abap.types.Character();
    let afteropen = INPUT?.afteropen || new abap.types.Character();
    let draggable = INPUT?.draggable || new abap.types.Character();
    let closeonnavigation = INPUT?.closeonnavigation || new abap.types.Character();
    let escapehandler = INPUT?.escapehandler || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let temp99 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp100 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp99);
    temp100.get().n.set(new abap.types.String().set(`title`));
    temp100.get().v.set(title);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`icon`));
    temp100.get().v.set(icon);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`stretch`));
    temp100.get().v.set(stretch);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`state`));
    temp100.get().v.set(state);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp100.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`type`));
    temp100.get().v.set(type);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`showHeader`));
    temp100.get().v.set(showheader);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`contentWidth`));
    temp100.get().v.set(contentwidth);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`contentHeight`));
    temp100.get().v.set(contentheight);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`escapeHandler`));
    temp100.get().v.set(escapehandler);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`closeOnNavigation`));
    temp100.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: closeonnavigation})));
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`draggable`));
    temp100.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: draggable})));
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`resizable`));
    temp100.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`horizontalScrolling`));
    temp100.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: horizontalscrolling})));
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`verticalScrolling`));
    temp100.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: verticalscrolling})));
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`afterOpen`));
    temp100.get().v.set(afteropen);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`beforeClose`));
    temp100.get().v.set(beforeclose);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`beforeOpen`));
    temp100.get().v.set(beforeopen);
    abap.statements.insertInternal({data: temp100, table: temp99});
    temp100.get().n.set(new abap.types.String().set(`afterClose`));
    temp100.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp100, table: temp99});
    result.set((await this._generic({name: new abap.types.String().set(`Dialog`), t_prop: temp99})));
    return result;
  }
  async draft_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let mindisplaytime = INPUT?.mindisplaytime || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp101 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp102 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp101);
    temp102.get().n.set(new abap.types.String().set(`id`));
    temp102.get().v.set(id);
    abap.statements.insertInternal({data: temp102, table: temp101});
    temp102.get().n.set(new abap.types.String().set(`class`));
    temp102.get().v.set($class);
    abap.statements.insertInternal({data: temp102, table: temp101});
    temp102.get().n.set(new abap.types.String().set(`minDisplayTime`));
    temp102.get().v.set(mindisplaytime);
    abap.statements.insertInternal({data: temp102, table: temp101});
    temp102.get().n.set(new abap.types.String().set(`state`));
    temp102.get().v.set(state);
    abap.statements.insertInternal({data: temp102, table: temp101});
    temp102.get().n.set(new abap.types.String().set(`visible`));
    temp102.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp102, table: temp101});
    result.set((await this._generic({name: new abap.types.String().set(`DraftIndicator`), t_prop: temp101})));
    return result;
  }
  async dynamic_page(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let headerexpanded = INPUT?.headerexpanded || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let headerpinned = INPUT?.headerpinned || new abap.types.Character();
    let toggleheaderontitleclick = INPUT?.toggleheaderontitleclick || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp103 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp104 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp103);
    temp104.get().n.set(new abap.types.String().set(`headerExpanded`));
    temp104.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: headerexpanded})));
    abap.statements.insertInternal({data: temp104, table: temp103});
    temp104.get().n.set(new abap.types.String().set(`headerPinned`));
    temp104.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: headerpinned})));
    abap.statements.insertInternal({data: temp104, table: temp103});
    temp104.get().n.set(new abap.types.String().set(`showFooter`));
    temp104.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp104, table: temp103});
    temp104.get().n.set(new abap.types.String().set(`toggleHeaderOnTitleClick`));
    temp104.get().v.set(toggleheaderontitleclick);
    abap.statements.insertInternal({data: temp104, table: temp103});
    temp104.get().n.set(new abap.types.String().set(`class`));
    temp104.get().v.set($class);
    abap.statements.insertInternal({data: temp104, table: temp103});
    result.set((await this._generic({name: new abap.types.String().set(`DynamicPage`), ns: new abap.types.String().set(`f`), t_prop: temp103})));
    return result;
  }
  async dynamic_page_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let pinnable = INPUT?.pinnable || new abap.types.Character();
    let temp105 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp106 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp105);
    temp106.get().n.set(new abap.types.String().set(`pinnable`));
    temp106.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: pinnable})));
    abap.statements.insertInternal({data: temp106, table: temp105});
    result.set((await this._generic({name: new abap.types.String().set(`DynamicPageHeader`), ns: new abap.types.String().set(`f`), t_prop: temp105})));
    return result;
  }
  async dynamic_page_title() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`DynamicPageTitle`), ns: new abap.types.String().set(`f`)})));
    return result;
  }
  async dynamic_side_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let sidecontentvisibility = INPUT?.sidecontentvisibility || new abap.types.Character();
    let showsidecontent = INPUT?.showsidecontent || new abap.types.Character();
    let containerquery = INPUT?.containerquery || new abap.types.Character();
    let temp107 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp108 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp107);
    temp108.get().n.set(new abap.types.String().set(`id`));
    temp108.get().v.set(id);
    abap.statements.insertInternal({data: temp108, table: temp107});
    temp108.get().n.set(new abap.types.String().set(`class`));
    temp108.get().v.set($class);
    abap.statements.insertInternal({data: temp108, table: temp107});
    temp108.get().n.set(new abap.types.String().set(`sideContentVisibility`));
    temp108.get().v.set(sidecontentvisibility);
    abap.statements.insertInternal({data: temp108, table: temp107});
    temp108.get().n.set(new abap.types.String().set(`showSideContent`));
    temp108.get().v.set(showsidecontent);
    abap.statements.insertInternal({data: temp108, table: temp107});
    temp108.get().n.set(new abap.types.String().set(`containerQuery`));
    temp108.get().v.set(containerquery);
    abap.statements.insertInternal({data: temp108, table: temp107});
    result.set((await this._generic({name: new abap.types.String().set(`DynamicSideContent`), ns: new abap.types.Character(6).set('layout'), t_prop: temp107})));
    return result;
  }
  async element_attribute(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let temp109 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp110 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp1 = new abap.types.String({qualifiedName: "STRING"});
    abap.statements.clear(temp109);
    temp110.get().n.set(new abap.types.String().set(`label`));
    temp110.get().v.set(label);
    abap.statements.insertInternal({data: temp110, table: temp109});
    temp110.get().n.set(new abap.types.String().set(`value`));
    temp110.get().v.set(value);
    abap.statements.insertInternal({data: temp110, table: temp109});
    let unique179 = ns;
    if (abap.compare.eq(unique179, new abap.types.Character(1).set(''))) {
      temp1.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp1.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`ElementAttribute`), ns: temp1, t_prop: temp109})));
    return result;
  }
  async embedded_control() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`embeddedControl`), ns: new abap.types.String().set(`commons`)})));
    return result;
  }
  async end_button() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`endButton`)})));
    return result;
  }
  async end_column_pages() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(this.me);
    return result;
  }
  async expandable_text(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let maxcharacters = INPUT?.maxcharacters || new abap.types.Character();
    let overflowmode = INPUT?.overflowmode || new abap.types.Character();
    let renderwhitespace = INPUT?.renderwhitespace || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp111 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp112 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp111);
    temp112.get().n.set(new abap.types.String().set(`id`));
    temp112.get().v.set(id);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp112.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`maxCharacters`));
    temp112.get().v.set(maxcharacters);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`overflowMode`));
    temp112.get().v.set(overflowmode);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`renderWhitespace`));
    temp112.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: renderwhitespace})));
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`text`));
    temp112.get().v.set(text);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`textAlign`));
    temp112.get().v.set(textalign);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`textDirection`));
    temp112.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`wrappingType`));
    temp112.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`visible`));
    temp112.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp112, table: temp111});
    temp112.get().n.set(new abap.types.String().set(`class`));
    temp112.get().v.set($class);
    abap.statements.insertInternal({data: temp112, table: temp111});
    result.set((await this._generic({name: new abap.types.String().set(`ExpandableText`), t_prop: temp111})));
    return result;
  }
  async expanded_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns;
    result.set((await this._generic({name: new abap.types.String().set(`expandedContent`), ns: ns})));
    return result;
  }
  async expanded_heading() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`expandedHeading`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async facet_filter(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let livesearch = INPUT?.livesearch || new abap.types.Character();
    let showpersonalization = INPUT?.showpersonalization || new abap.types.Character();
    let showpopoverokbutton = INPUT?.showpopoverokbutton || new abap.types.Character();
    let showreset = INPUT?.showreset || new abap.types.Character();
    let showsummarybar = INPUT?.showsummarybar || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let confirm = INPUT?.confirm || new abap.types.Character();
    let reset = INPUT?.reset || new abap.types.Character();
    let lists = INPUT?.lists || new abap.types.Character();
    let temp113 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp114 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp113);
    temp114.get().n.set(new abap.types.String().set(`id`));
    temp114.get().v.set(id);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`class`));
    temp114.get().v.set($class);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`liveSearch`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: livesearch})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`showPersonalization`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showpersonalization})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`showPopoverOKButton`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showpopoverokbutton})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`showReset`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showreset})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`showSummaryBar`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsummarybar})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`type`));
    temp114.get().v.set(type);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`confirm`));
    temp114.get().v.set(confirm);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`reset`));
    temp114.get().v.set(reset);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`lists`));
    temp114.get().v.set(lists);
    abap.statements.insertInternal({data: temp114, table: temp113});
    temp114.get().n.set(new abap.types.String().set(`visible`));
    temp114.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp114, table: temp113});
    result.set((await this._generic({name: new abap.types.String().set(`FacetFilter`), t_prop: temp113})));
    return result;
  }
  async facet_filter_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let count = INPUT?.count || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let highlight = INPUT?.highlight || new abap.types.Character();
    let highlighttext = INPUT?.highlighttext || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let navigated = INPUT?.navigated || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let unread = INPUT?.unread || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let detailpress = INPUT?.detailpress || new abap.types.Character();
    let temp115 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp116 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp115);
    temp116.get().n.set(new abap.types.String().set(`id`));
    temp116.get().v.set(id);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`class`));
    temp116.get().v.set($class);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`count`));
    temp116.get().v.set(count);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`counter`));
    temp116.get().v.set(counter);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`highlight`));
    temp116.get().v.set(highlight);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`highlightText`));
    temp116.get().v.set(highlighttext);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`key`));
    temp116.get().v.set(key);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`navigated`));
    temp116.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: navigated})));
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`selected`));
    temp116.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`unread`));
    temp116.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: unread})));
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`text`));
    temp116.get().v.set(text);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`type`));
    temp116.get().v.set(type);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`detailPress`));
    temp116.get().v.set(detailpress);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`press`));
    temp116.get().v.set(press);
    abap.statements.insertInternal({data: temp116, table: temp115});
    temp116.get().n.set(new abap.types.String().set(`visible`));
    temp116.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp116, table: temp115});
    result.set((await this._generic({name: new abap.types.String().set(`FacetFilterItem`), t_prop: temp115})));
    return result;
  }
  async facet_filter_list(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let active = INPUT?.active || new abap.types.Character();
    let allcount = INPUT?.allcount || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let datatype = INPUT?.datatype || new abap.types.Character();
    let enablebusyindicator = INPUT?.enablebusyindicator || new abap.types.Character();
    let enablecaseinsensitivesearch = INPUT?.enablecaseinsensitivesearch || new abap.types.Character();
    let footertext = INPUT?.footertext || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingdirection = INPUT?.growingdirection || new abap.types.Character();
    let growingscrolltoload = INPUT?.growingscrolltoload || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let growingtriggertext = INPUT?.growingtriggertext || new abap.types.Character();
    let headerlevel = INPUT?.headerlevel || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let includeiteminselection = INPUT?.includeiteminselection || new abap.types.Character();
    let inset = INPUT?.inset || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let keyboardmode = INPUT?.keyboardmode || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let modeanimationon = INPUT?.modeanimationon || new abap.types.Character();
    let multiselectmode = INPUT?.multiselectmode || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let rememberselections = INPUT?.rememberselections || new abap.types.Character();
    let retainlistsequence = INPUT?.retainlistsequence || new abap.types.Character();
    let sequence = INPUT?.sequence || new abap.types.Character();
    let shownodata = INPUT?.shownodata || new abap.types.Character();
    let showremovefaceticon = INPUT?.showremovefaceticon || new abap.types.Character();
    let showseparators = INPUT?.showseparators || new abap.types.Character();
    let showunread = INPUT?.showunread || new abap.types.Character();
    let sticky = INPUT?.sticky || new abap.types.Character();
    let swipedirection = INPUT?.swipedirection || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wordwrap = INPUT?.wordwrap || new abap.types.Character();
    let listclose = INPUT?.listclose || new abap.types.Character();
    let listopen = INPUT?.listopen || new abap.types.Character();
    let search = INPUT?.search || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let $delete = INPUT?.delete || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let temp117 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp118 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp117);
    temp118.get().n.set(new abap.types.String().set(`id`));
    temp118.get().v.set(id);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`class`));
    temp118.get().v.set($class);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`active`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`allCount`));
    temp118.get().v.set(allcount);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp118.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`dataType`));
    temp118.get().v.set(datatype);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`enableBusyIndicator`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablebusyindicator})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`enableCaseInsensitiveSearch`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecaseinsensitivesearch})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`footerText`));
    temp118.get().v.set(footertext);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`growing`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`growingDirection`));
    temp118.get().v.set(growingdirection);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`growingScrollToLoad`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growingscrolltoload})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`growingThreshold`));
    temp118.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`growingTriggerText`));
    temp118.get().v.set(growingtriggertext);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`headerLevel`));
    temp118.get().v.set(headerlevel);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`includeItemInSelection`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: includeiteminselection})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`inset`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inset})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`key`));
    temp118.get().v.set(key);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`swipedirection`));
    temp118.get().v.set(swipedirection);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`headerText`));
    temp118.get().v.set(headertext);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`keyboardMode`));
    temp118.get().v.set(keyboardmode);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`mode`));
    temp118.get().v.set(mode);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`modeAnimationOn`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: modeanimationon})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`multiSelectMode`));
    temp118.get().v.set(multiselectmode);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`noDataText`));
    temp118.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`rememberSelections`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rememberselections})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`retainListSequence`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: retainlistsequence})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`sequence`));
    temp118.get().v.set(sequence);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`showNoData`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownodata})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`showRemoveFacetIcon`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showremovefaceticon})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`showSeparators`));
    temp118.get().v.set(showseparators);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`showUnread`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showunread})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`sticky`));
    temp118.get().v.set(sticky);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`title`));
    temp118.get().v.set(title);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`width`));
    temp118.get().v.set(width);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`wordWrap`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wordwrap})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`listClose`));
    temp118.get().v.set(listclose);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`listOpen`));
    temp118.get().v.set(listopen);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`search`));
    temp118.get().v.set(search);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`selectionChange`));
    temp118.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`delete`));
    temp118.get().v.set($delete);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`items`));
    temp118.get().v.set(items);
    abap.statements.insertInternal({data: temp118, table: temp117});
    temp118.get().n.set(new abap.types.String().set(`visible`));
    temp118.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp118, table: temp117});
    result.set((await this._generic({name: new abap.types.String().set(`FacetFilterList`), t_prop: temp117})));
    return result;
  }
  async factory(INPUT) {
    return z2ui5_cl_xml_view.factory(INPUT);
  }
  static async factory(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let t_ns = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    if (INPUT && INPUT.t_ns) {t_ns.set(INPUT.t_ns);}
    let temp119 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":false,"keyFields":["N"]},"secondary":[]}, "");
    let temp120 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp121 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp122 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp123 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(await (new abap.Classes['Z2UI5_CL_XML_VIEW']()).constructor_());
    if (abap.compare.initial(t_ns) === false) {
      result.get().mt_prop.set(t_ns);
    }
    abap.statements.clear(temp119);
    temp119.set(result.get().mt_prop);
    temp120.get().n.set(new abap.types.Character(12).set('displayBlock'));
    temp120.get().v.set(new abap.types.Character(4).set('true'));
    abap.statements.insertInternal({data: temp120, table: temp119});
    temp120.get().n.set(new abap.types.Character(6).set('height'));
    temp120.get().v.set(new abap.types.Character(4).set('100%'));
    abap.statements.insertInternal({data: temp120, table: temp119});
    result.get().mt_prop.set(temp119);
    result.get().mv_name.set(new abap.types.String().set(`View`));
    result.get().mv_ns.set(new abap.types.String().set(`mvc`));
    result.get().mo_root.set(result);
    result.get().mo_parent.set(result);
    abap.statements.clear(temp121);
    temp121.get().n.set(new abap.types.String().set(`xmlns`));
    temp121.get().v.set(new abap.types.String().set(`sap.m`));
    abap.statements.insertInternal({data: temp121, table: result.get().mt_prop});
    abap.statements.clear(temp122);
    temp122.get().n.set(new abap.types.String().set(`xmlns:mvc`));
    temp122.get().v.set(new abap.types.String().set(`sap.ui.core.mvc`));
    abap.statements.insertInternal({data: temp122, table: result.get().mt_prop});
    abap.statements.clear(temp123);
    temp123.get().n.set(new abap.types.String().set(`xmlns:core`));
    temp123.get().v.set(new abap.types.String().set(`sap.ui.core`));
    abap.statements.insertInternal({data: temp123, table: result.get().mt_prop});
    return result;
  }
  async factory_plain() {
    return z2ui5_cl_xml_view.factory_plain();
  }
  static async factory_plain() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(await (new abap.Classes['Z2UI5_CL_XML_VIEW']()).constructor_());
    result.get().mo_root.set(result);
    result.get().mo_parent.set(result);
    return result;
  }
  async factory_popup(INPUT) {
    return z2ui5_cl_xml_view.factory_popup(INPUT);
  }
  static async factory_popup(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let t_ns = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    if (INPUT && INPUT.t_ns) {t_ns.set(INPUT.t_ns);}
    let temp124 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp125 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(await (new abap.Classes['Z2UI5_CL_XML_VIEW']()).constructor_());
    if (abap.compare.initial(t_ns) === false) {
      result.get().mt_prop.set(t_ns);
    }
    result.get().mv_name.set(new abap.types.String().set(`FragmentDefinition`));
    result.get().mv_ns.set(new abap.types.String().set(`core`));
    result.get().mo_root.set(result);
    result.get().mo_parent.set(result);
    abap.statements.clear(temp124);
    temp124.get().n.set(new abap.types.String().set(`xmlns`));
    temp124.get().v.set(new abap.types.String().set(`sap.m`));
    abap.statements.insertInternal({data: temp124, table: result.get().mt_prop});
    abap.statements.clear(temp125);
    temp125.get().n.set(new abap.types.String().set(`xmlns:core`));
    temp125.get().v.set(new abap.types.String().set(`sap.ui.core`));
    abap.statements.insertInternal({data: temp125, table: result.get().mt_prop});
    return result;
  }
  async fb_control() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`control`), ns: new abap.types.String().set(`fb`)})));
    return result;
  }
  async feed_input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let buttontooltip = INPUT?.buttontooltip || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingmaxlines = INPUT?.growingmaxlines || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let icondisplayshape = INPUT?.icondisplayshape || new abap.types.Character();
    let iconinitials = INPUT?.iconinitials || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let maxlength = INPUT?.maxlength || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let rows = INPUT?.rows || new abap.types.Character();
    let showexceededtext = INPUT?.showexceededtext || new abap.types.Character();
    let showicon = INPUT?.showicon || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let post = INPUT?.post || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp126 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp127 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp126);
    temp127.get().n.set(new abap.types.String().set(`buttonTooltip`));
    temp127.get().v.set(buttontooltip);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`enabled`));
    temp127.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`growing`));
    temp127.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`growingMaxLines`));
    temp127.get().v.set(growingmaxlines);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`icon`));
    temp127.get().v.set(icon);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp127.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`iconDisplayShape`));
    temp127.get().v.set(icondisplayshape);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`iconInitials`));
    temp127.get().v.set(iconinitials);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`iconSize`));
    temp127.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`maxLength`));
    temp127.get().v.set(maxlength);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`placeholder`));
    temp127.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`rows`));
    temp127.get().v.set(rows);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`showExceededText`));
    temp127.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showexceededtext})));
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`showIcon`));
    temp127.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicon})));
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`value`));
    temp127.get().v.set(value);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`class`));
    temp127.get().v.set($class);
    abap.statements.insertInternal({data: temp127, table: temp126});
    temp127.get().n.set(new abap.types.String().set(`post`));
    temp127.get().v.set(post);
    abap.statements.insertInternal({data: temp127, table: temp126});
    result.set((await this._generic({name: new abap.types.String().set(`FeedInput`), t_prop: temp126})));
    return result;
  }
  async feed_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let convertedlinksdefaulttarget = INPUT?.convertedlinksdefaulttarget || new abap.types.Character();
    let convertlinkstoanchortags = INPUT?.convertlinkstoanchortags || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let iconactive = INPUT?.iconactive || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let icondisplayshape = INPUT?.icondisplayshape || new abap.types.Character();
    let iconinitials = INPUT?.iconinitials || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let info = INPUT?.info || new abap.types.Character();
    let lesslabel = INPUT?.lesslabel || new abap.types.Character();
    let maxcharacters = INPUT?.maxcharacters || new abap.types.Character();
    let morelabel = INPUT?.morelabel || new abap.types.Character();
    let sender = INPUT?.sender || new abap.types.Character();
    let senderactive = INPUT?.senderactive || new abap.types.Character();
    let showicon = INPUT?.showicon || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let timestamp = INPUT?.timestamp || new abap.types.Character();
    let iconpress = INPUT?.iconpress || new abap.types.Character();
    let senderpress = INPUT?.senderpress || new abap.types.Character();
    let temp128 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp129 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp128);
    temp129.get().n.set(new abap.types.String().set(`activeIcon`));
    temp129.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`convertedLinksDefaultTarget`));
    temp129.get().v.set(convertedlinksdefaulttarget);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`convertLinksToAnchorTags`));
    temp129.get().v.set(convertlinkstoanchortags);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconActive`));
    temp129.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconactive})));
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`icon`));
    temp129.get().v.set(icon);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp129.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconDisplayShape`));
    temp129.get().v.set(icondisplayshape);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconInitials`));
    temp129.get().v.set(iconinitials);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconSize`));
    temp129.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`info`));
    temp129.get().v.set(info);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`lessLabel`));
    temp129.get().v.set(lesslabel);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`maxCharacters`));
    temp129.get().v.set(maxcharacters);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`moreLabel`));
    temp129.get().v.set(morelabel);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`sender`));
    temp129.get().v.set(sender);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`senderActive`));
    temp129.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: senderactive})));
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`showIcon`));
    temp129.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicon})));
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`text`));
    temp129.get().v.set(text);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`senderPress`));
    temp129.get().v.set(senderpress);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`iconPress`));
    temp129.get().v.set(iconpress);
    abap.statements.insertInternal({data: temp129, table: temp128});
    temp129.get().n.set(new abap.types.String().set(`timestamp`));
    temp129.get().v.set(timestamp);
    abap.statements.insertInternal({data: temp129, table: temp128});
    result.set((await this._generic({name: new abap.types.String().set(`FeedListItem`), t_prop: temp128})));
    return result;
  }
  async feed_list_item_action(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let enabled = INPUT?.enabled || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp130 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp131 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp130);
    temp131.get().n.set(new abap.types.String().set(`enabled`));
    temp131.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp131, table: temp130});
    temp131.get().n.set(new abap.types.String().set(`icon`));
    temp131.get().v.set(icon);
    abap.statements.insertInternal({data: temp131, table: temp130});
    temp131.get().n.set(new abap.types.String().set(`key`));
    temp131.get().v.set(key);
    abap.statements.insertInternal({data: temp131, table: temp130});
    temp131.get().n.set(new abap.types.String().set(`text`));
    temp131.get().v.set(text);
    abap.statements.insertInternal({data: temp131, table: temp130});
    temp131.get().n.set(new abap.types.String().set(`press`));
    temp131.get().v.set(press);
    abap.statements.insertInternal({data: temp131, table: temp130});
    temp131.get().n.set(new abap.types.String().set(`visible`));
    temp131.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp131, table: temp130});
    result.set((await this._generic({name: new abap.types.String().set(`FeedListItemAction`), t_prop: temp130})));
    return result;
  }
  async filter_bar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let usetoolbar = INPUT?.usetoolbar || new abap.types.Character();
    if (INPUT === undefined || INPUT.usetoolbar === undefined) {usetoolbar = new abap.types.Character(5).set('false');}
    let search = INPUT?.search || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let persistencykey = INPUT?.persistencykey || new abap.types.Character();
    let aftervariantload = INPUT?.aftervariantload || new abap.types.Character();
    let aftervariantsave = INPUT?.aftervariantsave || new abap.types.Character();
    let assignedfilterschanged = INPUT?.assignedfilterschanged || new abap.types.Character();
    let beforevariantfetch = INPUT?.beforevariantfetch || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let clear = INPUT?.clear || new abap.types.Character();
    let filterchange = INPUT?.filterchange || new abap.types.Character();
    let filtersdialogbeforeopen = INPUT?.filtersdialogbeforeopen || new abap.types.Character();
    let filtersdialogcancel = INPUT?.filtersdialogcancel || new abap.types.Character();
    let filtersdialogclosed = INPUT?.filtersdialogclosed || new abap.types.Character();
    let initialise = INPUT?.initialise || new abap.types.Character();
    let initialized = INPUT?.initialized || new abap.types.Character();
    let reset = INPUT?.reset || new abap.types.Character();
    let filtercontainerwidth = INPUT?.filtercontainerwidth || new abap.types.Character();
    let header = INPUT?.header || new abap.types.Character();
    let advancedmode = INPUT?.advancedmode || new abap.types.Character();
    let isrunninginvaluehelpdialog = INPUT?.isrunninginvaluehelpdialog || new abap.types.Character();
    let showallfilters = INPUT?.showallfilters || new abap.types.Character();
    let showclearonfb = INPUT?.showclearonfb || new abap.types.Character();
    let showfilterconfiguration = INPUT?.showfilterconfiguration || new abap.types.Character();
    let showgoonfb = INPUT?.showgoonfb || new abap.types.Character();
    let showrestorebutton = INPUT?.showrestorebutton || new abap.types.Character();
    let showrestoreonfb = INPUT?.showrestoreonfb || new abap.types.Character();
    let usesnapshot = INPUT?.usesnapshot || new abap.types.Character();
    let searchenabled = INPUT?.searchenabled || new abap.types.Character();
    let considergrouptitle = INPUT?.considergrouptitle || new abap.types.Character();
    let deltavariantmode = INPUT?.deltavariantmode || new abap.types.Character();
    let disablesearchmatchespatternw = INPUT?.disablesearchmatchespatternw || new abap.types.Character();
    let filterbarexpanded = INPUT?.filterbarexpanded || new abap.types.Character();
    let temp132 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp133 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp132);
    temp133.get().n.set(new abap.types.Character(10).set('useToolbar'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usetoolbar})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(6).set('search'));
    temp133.get().v.set(search);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(2).set('id'));
    temp133.get().v.set(id);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(14).set('persistencyKey'));
    temp133.get().v.set(persistencykey);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(16).set('afterVariantLoad'));
    temp133.get().v.set(aftervariantload);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(16).set('afterVariantSave'));
    temp133.get().v.set(aftervariantsave);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(22).set('assignedFiltersChanged'));
    temp133.get().v.set(assignedfilterschanged);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(18).set('beforeVariantFetch'));
    temp133.get().v.set(beforevariantfetch);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(6).set('cancel'));
    temp133.get().v.set(cancel);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(5).set('clear'));
    temp133.get().v.set(clear);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(23).set('filtersDialogBeforeOpen'));
    temp133.get().v.set(filtersdialogbeforeopen);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(19).set('filtersDialogCancel'));
    temp133.get().v.set(filtersdialogcancel);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(19).set('filtersDialogClosed'));
    temp133.get().v.set(filtersdialogclosed);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(10).set('initialise'));
    temp133.get().v.set(initialise);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(11).set('initialized'));
    temp133.get().v.set(initialized);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(5).set('reset'));
    temp133.get().v.set(reset);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(20).set('filterContainerWidth'));
    temp133.get().v.set(filtercontainerwidth);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(6).set('header'));
    temp133.get().v.set(header);
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(12).set('advancedMode'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: advancedmode})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(26).set('isRunningInValueHelpDialog'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isrunninginvaluehelpdialog})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(14).set('showAllFilters'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showallfilters})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(13).set('showClearOnFB'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearonfb})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(23).set('showFilterConfiguration'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfilterconfiguration})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(10).set('showGoOnFB'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgoonfb})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(17).set('showRestoreButton'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showrestorebutton})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(15).set('showRestoreOnFB'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showrestoreonfb})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(11).set('useSnapshot'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usesnapshot})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(13).set('searchEnabled'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: searchenabled})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(18).set('considerGroupTitle'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: considergrouptitle})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(16).set('deltaVariantMode'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: deltavariantmode})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(34).set('disableSearchMatchesPatternWarning'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: disablesearchmatchespatternw})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(17).set('filterBarExpanded'));
    temp133.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: filterbarexpanded})));
    abap.statements.insertInternal({data: temp133, table: temp132});
    temp133.get().n.set(new abap.types.Character(12).set('filterChange'));
    temp133.get().v.set(filterchange);
    abap.statements.insertInternal({data: temp133, table: temp132});
    result.set((await this._generic({name: new abap.types.String().set(`FilterBar`), ns: new abap.types.Character(2).set('fb'), t_prop: temp132})));
    return result;
  }
  async filter_control() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`control`), ns: new abap.types.Character(2).set('fb')})));
    return result;
  }
  async filter_group_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let name = INPUT?.name || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let groupname = INPUT?.groupname || new abap.types.Character();
    let visibleinfilterbar = INPUT?.visibleinfilterbar || new abap.types.Character();
    let mandatory = INPUT?.mandatory || new abap.types.Character();
    let controltooltip = INPUT?.controltooltip || new abap.types.Character();
    let entitysetname = INPUT?.entitysetname || new abap.types.Character();
    let entitytypename = INPUT?.entitytypename || new abap.types.Character();
    let grouptitle = INPUT?.grouptitle || new abap.types.Character();
    let hiddenfilter = INPUT?.hiddenfilter || new abap.types.Character();
    let labeltooltip = INPUT?.labeltooltip || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let temp134 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp135 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp134);
    temp135.get().n.set(new abap.types.Character(4).set('name'));
    temp135.get().v.set(name);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(5).set('label'));
    temp135.get().v.set(label);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(9).set('groupName'));
    temp135.get().v.set(groupname);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(14).set('controlTooltip'));
    temp135.get().v.set(controltooltip);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(13).set('entitySetName'));
    temp135.get().v.set(entitysetname);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(14).set('entityTypeName'));
    temp135.get().v.set(entitytypename);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(10).set('groupTitle'));
    temp135.get().v.set(grouptitle);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(12).set('labelTooltip'));
    temp135.get().v.set(labeltooltip);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(6).set('change'));
    temp135.get().v.set(change);
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(18).set('visibleInFilterBar'));
    temp135.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visibleinfilterbar})));
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(9).set('mandatory'));
    temp135.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: mandatory})));
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(12).set('hiddenFilter'));
    temp135.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hiddenfilter})));
    abap.statements.insertInternal({data: temp135, table: temp134});
    temp135.get().n.set(new abap.types.Character(7).set('visible'));
    temp135.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp135, table: temp134});
    result.set((await this._generic({name: new abap.types.String().set(`FilterGroupItem`), ns: new abap.types.Character(2).set('fb'), t_prop: temp134})));
    return result;
  }
  async filter_group_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`filterGroupItems`), ns: new abap.types.Character(2).set('fb')})));
    return result;
  }
  async filter_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`filterItems`)})));
    return result;
  }
  async first_status() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`firstStatus`)})));
    return result;
  }
  async flexible_column_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let layout = INPUT?.layout;
    let id = INPUT?.id;
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let defaulttransitionnamebegincol = INPUT?.defaulttransitionnamebegincol || new abap.types.Character();
    let defaulttransitionnameendcol = INPUT?.defaulttransitionnameendcol || new abap.types.Character();
    let defaulttransitionnamemidcol = INPUT?.defaulttransitionnamemidcol || new abap.types.Character();
    let autofocus = INPUT?.autofocus || new abap.types.Character();
    let restorefocusonbacknavigation = INPUT?.restorefocusonbacknavigation || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let afterbegincolumnnavigate = INPUT?.afterbegincolumnnavigate || new abap.types.Character();
    let afterendcolumnnavigate = INPUT?.afterendcolumnnavigate || new abap.types.Character();
    let aftermidcolumnnavigate = INPUT?.aftermidcolumnnavigate || new abap.types.Character();
    let begincolumnnavigate = INPUT?.begincolumnnavigate || new abap.types.Character();
    let columnresize = INPUT?.columnresize || new abap.types.Character();
    let endcolumnnavigate = INPUT?.endcolumnnavigate || new abap.types.Character();
    let midcolumnnavigate = INPUT?.midcolumnnavigate || new abap.types.Character();
    let statechange = INPUT?.statechange || new abap.types.Character();
    let temp136 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp137 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp136);
    temp137.get().n.set(new abap.types.String().set(`layout`));
    temp137.get().v.set(layout);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`id`));
    temp137.get().v.set(id);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`class`));
    temp137.get().v.set($class);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`afterBeginColumnNavigate`));
    temp137.get().v.set(afterbegincolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`afterEndColumnNavigate`));
    temp137.get().v.set(afterendcolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`afterMidColumnNavigate`));
    temp137.get().v.set(aftermidcolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`beginColumnNavigate`));
    temp137.get().v.set(begincolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`columnResize`));
    temp137.get().v.set(columnresize);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`endColumnNavigate`));
    temp137.get().v.set(endcolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`midColumnNavigate`));
    temp137.get().v.set(midcolumnnavigate);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`stateChange`));
    temp137.get().v.set(statechange);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp137.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`defaultTransitionNameBeginColumn`));
    temp137.get().v.set(defaulttransitionnamebegincol);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`defaultTransitionNameEndColumn`));
    temp137.get().v.set(defaulttransitionnameendcol);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`defaultTransitionNameMidColumn`));
    temp137.get().v.set(defaulttransitionnamemidcol);
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`autoFocus`));
    temp137.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autofocus})));
    abap.statements.insertInternal({data: temp137, table: temp136});
    temp137.get().n.set(new abap.types.String().set(`restoreFocusOnBackNavigation`));
    temp137.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: restorefocusonbacknavigation})));
    abap.statements.insertInternal({data: temp137, table: temp136});
    result.set((await this._generic({name: new abap.types.String().set(`FlexibleColumnLayout`), ns: new abap.types.String().set(`f`), t_prop: temp136})));
    return result;
  }
  async flex_box(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let fitcontainer = INPUT?.fitcontainer || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let alignitems = INPUT?.alignitems || new abap.types.Character();
    let justifycontent = INPUT?.justifycontent || new abap.types.Character();
    let wrap = INPUT?.wrap || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let direction = INPUT?.direction || new abap.types.Character();
    let displayinline = INPUT?.displayinline || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp138 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp139 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp138);
    temp139.get().n.set(new abap.types.String().set(`class`));
    temp139.get().v.set($class);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`id`));
    temp139.get().v.set(id);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`renderType`));
    temp139.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`width`));
    temp139.get().v.set(width);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`height`));
    temp139.get().v.set(height);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`alignItems`));
    temp139.get().v.set(alignitems);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`fitContainer`));
    temp139.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fitcontainer})));
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`justifyContent`));
    temp139.get().v.set(justifycontent);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`wrap`));
    temp139.get().v.set(wrap);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`items`));
    temp139.get().v.set(items);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`direction`));
    temp139.get().v.set(direction);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`alignContent`));
    temp139.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp139.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`displayInline`));
    temp139.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayinline})));
    abap.statements.insertInternal({data: temp139, table: temp138});
    temp139.get().n.set(new abap.types.String().set(`visible`));
    temp139.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp139, table: temp138});
    result.set((await this._generic({name: new abap.types.String().set(`FlexBox`), t_prop: temp138})));
    return result;
  }
  async flex_item_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let growfactor = INPUT?.growfactor || new abap.types.Character();
    let basesize = INPUT?.basesize || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let styleclass = INPUT?.styleclass || new abap.types.Character();
    let order = INPUT?.order || new abap.types.Character();
    let shrinkfactor = INPUT?.shrinkfactor || new abap.types.Character();
    let temp140 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp141 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp140);
    temp141.get().n.set(new abap.types.String().set(`growFactor`));
    temp141.get().v.set(growfactor);
    abap.statements.insertInternal({data: temp141, table: temp140});
    temp141.get().n.set(new abap.types.String().set(`baseSize`));
    temp141.get().v.set(basesize);
    abap.statements.insertInternal({data: temp141, table: temp140});
    temp141.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp141.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp141, table: temp140});
    temp141.get().n.set(new abap.types.String().set(`styleClass`));
    temp141.get().v.set(styleclass);
    abap.statements.insertInternal({data: temp141, table: temp140});
    temp141.get().n.set(new abap.types.String().set(`order`));
    temp141.get().v.set(order);
    abap.statements.insertInternal({data: temp141, table: temp140});
    temp141.get().n.set(new abap.types.String().set(`shrinkFactor`));
    temp141.get().v.set(shrinkfactor);
    abap.statements.insertInternal({data: temp141, table: temp140});
    await this._generic({name: new abap.types.String().set(`FlexItemData`), t_prop: temp140});
    return result;
  }
  async footer(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = new abap.types.String({qualifiedName: "STRING"});
    if (INPUT && INPUT.ns) {ns.set(INPUT.ns);}
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`footer`)})));
    return result;
  }
  async force_based_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let alpha = INPUT?.alpha || new abap.types.Character();
    let charge = INPUT?.charge || new abap.types.Character();
    let friction = INPUT?.friction || new abap.types.Character();
    let maximumduration = INPUT?.maximumduration || new abap.types.Character();
    let temp142 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp143 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp142);
    temp143.get().n.set(new abap.types.String().set(`id`));
    temp143.get().v.set(id);
    abap.statements.insertInternal({data: temp143, table: temp142});
    temp143.get().n.set(new abap.types.String().set(`class`));
    temp143.get().v.set($class);
    abap.statements.insertInternal({data: temp143, table: temp142});
    temp143.get().n.set(new abap.types.String().set(`alpha`));
    temp143.get().v.set(alpha);
    abap.statements.insertInternal({data: temp143, table: temp142});
    temp143.get().n.set(new abap.types.String().set(`charge`));
    temp143.get().v.set(charge);
    abap.statements.insertInternal({data: temp143, table: temp142});
    temp143.get().n.set(new abap.types.String().set(`friction`));
    temp143.get().v.set(friction);
    abap.statements.insertInternal({data: temp143, table: temp142});
    temp143.get().n.set(new abap.types.String().set(`maximumDuration`));
    temp143.get().v.set(maximumduration);
    abap.statements.insertInternal({data: temp143, table: temp142});
    result.set((await this._generic({name: new abap.types.String().set(`ForceBasedLayout`), ns: new abap.types.String().set(`nglayout`), t_prop: temp142})));
    return result;
  }
  async force_directed_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let cooldownstep = INPUT?.cooldownstep || new abap.types.Character();
    let initialtemperature = INPUT?.initialtemperature || new abap.types.Character();
    let maxiterations = INPUT?.maxiterations || new abap.types.Character();
    let maxtime = INPUT?.maxtime || new abap.types.Character();
    let optimaldistanceconstant = INPUT?.optimaldistanceconstant || new abap.types.Character();
    let staticnodes = INPUT?.staticnodes || new abap.types.Character();
    let temp144 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp145 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp144);
    temp145.get().n.set(new abap.types.String().set(`id`));
    temp145.get().v.set(id);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`class`));
    temp145.get().v.set($class);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`coolDownStep`));
    temp145.get().v.set(cooldownstep);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`initialTemperature`));
    temp145.get().v.set(initialtemperature);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`maxIterations`));
    temp145.get().v.set(maxiterations);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`maxTime`));
    temp145.get().v.set(maxtime);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`optimalDistanceConstant`));
    temp145.get().v.set(optimaldistanceconstant);
    abap.statements.insertInternal({data: temp145, table: temp144});
    temp145.get().n.set(new abap.types.String().set(`staticNodes`));
    temp145.get().v.set(staticnodes);
    abap.statements.insertInternal({data: temp145, table: temp144});
    result.set((await this._generic({name: new abap.types.String().set(`ForceDirectedLayout`), ns: new abap.types.String().set(`nglayout`), t_prop: temp144})));
    return result;
  }
  async formatted_text(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let htmltext = INPUT?.htmltext || new abap.types.Character();
    let convertedlinksdefaulttarget = INPUT?.convertedlinksdefaulttarget || new abap.types.Character();
    let convertlinkstoanchortags = INPUT?.convertlinkstoanchortags || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let controls = INPUT?.controls || new abap.types.Character();
    let temp146 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp147 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp146);
    temp147.get().n.set(new abap.types.String().set(`htmlText`));
    temp147.get().v.set(htmltext);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`convertedLinksDefaultTarget`));
    temp147.get().v.set(convertedlinksdefaulttarget);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`convertLinksToAnchorTags`));
    temp147.get().v.set(convertlinkstoanchortags);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`height`));
    temp147.get().v.set(height);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`textAlign`));
    temp147.get().v.set(textalign);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`textDirection`));
    temp147.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`visible`));
    temp147.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`width`));
    temp147.get().v.set(width);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`class`));
    temp147.get().v.set($class);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`id`));
    temp147.get().v.set(id);
    abap.statements.insertInternal({data: temp147, table: temp146});
    temp147.get().n.set(new abap.types.String().set(`controls`));
    temp147.get().v.set(controls);
    abap.statements.insertInternal({data: temp147, table: temp146});
    await this._generic({name: new abap.types.String().set(`FormattedText`), t_prop: temp146});
    return result;
  }
  async form_toolbar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`toolbar`), ns: new abap.types.String().set(`form`)})));
    return result;
  }
  async gantt_chart_container() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`GanttChartContainer`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async gantt_chart_with_table(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let shapeselectionmode = INPUT?.shapeselectionmode || new abap.types.Character();
    let isconnectordetailsvisible = INPUT?.isconnectordetailsvisible || new abap.types.Character();
    let temp148 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp149 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp148);
    temp149.get().n.set(new abap.types.String().set(`id`));
    temp149.get().v.set(id);
    abap.statements.insertInternal({data: temp149, table: temp148});
    temp149.get().n.set(new abap.types.String().set(`shapeSelectionMode`));
    temp149.get().v.set(shapeselectionmode);
    abap.statements.insertInternal({data: temp149, table: temp148});
    temp149.get().n.set(new abap.types.String().set(`isConnectorDetailsVisible`));
    temp149.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isconnectordetailsvisible})));
    abap.statements.insertInternal({data: temp149, table: temp148});
    result.set((await this._generic({name: new abap.types.String().set(`GanttChartWithTable`), ns: new abap.types.String().set(`gantt`), t_prop: temp148})));
    return result;
  }
  async gantt_row_settings(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let rowid = INPUT?.rowid || new abap.types.Character();
    let shapes1 = INPUT?.shapes1 || new abap.types.Character();
    let relationships = INPUT?.relationships || new abap.types.Character();
    let shapes2 = INPUT?.shapes2 || new abap.types.Character();
    let temp150 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp151 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp150);
    temp151.get().n.set(new abap.types.String().set(`rowId`));
    temp151.get().v.set(rowid);
    abap.statements.insertInternal({data: temp151, table: temp150});
    temp151.get().n.set(new abap.types.String().set(`shapes1`));
    temp151.get().v.set(shapes1);
    abap.statements.insertInternal({data: temp151, table: temp150});
    temp151.get().n.set(new abap.types.String().set(`shapes2`));
    temp151.get().v.set(shapes2);
    abap.statements.insertInternal({data: temp151, table: temp150});
    temp151.get().n.set(new abap.types.String().set(`relationships`));
    temp151.get().v.set(relationships);
    abap.statements.insertInternal({data: temp151, table: temp150});
    result.set((await this._generic({name: new abap.types.String().set(`GanttRowSettings`), ns: new abap.types.String().set(`gantt`), t_prop: temp150})));
    return result;
  }
  async gantt_table() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`table`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async gantt_toolbar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`toolbar`), ns: new abap.types.Character(5).set('gantt')})));
    return result;
  }
  async generic_tag(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let arialabelledby = INPUT?.arialabelledby || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let status = INPUT?.status || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let temp152 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp153 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp152);
    temp153.get().n.set(new abap.types.String().set(`ariaLabelledBy`));
    temp153.get().v.set(arialabelledby);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`class`));
    temp153.get().v.set($class);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`design`));
    temp153.get().v.set(design);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`status`));
    temp153.get().v.set(status);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`id`));
    temp153.get().v.set(id);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`press`));
    temp153.get().v.set(press);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`text`));
    temp153.get().v.set(text);
    abap.statements.insertInternal({data: temp153, table: temp152});
    temp153.get().n.set(new abap.types.String().set(`valueState`));
    temp153.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp153, table: temp152});
    result.set((await this._generic({name: new abap.types.String().set(`GenericTag`), t_prop: temp152})));
    return result;
  }
  async generic_tile(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let header = INPUT?.header || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let additionaltooltip = INPUT?.additionaltooltip || new abap.types.Character();
    let appshortcut = INPUT?.appshortcut || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let backgroundimage = INPUT?.backgroundimage || new abap.types.Character();
    let dropareaoffset = INPUT?.dropareaoffset || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let frametype = INPUT?.frametype || new abap.types.Character();
    let failedtext = INPUT?.failedtext || new abap.types.Character();
    let headerimage = INPUT?.headerimage || new abap.types.Character();
    let scope = INPUT?.scope || new abap.types.Character();
    let sizebehavior = INPUT?.sizebehavior || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let systeminfo = INPUT?.systeminfo || new abap.types.Character();
    let tilebadge = INPUT?.tilebadge || new abap.types.Character();
    let tileicon = INPUT?.tileicon || new abap.types.Character();
    let url = INPUT?.url || new abap.types.Character();
    let valuecolor = INPUT?.valuecolor || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let imagedescription = INPUT?.imagedescription || new abap.types.Character();
    let navigationbuttontext = INPUT?.navigationbuttontext || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let renderonthemechange = INPUT?.renderonthemechange || new abap.types.Character();
    let enablenavigationbutton = INPUT?.enablenavigationbutton || new abap.types.Character();
    let pressenabled = INPUT?.pressenabled || new abap.types.Character();
    let iconloaded = INPUT?.iconloaded || new abap.types.Character();
    let subheader = INPUT?.subheader || new abap.types.Character();
    let temp154 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp155 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp154);
    temp155.get().n.set(new abap.types.String().set(`class`));
    temp155.get().v.set($class);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`id`));
    temp155.get().v.set(id);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`header`));
    temp155.get().v.set(header);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`mode`));
    temp155.get().v.set(mode);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`additionalTooltip`));
    temp155.get().v.set(additionaltooltip);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`appShortcut`));
    temp155.get().v.set(appshortcut);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp155.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`backgroundImage`));
    temp155.get().v.set(backgroundimage);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`dropAreaOffset`));
    temp155.get().v.set(dropareaoffset);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`press`));
    temp155.get().v.set(press);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`frameType`));
    temp155.get().v.set(frametype);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`failedText`));
    temp155.get().v.set(failedtext);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`headerImage`));
    temp155.get().v.set(headerimage);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`scope`));
    temp155.get().v.set(scope);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`sizeBehavior`));
    temp155.get().v.set(sizebehavior);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`state`));
    temp155.get().v.set(state);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`systemInfo`));
    temp155.get().v.set(systeminfo);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`tileBadge`));
    temp155.get().v.set(tilebadge);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`tileIcon`));
    temp155.get().v.set(tileicon);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`url`));
    temp155.get().v.set(url);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`valueColor`));
    temp155.get().v.set(valuecolor);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`width`));
    temp155.get().v.set(width);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`wrappingType`));
    temp155.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`imageDescription`));
    temp155.get().v.set(imagedescription);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`navigationButtonText`));
    temp155.get().v.set(navigationbuttontext);
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`visible`));
    temp155.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`renderOnThemeChange`));
    temp155.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: renderonthemechange})));
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`enableNavigationButton`));
    temp155.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablenavigationbutton})));
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`pressEnabled`));
    temp155.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: pressenabled})));
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`iconLoaded`));
    temp155.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconloaded})));
    abap.statements.insertInternal({data: temp155, table: temp154});
    temp155.get().n.set(new abap.types.String().set(`subheader`));
    temp155.get().v.set(subheader);
    abap.statements.insertInternal({data: temp155, table: temp154});
    result.set((await this._generic({name: new abap.types.String().set(`GenericTile`), ns: new abap.types.String().set(``), t_prop: temp154})));
    return result;
  }
  async get(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let name = new abap.types.String({qualifiedName: "STRING"});
    if (INPUT && INPUT.name) {name.set(INPUT.name);}
    if (abap.compare.initial(name)) {
      result.set(this.mo_root.get().mo_previous);
      return result;
    }
    if (abap.compare.eq(this.mo_parent.get().mv_name, name)) {
      result.set(this.mo_parent);
    } else {
      result.set((await this.mo_parent.get().get({name: name})));
    }
    return result;
  }
  async get_child(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let index = new abap.types.Integer({qualifiedName: "I"});
    if (INPUT && INPUT.index) {index.set(INPUT.index);}
    if (INPUT === undefined || INPUT.index === undefined) {index = abap.IntegerFactory.get(1);}
    let temp156 = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let temp157 = new abap.types.Integer({qualifiedName: "I"});
    temp157.set(abap.builtin.sy.get().tabix);
    abap.statements.readTable(this.mt_child,{index: index,
      into: temp156});
    abap.builtin.sy.get().tabix.set(temp157);
    if (abap.compare.ne(abap.builtin.sy.get().subrc, abap.IntegerFactory.get(0))) {
      abap.statements.assert(abap.compare.eq(abap.IntegerFactory.get(1), abap.IntegerFactory.get(0)));
    }
    result.set(temp156);
    return result;
  }
  async get_parent() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(this.mo_parent);
    return result;
  }
  async get_root() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(this.mo_root);
    return result;
  }
  async grid(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let default_span = INPUT?.default_span || new abap.types.Character();
    let containerquery = INPUT?.containerquery || new abap.types.Character();
    let hspacing = INPUT?.hspacing || new abap.types.Character();
    let vspacing = INPUT?.vspacing || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp158 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp159 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp158);
    temp159.get().n.set(new abap.types.String().set(`defaultSpan`));
    temp159.get().v.set(default_span);
    abap.statements.insertInternal({data: temp159, table: temp158});
    temp159.get().n.set(new abap.types.String().set(`class`));
    temp159.get().v.set($class);
    abap.statements.insertInternal({data: temp159, table: temp158});
    temp159.get().n.set(new abap.types.String().set(`containerQuery`));
    temp159.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: containerquery})));
    abap.statements.insertInternal({data: temp159, table: temp158});
    temp159.get().n.set(new abap.types.String().set(`hSpacing`));
    temp159.get().v.set(hspacing);
    abap.statements.insertInternal({data: temp159, table: temp158});
    temp159.get().n.set(new abap.types.String().set(`vSpacing`));
    temp159.get().v.set(vspacing);
    abap.statements.insertInternal({data: temp159, table: temp158});
    temp159.get().n.set(new abap.types.String().set(`width`));
    temp159.get().v.set(width);
    abap.statements.insertInternal({data: temp159, table: temp158});
    result.set((await this._generic({name: new abap.types.String().set(`Grid`), ns: new abap.types.String().set(`layout`), t_prop: temp158})));
    return result;
  }
  async grid_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let span = INPUT?.span || new abap.types.Character();
    let linebreak = INPUT?.linebreak || new abap.types.Character();
    let indentl = INPUT?.indentl || new abap.types.Character();
    let indentm = INPUT?.indentm || new abap.types.Character();
    let temp160 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp161 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp160);
    temp161.get().n.set(new abap.types.String().set(`span`));
    temp161.get().v.set(span);
    abap.statements.insertInternal({data: temp161, table: temp160});
    temp161.get().n.set(new abap.types.String().set(`linebreak`));
    temp161.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: linebreak})));
    abap.statements.insertInternal({data: temp161, table: temp160});
    temp161.get().n.set(new abap.types.String().set(`indentL`));
    temp161.get().v.set(indentl);
    abap.statements.insertInternal({data: temp161, table: temp160});
    temp161.get().n.set(new abap.types.String().set(`indentM`));
    temp161.get().v.set(indentm);
    abap.statements.insertInternal({data: temp161, table: temp160});
    await this._generic({name: new abap.types.String().set(`GridData`), ns: new abap.types.String().set(`layout`), t_prop: temp160});
    return result;
  }
  async group(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let collapsed = INPUT?.collapsed || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let headercheckboxstate = INPUT?.headercheckboxstate || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let minwidth = INPUT?.minwidth || new abap.types.Character();
    let parentgroupkey = INPUT?.parentgroupkey || new abap.types.Character();
    let status = INPUT?.status || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let collapseexpand = INPUT?.collapseexpand || new abap.types.Character();
    let headercheckboxpress = INPUT?.headercheckboxpress || new abap.types.Character();
    let showdetail = INPUT?.showdetail || new abap.types.Character();
    let temp162 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp163 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp162);
    temp163.get().n.set(new abap.types.String().set(`collapsed`));
    temp163.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: collapsed})));
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`id`));
    temp163.get().v.set(id);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`class`));
    temp163.get().v.set($class);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`description`));
    temp163.get().v.set(description);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`headerCheckBoxState`));
    temp163.get().v.set(headercheckboxstate);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`icon`));
    temp163.get().v.set(icon);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`key`));
    temp163.get().v.set(key);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`minWidth`));
    temp163.get().v.set(minwidth);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`parentGroupKey`));
    temp163.get().v.set(parentgroupkey);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`status`));
    temp163.get().v.set(status);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`title`));
    temp163.get().v.set(title);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`collapseExpand`));
    temp163.get().v.set(collapseexpand);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`showDetail`));
    temp163.get().v.set(showdetail);
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`visible`));
    temp163.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp163, table: temp162});
    temp163.get().n.set(new abap.types.String().set(`headerCheckBoxPress`));
    temp163.get().v.set(headercheckboxpress);
    abap.statements.insertInternal({data: temp163, table: temp162});
    result.set((await this._generic({name: new abap.types.String().set(`group`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp162})));
    return result;
  }
  async groups(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let temp164 = new abap.types.String({qualifiedName: "STRING"});
    let unique180 = ns;
    if (abap.compare.eq(unique180, new abap.types.String().set(``))) {
      temp164.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp164.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`groups`), ns: temp164})));
    return result;
  }
  async group_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`groupItems`)})));
    return result;
  }
  async harvey_ball_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let colorpalette = INPUT?.colorpalette || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let total = INPUT?.total || new abap.types.Character();
    let totallabel = INPUT?.totallabel || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let formattedlabel = INPUT?.formattedlabel || new abap.types.Character();
    let showfractions = INPUT?.showfractions || new abap.types.Character();
    let showtotal = INPUT?.showtotal || new abap.types.Character();
    let totalscale = INPUT?.totalscale || new abap.types.Character();
    let temp165 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp166 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp165);
    temp166.get().n.set(new abap.types.String().set(`colorPalette`));
    temp166.get().v.set(colorpalette);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`press`));
    temp166.get().v.set(press);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`size`));
    temp166.get().v.set(size);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`height`));
    temp166.get().v.set(height);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`width`));
    temp166.get().v.set(width);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`total`));
    temp166.get().v.set(total);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`totalLabel`));
    temp166.get().v.set(totallabel);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`alignContent`));
    temp166.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp166.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`formattedLabel`));
    temp166.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: formattedlabel})));
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`showFractions`));
    temp166.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfractions})));
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`showTotal`));
    temp166.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtotal})));
    abap.statements.insertInternal({data: temp166, table: temp165});
    temp166.get().n.set(new abap.types.String().set(`totalScale`));
    temp166.get().v.set(totalscale);
    abap.statements.insertInternal({data: temp166, table: temp165});
    await this._generic({name: new abap.types.String().set(`HarveyBallMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp165});
    return result;
  }
  async hbox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let justifycontent = INPUT?.justifycontent || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let alignitems = INPUT?.alignitems || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let wrap = INPUT?.wrap || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let direction = INPUT?.direction || new abap.types.Character();
    let displayinline = INPUT?.displayinline || new abap.types.Character();
    let fitcontainer = INPUT?.fitcontainer || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp167 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp168 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp167);
    temp168.get().n.set(new abap.types.String().set(`class`));
    temp168.get().v.set($class);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`alignContent`));
    temp168.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`alignItems`));
    temp168.get().v.set(alignitems);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`width`));
    temp168.get().v.set(width);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`id`));
    temp168.get().v.set(id);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`renderType`));
    temp168.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`height`));
    temp168.get().v.set(height);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`wrap`));
    temp168.get().v.set(wrap);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp168.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`direction`));
    temp168.get().v.set(direction);
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`displayInline`));
    temp168.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayinline})));
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`fitContainer`));
    temp168.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fitcontainer})));
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`visible`));
    temp168.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp168, table: temp167});
    temp168.get().n.set(new abap.types.String().set(`justifyContent`));
    temp168.get().v.set(justifycontent);
    abap.statements.insertInternal({data: temp168, table: temp167});
    result.set((await this._generic({name: new abap.types.String().set(`HBox`), t_prop: temp167})));
    return result;
  }
  async header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    if (INPUT === undefined || INPUT.ns === undefined) {ns = new abap.types.String().set(`f`);}
    result.set((await this._generic({name: new abap.types.String().set(`header`), ns: ns})));
    return result;
  }
  async header_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let scrollstep = INPUT?.scrollstep || new abap.types.Character();
    let scrolltime = INPUT?.scrolltime || new abap.types.Character();
    let orientation = INPUT?.orientation || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let temp169 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp170 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp169);
    temp170.get().n.set(new abap.types.String().set(`scrollStep`));
    temp170.get().v.set(scrollstep);
    abap.statements.insertInternal({data: temp170, table: temp169});
    temp170.get().n.set(new abap.types.String().set(`scrollTime`));
    temp170.get().v.set(scrolltime);
    abap.statements.insertInternal({data: temp170, table: temp169});
    temp170.get().n.set(new abap.types.String().set(`orientation`));
    temp170.get().v.set(orientation);
    abap.statements.insertInternal({data: temp170, table: temp169});
    temp170.get().n.set(new abap.types.String().set(`height`));
    temp170.get().v.set(height);
    abap.statements.insertInternal({data: temp170, table: temp169});
    result.set((await this._generic({name: new abap.types.String().set(`HeaderContainer`), t_prop: temp169})));
    return result;
  }
  async header_container_control(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let gridlayout = INPUT?.gridlayout || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let orientation = INPUT?.orientation || new abap.types.Character();
    let scrollstep = INPUT?.scrollstep || new abap.types.Character();
    let scrollstepbyitem = INPUT?.scrollstepbyitem || new abap.types.Character();
    let scrolltime = INPUT?.scrolltime || new abap.types.Character();
    let showdividers = INPUT?.showdividers || new abap.types.Character();
    let showoverflowitem = INPUT?.showoverflowitem || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let scroll = INPUT?.scroll || new abap.types.Character();
    let snaptorow = INPUT?.snaptorow || new abap.types.Character();
    let temp171 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp172 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp171);
    temp172.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp172.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`gridLayout`));
    temp172.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: gridlayout})));
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`height`));
    temp172.get().v.set(height);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`orientation`));
    temp172.get().v.set(orientation);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`scrollStep`));
    temp172.get().v.set(scrollstep);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`scrollStepByItem`));
    temp172.get().v.set(scrollstepbyitem);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`scrollTime`));
    temp172.get().v.set(scrolltime);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`showDividers`));
    temp172.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showdividers})));
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`showOverflowItem`));
    temp172.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showoverflowitem})));
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`visible`));
    temp172.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`snapToRow `));
    temp172.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: snaptorow})));
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`width`));
    temp172.get().v.set(width);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`id`));
    temp172.get().v.set(id);
    abap.statements.insertInternal({data: temp172, table: temp171});
    temp172.get().n.set(new abap.types.String().set(`scroll`));
    temp172.get().v.set(scroll);
    abap.statements.insertInternal({data: temp172, table: temp171});
    result.set((await this._generic({name: new abap.types.String().set(`HeaderContainer`), t_prop: temp171})));
    return result;
  }
  async header_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`headerContent`), ns: ns})));
    return result;
  }
  async header_title() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`headerTitle`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async header_toolbar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`headerToolbar`)})));
    return result;
  }
  async heading(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns;
    result.set(this.me);
    result.set((await this._generic({name: new abap.types.String().set(`heading`), ns: ns})));
    return result;
  }
  async horizontal_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let allowwrapping = INPUT?.allowwrapping || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp173 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp174 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp173);
    temp174.get().n.set(new abap.types.String().set(`class`));
    temp174.get().v.set($class);
    abap.statements.insertInternal({data: temp174, table: temp173});
    temp174.get().n.set(new abap.types.String().set(`allowWrapping`));
    temp174.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: allowwrapping})));
    abap.statements.insertInternal({data: temp174, table: temp173});
    temp174.get().n.set(new abap.types.String().set(`id`));
    temp174.get().v.set(id);
    abap.statements.insertInternal({data: temp174, table: temp173});
    temp174.get().n.set(new abap.types.String().set(`visible`));
    temp174.get().v.set(visible);
    abap.statements.insertInternal({data: temp174, table: temp173});
    result.set((await this._generic({name: new abap.types.String().set(`HorizontalLayout`), ns: new abap.types.String().set(`layout`), t_prop: temp173})));
    return result;
  }
  async html(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let content = INPUT?.content || new abap.types.Character();
    let afterrendering = INPUT?.afterrendering || new abap.types.Character();
    let preferdom = INPUT?.preferdom || new abap.types.Character();
    let sanitizecontent = INPUT?.sanitizecontent || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp175 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp176 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp175);
    temp176.get().n.set(new abap.types.Character(2).set('id'));
    temp176.get().v.set(id);
    abap.statements.insertInternal({data: temp176, table: temp175});
    temp176.get().n.set(new abap.types.Character(7).set('content'));
    temp176.get().v.set(content);
    abap.statements.insertInternal({data: temp176, table: temp175});
    temp176.get().n.set(new abap.types.Character(14).set('afterRendering'));
    temp176.get().v.set(afterrendering);
    abap.statements.insertInternal({data: temp176, table: temp175});
    temp176.get().n.set(new abap.types.Character(9).set('preferDOM'));
    temp176.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: preferdom})));
    abap.statements.insertInternal({data: temp176, table: temp175});
    temp176.get().n.set(new abap.types.Character(15).set('sanitizeContent'));
    temp176.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sanitizecontent})));
    abap.statements.insertInternal({data: temp176, table: temp175});
    temp176.get().n.set(new abap.types.Character(7).set('visible'));
    temp176.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp176, table: temp175});
    result.set((await this._generic({name: new abap.types.String().set(`HTML`), ns: new abap.types.String().set(`core`), t_prop: temp175})));
    return result;
  }
  async html_area(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let shape = INPUT?.shape || new abap.types.Character();
    let coords = INPUT?.coords || new abap.types.Character();
    let alt = INPUT?.alt || new abap.types.Character();
    let target = INPUT?.target || new abap.types.Character();
    let href = INPUT?.href || new abap.types.Character();
    let onclick = INPUT?.onclick || new abap.types.Character();
    let temp177 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp178 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp177);
    temp178.get().n.set(new abap.types.String().set(`id`));
    temp178.get().v.set(id);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`shape`));
    temp178.get().v.set(shape);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`coords`));
    temp178.get().v.set(coords);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`alt`));
    temp178.get().v.set(alt);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`target`));
    temp178.get().v.set(target);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`href`));
    temp178.get().v.set(href);
    abap.statements.insertInternal({data: temp178, table: temp177});
    temp178.get().n.set(new abap.types.String().set(`onclick`));
    temp178.get().v.set(onclick);
    abap.statements.insertInternal({data: temp178, table: temp177});
    result.set((await this._generic({name: new abap.types.String().set(`area`), ns: new abap.types.Character(4).set('html'), t_prop: temp177})));
    return result;
  }
  async html_canvas(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let style = INPUT?.style || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp179 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp180 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp179);
    temp180.get().n.set(new abap.types.String().set(`id`));
    temp180.get().v.set(id);
    abap.statements.insertInternal({data: temp180, table: temp179});
    temp180.get().n.set(new abap.types.String().set(`class`));
    temp180.get().v.set($class);
    abap.statements.insertInternal({data: temp180, table: temp179});
    temp180.get().n.set(new abap.types.String().set(`width`));
    temp180.get().v.set(width);
    abap.statements.insertInternal({data: temp180, table: temp179});
    temp180.get().n.set(new abap.types.String().set(`height`));
    temp180.get().v.set(height);
    abap.statements.insertInternal({data: temp180, table: temp179});
    temp180.get().n.set(new abap.types.String().set(`style`));
    temp180.get().v.set(style);
    abap.statements.insertInternal({data: temp180, table: temp179});
    result.set((await this._generic({name: new abap.types.String().set(`canvas`), ns: new abap.types.String().set(`html`), t_prop: temp179})));
    return result;
  }
  async html_map(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let temp181 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp182 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp181);
    temp182.get().n.set(new abap.types.String().set(`id`));
    temp182.get().v.set(id);
    abap.statements.insertInternal({data: temp182, table: temp181});
    temp182.get().n.set(new abap.types.String().set(`class`));
    temp182.get().v.set($class);
    abap.statements.insertInternal({data: temp182, table: temp181});
    temp182.get().n.set(new abap.types.String().set(`name`));
    temp182.get().v.set(name);
    abap.statements.insertInternal({data: temp182, table: temp181});
    result.set((await this._generic({name: new abap.types.String().set(`map`), ns: new abap.types.Character(4).set('html'), t_prop: temp181})));
    return result;
  }
  async icon(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let src = INPUT?.src || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let useicontooltip = INPUT?.useicontooltip || new abap.types.Character();
    let notabstop = INPUT?.notabstop || new abap.types.Character();
    let hovercolor = INPUT?.hovercolor || new abap.types.Character();
    let hoverbackgroundcolor = INPUT?.hoverbackgroundcolor || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let decorative = INPUT?.decorative || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let alt = INPUT?.alt || new abap.types.Character();
    let activecolor = INPUT?.activecolor || new abap.types.Character();
    let activebackgroundcolor = INPUT?.activebackgroundcolor || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp183 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp184 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp183);
    temp184.get().n.set(new abap.types.String().set(`size`));
    temp184.get().v.set(size);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`color`));
    temp184.get().v.set(color);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`class`));
    temp184.get().v.set($class);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`src`));
    temp184.get().v.set(src);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`activeColor`));
    temp184.get().v.set(activecolor);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`activeBackgroundColor`));
    temp184.get().v.set(activebackgroundcolor);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`alt`));
    temp184.get().v.set(alt);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp184.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`height`));
    temp184.get().v.set(height);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`width`));
    temp184.get().v.set(width);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`id`));
    temp184.get().v.set(id);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`press`));
    temp184.get().v.set(press);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`hoverBackgroundColor`));
    temp184.get().v.set(hoverbackgroundcolor);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`hoverColor`));
    temp184.get().v.set(hovercolor);
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`visible`));
    temp184.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`decorative`));
    temp184.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: decorative})));
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`noTabStop`));
    temp184.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: notabstop})));
    abap.statements.insertInternal({data: temp184, table: temp183});
    temp184.get().n.set(new abap.types.String().set(`useIconTooltip`));
    temp184.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: useicontooltip})));
    abap.statements.insertInternal({data: temp184, table: temp183});
    await this._generic({name: new abap.types.String().set(`Icon`), ns: new abap.types.String().set(`core`), t_prop: temp183});
    return result;
  }
  async icon_tab_bar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let expand = INPUT?.expand || new abap.types.Character();
    let expandable = INPUT?.expandable || new abap.types.Character();
    let expanded = INPUT?.expanded || new abap.types.Character();
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let uppercase = INPUT?.uppercase || new abap.types.Character();
    let tabsoverflowmode = INPUT?.tabsoverflowmode || new abap.types.Character();
    let tabdensitymode = INPUT?.tabdensitymode || new abap.types.Character();
    let stretchcontentheight = INPUT?.stretchcontentheight || new abap.types.Character();
    let maxnestinglevel = INPUT?.maxnestinglevel || new abap.types.Character();
    let headermode = INPUT?.headermode || new abap.types.Character();
    let headerbackgrounddesign = INPUT?.headerbackgrounddesign || new abap.types.Character();
    let enabletabreordering = INPUT?.enabletabreordering || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let applycontentpadding = INPUT?.applycontentpadding || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let content = INPUT?.content || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp185 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp186 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp185);
    temp186.get().n.set(new abap.types.String().set(`class`));
    temp186.get().v.set($class);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`select`));
    temp186.get().v.set(select);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`expand`));
    temp186.get().v.set(expand);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`expandable`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expandable})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`expanded`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expanded})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`applyContentPadding`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: applycontentpadding})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp186.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`enableTabReordering`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabletabreordering})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`headerBackgroundDesign`));
    temp186.get().v.set(headerbackgrounddesign);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`stretchContentHeight`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: stretchcontentheight})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`headerMode`));
    temp186.get().v.set(headermode);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`maxNestingLevel`));
    temp186.get().v.set(maxnestinglevel);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`tabDensityMode`));
    temp186.get().v.set(tabdensitymode);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`tabsOverflowMode`));
    temp186.get().v.set(tabsoverflowmode);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`items`));
    temp186.get().v.set(items);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`id`));
    temp186.get().v.set(id);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`content`));
    temp186.get().v.set(content);
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`upperCase`));
    temp186.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: uppercase})));
    abap.statements.insertInternal({data: temp186, table: temp185});
    temp186.get().n.set(new abap.types.String().set(`selectedKey`));
    temp186.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp186, table: temp185});
    result.set((await this._generic({name: new abap.types.String().set(`IconTabBar`), t_prop: temp185})));
    return result;
  }
  async icon_tab_filter(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let items = INPUT?.items || new abap.types.Character();
    let showall = INPUT?.showall || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let iconcolor = INPUT?.iconcolor || new abap.types.Character();
    let count = INPUT?.count || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp187 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp188 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp187);
    temp188.get().n.set(new abap.types.String().set(`icon`));
    temp188.get().v.set(icon);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`items`));
    temp188.get().v.set(items);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`design`));
    temp188.get().v.set(design);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`iconColor`));
    temp188.get().v.set(iconcolor);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`showAll`));
    temp188.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showall})));
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp188.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`visible`));
    temp188.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`count`));
    temp188.get().v.set(count);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`text`));
    temp188.get().v.set(text);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`id`));
    temp188.get().v.set(id);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`textDirection`));
    temp188.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`class`));
    temp188.get().v.set($class);
    abap.statements.insertInternal({data: temp188, table: temp187});
    temp188.get().n.set(new abap.types.String().set(`key`));
    temp188.get().v.set(key);
    abap.statements.insertInternal({data: temp188, table: temp187});
    result.set((await this._generic({name: new abap.types.String().set(`IconTabFilter`), t_prop: temp187})));
    return result;
  }
  async icon_tab_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let ariatexts = INPUT?.ariatexts || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let enabletabreordering = INPUT?.enabletabreordering || new abap.types.Character();
    let maxnestinglevel = INPUT?.maxnestinglevel || new abap.types.Character();
    let tabdensitymode = INPUT?.tabdensitymode || new abap.types.Character();
    let tabsoverflowmode = INPUT?.tabsoverflowmode || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp189 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp190 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp189);
    temp190.get().n.set(new abap.types.String().set(`selectedKey`));
    temp190.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`items`));
    temp190.get().v.set(items);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`select`));
    temp190.get().v.set(select);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`ariaTexts`));
    temp190.get().v.set(ariatexts);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp190.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`enableTabReordering`));
    temp190.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabletabreordering})));
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`maxNestingLevel`));
    temp190.get().v.set(maxnestinglevel);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`tabDensityMode`));
    temp190.get().v.set(tabdensitymode);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`tabsOverflowMode`));
    temp190.get().v.set(tabsoverflowmode);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`id`));
    temp190.get().v.set(id);
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`visible`));
    temp190.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp190, table: temp189});
    temp190.get().n.set(new abap.types.String().set(`mode`));
    temp190.get().v.set(mode);
    abap.statements.insertInternal({data: temp190, table: temp189});
    result.set((await this._generic({name: new abap.types.String().set(`IconTabHeader`), t_prop: temp189})));
    return result;
  }
  async icon_tab_separator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let icon = INPUT?.icon || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp191 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp192 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp191);
    temp192.get().n.set(new abap.types.String().set(`icon`));
    temp192.get().v.set(icon);
    abap.statements.insertInternal({data: temp192, table: temp191});
    temp192.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp192.get().v.set(icondensityaware);
    abap.statements.insertInternal({data: temp192, table: temp191});
    temp192.get().n.set(new abap.types.String().set(`id`));
    temp192.get().v.set(id);
    abap.statements.insertInternal({data: temp192, table: temp191});
    temp192.get().n.set(new abap.types.String().set(`class`));
    temp192.get().v.set($class);
    abap.statements.insertInternal({data: temp192, table: temp191});
    temp192.get().n.set(new abap.types.String().set(`visible`));
    temp192.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp192, table: temp191});
    result.set((await this._generic({name: new abap.types.String().set(`IconTabSeparator`), t_prop: temp191})));
    return result;
  }
  async illustrated_message(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let enableverticalresponsiveness = INPUT?.enableverticalresponsiveness || new abap.types.Character();
    let enableformattedtext = INPUT?.enableformattedtext || new abap.types.Character();
    let illustrationtype = INPUT?.illustrationtype || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let illustrationsize = INPUT?.illustrationsize || new abap.types.Character();
    let temp193 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp194 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp193);
    temp194.get().n.set(new abap.types.String().set(`enableVerticalResponsiveness`));
    temp194.get().v.set(enableverticalresponsiveness);
    abap.statements.insertInternal({data: temp194, table: temp193});
    temp194.get().n.set(new abap.types.String().set(`illustrationType`));
    temp194.get().v.set(illustrationtype);
    abap.statements.insertInternal({data: temp194, table: temp193});
    temp194.get().n.set(new abap.types.String().set(`enableFormattedText`));
    temp194.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableformattedtext})));
    abap.statements.insertInternal({data: temp194, table: temp193});
    temp194.get().n.set(new abap.types.String().set(`illustrationSize`));
    temp194.get().v.set(illustrationsize);
    abap.statements.insertInternal({data: temp194, table: temp193});
    temp194.get().n.set(new abap.types.String().set(`description`));
    temp194.get().v.set(description);
    abap.statements.insertInternal({data: temp194, table: temp193});
    temp194.get().n.set(new abap.types.String().set(`title`));
    temp194.get().v.set(title);
    abap.statements.insertInternal({data: temp194, table: temp193});
    result.set((await this._generic({name: new abap.types.String().set(`IllustratedMessage`), t_prop: temp193})));
    return result;
  }
  async image(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let src = INPUT?.src || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let usemap = INPUT?.usemap || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let lazyloading = INPUT?.lazyloading || new abap.types.Character();
    let densityaware = INPUT?.densityaware || new abap.types.Character();
    let decorative = INPUT?.decorative || new abap.types.Character();
    let backgroundsize = INPUT?.backgroundsize || new abap.types.Character();
    let backgroundrepeat = INPUT?.backgroundrepeat || new abap.types.Character();
    let backgroundposition = INPUT?.backgroundposition || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let alt = INPUT?.alt || new abap.types.Character();
    let activesrc = INPUT?.activesrc || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let load = INPUT?.load || new abap.types.Character();
    let error = INPUT?.error || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp195 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp196 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp195);
    temp196.get().n.set(new abap.types.String().set(`id`));
    temp196.get().v.set(id);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`src`));
    temp196.get().v.set(src);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`class`));
    temp196.get().v.set($class);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`height`));
    temp196.get().v.set(height);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`alt`));
    temp196.get().v.set(alt);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`activeSrc`));
    temp196.get().v.set(activesrc);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp196.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`backgroundPosition`));
    temp196.get().v.set(backgroundposition);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`backgroundRepeat`));
    temp196.get().v.set(backgroundrepeat);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`backgroundSize`));
    temp196.get().v.set(backgroundsize);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`mode`));
    temp196.get().v.set(mode);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`useMap`));
    temp196.get().v.set(usemap);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`width`));
    temp196.get().v.set(width);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`error`));
    temp196.get().v.set(error);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`press`));
    temp196.get().v.set(press);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`load`));
    temp196.get().v.set(load);
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`decorative`));
    temp196.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: decorative})));
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`densityAware`));
    temp196.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: densityaware})));
    abap.statements.insertInternal({data: temp196, table: temp195});
    temp196.get().n.set(new abap.types.String().set(`lazyLoading`));
    temp196.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: lazyloading})));
    abap.statements.insertInternal({data: temp196, table: temp195});
    await this._generic({name: new abap.types.String().set(`Image`), t_prop: temp195});
    return result;
  }
  async image_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let src = INPUT?.src || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp197 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp198 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp197);
    temp198.get().n.set(new abap.types.String().set(`src`));
    temp198.get().v.set(src);
    abap.statements.insertInternal({data: temp198, table: temp197});
    temp198.get().n.set(new abap.types.String().set(`description`));
    temp198.get().v.set(description);
    abap.statements.insertInternal({data: temp198, table: temp197});
    temp198.get().n.set(new abap.types.String().set(`visible`));
    temp198.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp198, table: temp197});
    temp198.get().n.set(new abap.types.String().set(`class`));
    temp198.get().v.set($class);
    abap.statements.insertInternal({data: temp198, table: temp197});
    temp198.get().n.set(new abap.types.String().set(`press`));
    temp198.get().v.set(press);
    abap.statements.insertInternal({data: temp198, table: temp197});
    result.set((await this._generic({name: new abap.types.String().set(`ImageContent`), t_prop: temp197})));
    return result;
  }
  async info_label(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let rendermode = INPUT?.rendermode || new abap.types.Character();
    let colorscheme = INPUT?.colorscheme || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let displayonly = INPUT?.displayonly || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp199 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp200 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp199);
    temp200.get().n.set(new abap.types.String().set(`id`));
    temp200.get().v.set(id);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`class`));
    temp200.get().v.set($class);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`text`));
    temp200.get().v.set(text);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`renderMode `));
    temp200.get().v.set(rendermode);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`colorScheme`));
    temp200.get().v.set(colorscheme);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`displayOnly`));
    temp200.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayonly})));
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`icon`));
    temp200.get().v.set(icon);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`textDirection`));
    temp200.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`visible`));
    temp200.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp200, table: temp199});
    temp200.get().n.set(new abap.types.String().set(`width`));
    temp200.get().v.set(width);
    abap.statements.insertInternal({data: temp200, table: temp199});
    result.set((await this._generic({name: new abap.types.String().set(`InfoLabel`), ns: new abap.types.Character(3).set('tnt'), t_prop: temp199})));
    return result;
  }
  async input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let showtablesuggestionvaluehelp = INPUT?.showtablesuggestionvaluehelp || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let suggestionitems = INPUT?.suggestionitems || new abap.types.Character();
    let suggestionrows = INPUT?.suggestionrows || new abap.types.Character();
    let showsuggestion = INPUT?.showsuggestion || new abap.types.Character();
    let showvaluehelp = INPUT?.showvaluehelp || new abap.types.Character();
    let valuehelprequest = INPUT?.valuehelprequest || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let suggest = INPUT?.suggest || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let submit = INPUT?.submit || new abap.types.Character();
    let valueliveupdate = INPUT?.valueliveupdate || new abap.types.Character();
    let autocomplete = INPUT?.autocomplete || new abap.types.Character();
    let maxsuggestionwidth = INPUT?.maxsuggestionwidth || new abap.types.Character();
    let fieldwidth = INPUT?.fieldwidth || new abap.types.Character();
    let valuehelponly = INPUT?.valuehelponly || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let valuehelpiconsrc = INPUT?.valuehelpiconsrc || new abap.types.Character();
    let textformatter = INPUT?.textformatter || new abap.types.Character();
    let textformatmode = INPUT?.textformatmode || new abap.types.Character();
    let maxlength = INPUT?.maxlength || new abap.types.Character();
    let startsuggestion = INPUT?.startsuggestion || new abap.types.Character();
    let enablesuggestionshighlighting = INPUT?.enablesuggestionshighlighting || new abap.types.Character();
    let enabletableautopopinmode = INPUT?.enabletableautopopinmode || new abap.types.Character();
    let arialabelledby = INPUT?.arialabelledby || new abap.types.Character();
    let ariadescribedby = INPUT?.ariadescribedby || new abap.types.Character();
    let temp201 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp202 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp201);
    temp202.get().n.set(new abap.types.String().set(`id`));
    temp202.get().v.set(id);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`placeholder`));
    temp202.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`type`));
    temp202.get().v.set(type);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`maxLength`));
    temp202.get().v.set(maxlength);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearicon})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`description`));
    temp202.get().v.set(description);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`editable`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`enabled`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`visible`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`enableTableAutoPopinMode`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabletableautopopinmode})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`enableSuggestionsHighlighting`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablesuggestionshighlighting})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`showTableSuggestionValueHelp`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtablesuggestionvaluehelp})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueState`));
    temp202.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueStateText`));
    temp202.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`value`));
    temp202.get().v.set(value);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`required`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`suggest`));
    temp202.get().v.set(suggest);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`suggestionItems`));
    temp202.get().v.set(suggestionitems);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`suggestionRows`));
    temp202.get().v.set(suggestionrows);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`showSuggestion`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsuggestion})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueHelpRequest`));
    temp202.get().v.set(valuehelprequest);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`autocomplete`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autocomplete})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueLiveUpdate`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: valueliveupdate})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`submit`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: submit})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`showValueHelp`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluehelp})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueHelpOnly`));
    temp202.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: valuehelponly})));
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`class`));
    temp202.get().v.set($class);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`change`));
    temp202.get().v.set(change);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`maxSuggestionWidth`));
    temp202.get().v.set(maxsuggestionwidth);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`width`));
    temp202.get().v.set(width);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`textFormatter`));
    temp202.get().v.set(textformatter);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`startSuggestion`));
    temp202.get().v.set(startsuggestion);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`valueHelpIconSrc`));
    temp202.get().v.set(valuehelpiconsrc);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`textFormatMode`));
    temp202.get().v.set(textformatmode);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`fieldWidth`));
    temp202.get().v.set(fieldwidth);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`ariaLabelledBy`));
    temp202.get().v.set(arialabelledby);
    abap.statements.insertInternal({data: temp202, table: temp201});
    temp202.get().n.set(new abap.types.String().set(`ariaDescribedBy`));
    temp202.get().v.set(ariadescribedby);
    abap.statements.insertInternal({data: temp202, table: temp201});
    await this._generic({name: new abap.types.String().set(`Input`), t_prop: temp201});
    return result;
  }
  async input_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let label = INPUT?.label || new abap.types.Character();
    let temp203 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp204 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp203);
    temp204.get().n.set(new abap.types.String().set(`label`));
    temp204.get().v.set(label);
    abap.statements.insertInternal({data: temp204, table: temp203});
    result.set((await this._generic({name: new abap.types.String().set(`InputListItem`), t_prop: temp203})));
    return result;
  }
  async interact_bar_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectionchanged = INPUT?.selectionchanged || new abap.types.Character();
    let selectionenabled = INPUT?.selectionenabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let labelwidth = INPUT?.labelwidth || new abap.types.Character();
    let errormessage = INPUT?.errormessage || new abap.types.Character();
    let errormessagetitle = INPUT?.errormessagetitle || new abap.types.Character();
    let showerror = INPUT?.showerror || new abap.types.Character();
    let displayedbars = INPUT?.displayedbars || new abap.types.Character();
    let bars = INPUT?.bars || new abap.types.Character();
    let max = INPUT?.max || new abap.types.Character();
    let min = INPUT?.min || new abap.types.Character();
    let temp205 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp206 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp205);
    temp206.get().n.set(new abap.types.String().set(`selectionChanged`));
    temp206.get().v.set(selectionchanged);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`selectionEnabled`));
    temp206.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selectionenabled})));
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`showError`));
    temp206.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showerror})));
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`press`));
    temp206.get().v.set(press);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`labelWidth`));
    temp206.get().v.set(labelwidth);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`bars`));
    temp206.get().v.set(bars);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`errorMessageTitle`));
    temp206.get().v.set(errormessagetitle);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`displayedBars`));
    temp206.get().v.set(displayedbars);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`min`));
    temp206.get().v.set(min);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`max`));
    temp206.get().v.set(max);
    abap.statements.insertInternal({data: temp206, table: temp205});
    temp206.get().n.set(new abap.types.String().set(`errorMessage`));
    temp206.get().v.set(errormessage);
    abap.statements.insertInternal({data: temp206, table: temp205});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveBarChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp205})));
    return result;
  }
  async interact_bar_chart_bar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let label = INPUT?.label || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let displayedvalue = INPUT?.displayedvalue || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let temp207 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp208 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp207);
    temp208.get().n.set(new abap.types.String().set(`label`));
    temp208.get().v.set(label);
    abap.statements.insertInternal({data: temp208, table: temp207});
    temp208.get().n.set(new abap.types.String().set(`displayedValue`));
    temp208.get().v.set(displayedvalue);
    abap.statements.insertInternal({data: temp208, table: temp207});
    temp208.get().n.set(new abap.types.String().set(`value`));
    temp208.get().v.set(value);
    abap.statements.insertInternal({data: temp208, table: temp207});
    temp208.get().n.set(new abap.types.String().set(`selected`));
    temp208.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp208, table: temp207});
    temp208.get().n.set(new abap.types.String().set(`color`));
    temp208.get().v.set(color);
    abap.statements.insertInternal({data: temp208, table: temp207});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveBarChartBar`), ns: new abap.types.String().set(`mchart`), t_prop: temp207})));
    return result;
  }
  async interact_donut_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectionchanged = INPUT?.selectionchanged || new abap.types.Character();
    let errormessage = INPUT?.errormessage || new abap.types.Character();
    let errormessagetitle = INPUT?.errormessagetitle || new abap.types.Character();
    let showerror = INPUT?.showerror || new abap.types.Character();
    let displayedsegments = INPUT?.displayedsegments || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let segments = INPUT?.segments || new abap.types.Character();
    let selectionenabled = INPUT?.selectionenabled || new abap.types.Character();
    let temp209 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp210 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp209);
    temp210.get().n.set(new abap.types.String().set(`selectionChanged`));
    temp210.get().v.set(selectionchanged);
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`selectionEnabled`));
    temp210.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selectionenabled})));
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`showError`));
    temp210.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showerror})));
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`errorMessageTitle`));
    temp210.get().v.set(errormessagetitle);
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`errorMessage`));
    temp210.get().v.set(errormessage);
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`displayedSegments`));
    temp210.get().v.set(displayedsegments);
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`segments`));
    temp210.get().v.set(segments);
    abap.statements.insertInternal({data: temp210, table: temp209});
    temp210.get().n.set(new abap.types.String().set(`press`));
    temp210.get().v.set(press);
    abap.statements.insertInternal({data: temp210, table: temp209});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveDonutChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp209})));
    return result;
  }
  async interact_donut_chart_segment(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let label = INPUT?.label || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let displayedvalue = INPUT?.displayedvalue || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let temp211 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp212 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp211);
    temp212.get().n.set(new abap.types.String().set(`label`));
    temp212.get().v.set(label);
    abap.statements.insertInternal({data: temp212, table: temp211});
    temp212.get().n.set(new abap.types.String().set(`displayedValue`));
    temp212.get().v.set(displayedvalue);
    abap.statements.insertInternal({data: temp212, table: temp211});
    temp212.get().n.set(new abap.types.String().set(`value`));
    temp212.get().v.set(value);
    abap.statements.insertInternal({data: temp212, table: temp211});
    temp212.get().n.set(new abap.types.String().set(`selected`));
    temp212.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp212, table: temp211});
    temp212.get().n.set(new abap.types.String().set(`color`));
    temp212.get().v.set(color);
    abap.statements.insertInternal({data: temp212, table: temp211});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveDonutChartSegment`), ns: new abap.types.String().set(`mchart`), t_prop: temp211})));
    return result;
  }
  async interact_line_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectionchanged = INPUT?.selectionchanged || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let precedingpoint = INPUT?.precedingpoint || new abap.types.Character();
    let succeddingpoint = INPUT?.succeddingpoint || new abap.types.Character();
    let errormessage = INPUT?.errormessage || new abap.types.Character();
    let errormessagetitle = INPUT?.errormessagetitle || new abap.types.Character();
    let showerror = INPUT?.showerror || new abap.types.Character();
    let displayedpoints = INPUT?.displayedpoints || new abap.types.Character();
    let selectionenabled = INPUT?.selectionenabled || new abap.types.Character();
    let points = INPUT?.points || new abap.types.Character();
    let temp213 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp214 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp213);
    temp214.get().n.set(new abap.types.String().set(`selectionChanged`));
    temp214.get().v.set(selectionchanged);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`showError`));
    temp214.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showerror})));
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`press`));
    temp214.get().v.set(press);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`errorMessageTitle`));
    temp214.get().v.set(errormessagetitle);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`errorMessage`));
    temp214.get().v.set(errormessage);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`precedingPoint`));
    temp214.get().v.set(precedingpoint);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`points`));
    temp214.get().v.set(points);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`succeedingPoint`));
    temp214.get().v.set(succeddingpoint);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`displayedPoints`));
    temp214.get().v.set(displayedpoints);
    abap.statements.insertInternal({data: temp214, table: temp213});
    temp214.get().n.set(new abap.types.String().set(`selectionEnabled`));
    temp214.get().v.set(selectionenabled);
    abap.statements.insertInternal({data: temp214, table: temp213});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveLineChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp213})));
    return result;
  }
  async interact_line_chart_point(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let label = INPUT?.label || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let secondarylabel = INPUT?.secondarylabel || new abap.types.Character();
    let displayedvalue = INPUT?.displayedvalue || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let temp215 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp216 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp215);
    temp216.get().n.set(new abap.types.String().set(`label`));
    temp216.get().v.set(label);
    abap.statements.insertInternal({data: temp216, table: temp215});
    temp216.get().n.set(new abap.types.String().set(`secondaryLabel`));
    temp216.get().v.set(secondarylabel);
    abap.statements.insertInternal({data: temp216, table: temp215});
    temp216.get().n.set(new abap.types.String().set(`value`));
    temp216.get().v.set(value);
    abap.statements.insertInternal({data: temp216, table: temp215});
    temp216.get().n.set(new abap.types.String().set(`displayedValue`));
    temp216.get().v.set(displayedvalue);
    abap.statements.insertInternal({data: temp216, table: temp215});
    temp216.get().n.set(new abap.types.String().set(`selected`));
    temp216.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp216, table: temp215});
    result.set((await this._generic({name: new abap.types.String().set(`InteractiveLineChartPoint`), ns: new abap.types.String().set(`mchart`), t_prop: temp215})));
    return result;
  }
  async intermediary() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`intermediary`), ns: new abap.types.String().set(`commons`)})));
    return result;
  }
  async interval_headers() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`intervalHeaders`)})));
    return result;
  }
  async item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let temp217 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp218 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp217);
    temp218.get().n.set(new abap.types.String().set(`key`));
    temp218.get().v.set(key);
    abap.statements.insertInternal({data: temp218, table: temp217});
    temp218.get().n.set(new abap.types.String().set(`text`));
    temp218.get().v.set(text);
    abap.statements.insertInternal({data: temp218, table: temp217});
    await this._generic({name: new abap.types.String().set(`Item`), ns: new abap.types.String().set(`core`), t_prop: temp217});
    return result;
  }
  async items(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`items`), ns: ns})));
    return result;
  }
  async label(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let labelfor = INPUT?.labelfor || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let displayonly = INPUT?.displayonly || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let showcolon = INPUT?.showcolon || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let valign = INPUT?.valign || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp219 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp220 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp219);
    temp220.get().n.set(new abap.types.String().set(`text`));
    temp220.get().v.set(text);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`displayOnly`));
    temp220.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayonly})));
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`required`));
    temp220.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`showColon`));
    temp220.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcolon})));
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`textAlign`));
    temp220.get().v.set(textalign);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`textDirection`));
    temp220.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`vAlign`));
    temp220.get().v.set(valign);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`width`));
    temp220.get().v.set(width);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`wrapping`));
    temp220.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`wrappingType`));
    temp220.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`design`));
    temp220.get().v.set(design);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`id`));
    temp220.get().v.set(id);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`class`));
    temp220.get().v.set($class);
    abap.statements.insertInternal({data: temp220, table: temp219});
    temp220.get().n.set(new abap.types.String().set(`labelFor`));
    temp220.get().v.set(labelfor);
    abap.statements.insertInternal({data: temp220, table: temp219});
    await this._generic({name: new abap.types.String().set(`Label`), t_prop: temp219});
    return result;
  }
  async lanes() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`lanes`), ns: new abap.types.String().set(`commons`)})));
    return result;
  }
  async layered_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let linespacingfactor = INPUT?.linespacingfactor || new abap.types.Character();
    let mergeedges = INPUT?.mergeedges || new abap.types.Character();
    let nodeplacement = INPUT?.nodeplacement || new abap.types.Character();
    let nodespacing = INPUT?.nodespacing || new abap.types.Character();
    let temp221 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp222 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp221);
    temp222.get().n.set(new abap.types.String().set(`id`));
    temp222.get().v.set(id);
    abap.statements.insertInternal({data: temp222, table: temp221});
    temp222.get().n.set(new abap.types.String().set(`class`));
    temp222.get().v.set($class);
    abap.statements.insertInternal({data: temp222, table: temp221});
    temp222.get().n.set(new abap.types.String().set(`lineSpacingFactor`));
    temp222.get().v.set(linespacingfactor);
    abap.statements.insertInternal({data: temp222, table: temp221});
    temp222.get().n.set(new abap.types.String().set(`nodePlacement`));
    temp222.get().v.set(nodeplacement);
    abap.statements.insertInternal({data: temp222, table: temp221});
    temp222.get().n.set(new abap.types.String().set(`nodeSpacing`));
    temp222.get().v.set(nodespacing);
    abap.statements.insertInternal({data: temp222, table: temp221});
    temp222.get().n.set(new abap.types.String().set(`mergeEdges`));
    temp222.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: mergeedges})));
    abap.statements.insertInternal({data: temp222, table: temp221});
    result.set((await this._generic({name: new abap.types.String().set(`LayeredLayout`), ns: new abap.types.String().set(`nglayout`), t_prop: temp221})));
    return result;
  }
  async layout_algorithm() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`layoutAlgorithm`), ns: new abap.types.String().set(`networkgraph`)})));
    return result;
  }
  async layout_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`layoutData`)})));
    return result;
  }
  async legend(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let caption = INPUT?.caption || new abap.types.Character();
    let temp223 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp224 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp223);
    temp224.get().n.set(new abap.types.String().set(`id`));
    temp224.get().v.set(id);
    abap.statements.insertInternal({data: temp224, table: temp223});
    temp224.get().n.set(new abap.types.String().set(`caption`));
    temp224.get().v.set(caption);
    abap.statements.insertInternal({data: temp224, table: temp223});
    temp224.get().n.set(new abap.types.String().set(`items`));
    temp224.get().v.set(items);
    abap.statements.insertInternal({data: temp224, table: temp223});
    result.set((await this._generic({name: new abap.types.String().set(`Legend`), ns: new abap.types.String().set(`vbm`), t_prop: temp223})));
    return result;
  }
  async legenditem(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let temp225 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp226 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp225);
    temp226.get().n.set(new abap.types.String().set(`id`));
    temp226.get().v.set(id);
    abap.statements.insertInternal({data: temp226, table: temp225});
    temp226.get().n.set(new abap.types.String().set(`text`));
    temp226.get().v.set(text);
    abap.statements.insertInternal({data: temp226, table: temp225});
    temp226.get().n.set(new abap.types.String().set(`color`));
    temp226.get().v.set(color);
    abap.statements.insertInternal({data: temp226, table: temp225});
    result.set((await this._generic({name: new abap.types.String().set(`LegendItem`), ns: new abap.types.String().set(`vbm`), t_prop: temp225})));
    return result;
  }
  async legend_area() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`legend`), ns: new abap.types.String().set(`vbm`)})));
    return result;
  }
  async library_shape(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let animationonchange = INPUT?.animationonchange || new abap.types.Character();
    let definition = INPUT?.definition || new abap.types.Character();
    let fillcolor = INPUT?.fillcolor || new abap.types.Character();
    let fillingangle = INPUT?.fillingangle || new abap.types.Character();
    let fillingdirection = INPUT?.fillingdirection || new abap.types.Character();
    let fillingtype = INPUT?.fillingtype || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let horizontalalignment = INPUT?.horizontalalignment || new abap.types.Character();
    let shapeid = INPUT?.shapeid || new abap.types.Character();
    let strokecolor = INPUT?.strokecolor || new abap.types.Character();
    let strokewidth = INPUT?.strokewidth || new abap.types.Character();
    let verticalalignment = INPUT?.verticalalignment || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let x = INPUT?.x || new abap.types.Character();
    let y = INPUT?.y || new abap.types.Character();
    let aftershapeloaded = INPUT?.aftershapeloaded || new abap.types.Character();
    let temp227 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp228 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp227);
    temp228.get().n.set(new abap.types.String().set(`id`));
    temp228.get().v.set(id);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`class`));
    temp228.get().v.set($class);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`animationOnChange`));
    temp228.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: animationonchange})));
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`definition`));
    temp228.get().v.set(definition);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`fillColor`));
    temp228.get().v.set(fillcolor);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`fillingAngle`));
    temp228.get().v.set(fillingangle);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`fillingDirection`));
    temp228.get().v.set(fillingdirection);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`fillingType`));
    temp228.get().v.set(fillingtype);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`height`));
    temp228.get().v.set(height);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`horizontalAlignment`));
    temp228.get().v.set(horizontalalignment);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`shapeId`));
    temp228.get().v.set(shapeid);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`strokeColor`));
    temp228.get().v.set(strokecolor);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`strokeWidth`));
    temp228.get().v.set(strokewidth);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`verticalAlignment`));
    temp228.get().v.set(verticalalignment);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`width`));
    temp228.get().v.set(width);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`x`));
    temp228.get().v.set(x);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`y`));
    temp228.get().v.set(y);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`afterShapeLoaded`));
    temp228.get().v.set(aftershapeloaded);
    abap.statements.insertInternal({data: temp228, table: temp227});
    temp228.get().n.set(new abap.types.String().set(`visible`));
    temp228.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp228, table: temp227});
    result.set((await this._generic({name: new abap.types.String().set(`LibraryShape`), ns: new abap.types.String().set(`si`), t_prop: temp227})));
    return result;
  }
  async light_box(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp229 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp230 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp229);
    temp230.get().n.set(new abap.types.String().set(`id`));
    temp230.get().v.set(id);
    abap.statements.insertInternal({data: temp230, table: temp229});
    temp230.get().n.set(new abap.types.String().set(`class`));
    temp230.get().v.set($class);
    abap.statements.insertInternal({data: temp230, table: temp229});
    temp230.get().n.set(new abap.types.String().set(`visible`));
    temp230.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp230, table: temp229});
    result.set((await this._generic({name: new abap.types.String().set(`LightBox`), t_prop: temp229})));
    return result;
  }
  async light_box_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let alt = INPUT?.alt || new abap.types.Character();
    let imagesrc = INPUT?.imagesrc || new abap.types.Character();
    let subtitle = INPUT?.subtitle || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let temp231 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp232 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp231);
    temp232.get().n.set(new abap.types.String().set(`alt`));
    temp232.get().v.set(alt);
    abap.statements.insertInternal({data: temp232, table: temp231});
    temp232.get().n.set(new abap.types.String().set(`imageSrc`));
    temp232.get().v.set(imagesrc);
    abap.statements.insertInternal({data: temp232, table: temp231});
    temp232.get().n.set(new abap.types.String().set(`subtitle`));
    temp232.get().v.set(subtitle);
    abap.statements.insertInternal({data: temp232, table: temp231});
    temp232.get().n.set(new abap.types.String().set(`title`));
    temp232.get().v.set(title);
    abap.statements.insertInternal({data: temp232, table: temp231});
    result.set((await this._generic({name: new abap.types.String().set(`LightBoxItem`), t_prop: temp231})));
    return result;
  }
  async line(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let arroworientation = INPUT?.arroworientation || new abap.types.Character();
    let arrowposition = INPUT?.arrowposition || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let from = INPUT?.from || new abap.types.Character();
    let linetype = INPUT?.linetype || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let status = INPUT?.status || new abap.types.Character();
    let stretchtocenter = INPUT?.stretchtocenter || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let to = INPUT?.to || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let hover = INPUT?.hover || new abap.types.Character();
    let temp233 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp234 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp233);
    temp234.get().n.set(new abap.types.String().set(`id`));
    temp234.get().v.set(id);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`class`));
    temp234.get().v.set($class);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`arrowOrientation`));
    temp234.get().v.set(arroworientation);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`arrowPosition`));
    temp234.get().v.set(arrowposition);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`description`));
    temp234.get().v.set(description);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`from`));
    temp234.get().v.set(from);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`lineType`));
    temp234.get().v.set(linetype);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`status`));
    temp234.get().v.set(status);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`title`));
    temp234.get().v.set(title);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`to`));
    temp234.get().v.set(to);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`hover`));
    temp234.get().v.set(hover);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`press`));
    temp234.get().v.set(press);
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`stretchToCenter`));
    temp234.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: stretchtocenter})));
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`selected`));
    temp234.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp234, table: temp233});
    temp234.get().n.set(new abap.types.String().set(`visible`));
    temp234.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp234, table: temp233});
    result.set((await this._generic({name: new abap.types.String().set(`Line`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp233})));
    return result;
  }
  async lines(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let temp235 = new abap.types.String({qualifiedName: "STRING"});
    let unique181 = ns;
    if (abap.compare.eq(unique181, new abap.types.Character(1).set(''))) {
      temp235.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp235.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`lines`), ns: temp235})));
    return result;
  }
  async line_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let color = INPUT?.color || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let leftbottomlabel = INPUT?.leftbottomlabel || new abap.types.Character();
    let lefttoplabel = INPUT?.lefttoplabel || new abap.types.Character();
    let maxxvalue = INPUT?.maxxvalue || new abap.types.Character();
    let minxvalue = INPUT?.minxvalue || new abap.types.Character();
    let minyvalue = INPUT?.minyvalue || new abap.types.Character();
    let rightbottomlabel = INPUT?.rightbottomlabel || new abap.types.Character();
    let righttoplabel = INPUT?.righttoplabel || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let threshold = INPUT?.threshold || new abap.types.Character();
    let thresholddisplayvalue = INPUT?.thresholddisplayvalue || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let showbottomlabels = INPUT?.showbottomlabels || new abap.types.Character();
    let showpoints = INPUT?.showpoints || new abap.types.Character();
    let showthresholdline = INPUT?.showthresholdline || new abap.types.Character();
    let showthresholdvalue = INPUT?.showthresholdvalue || new abap.types.Character();
    let showtoplabels = INPUT?.showtoplabels || new abap.types.Character();
    let maxyvalue = INPUT?.maxyvalue || new abap.types.Character();
    let temp236 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp237 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp236);
    temp237.get().n.set(new abap.types.String().set(`color`));
    temp237.get().v.set(color);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`height`));
    temp237.get().v.set(height);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`leftBottomLabel`));
    temp237.get().v.set(leftbottomlabel);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`leftTopLabel`));
    temp237.get().v.set(lefttoplabel);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`maxXValue`));
    temp237.get().v.set(maxxvalue);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`minXValue`));
    temp237.get().v.set(minxvalue);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`minYValue`));
    temp237.get().v.set(minyvalue);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`rightBottomLabel`));
    temp237.get().v.set(rightbottomlabel);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`rightTopLabel`));
    temp237.get().v.set(righttoplabel);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`size`));
    temp237.get().v.set(size);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`threshold`));
    temp237.get().v.set(threshold);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`thresholdDisplayValue`));
    temp237.get().v.set(thresholddisplayvalue);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`width`));
    temp237.get().v.set(width);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`press`));
    temp237.get().v.set(press);
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`showBottomLabels`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbottomlabels})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`showPoints`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showpoints})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`showThresholdLine`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showthresholdline})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`showThresholdValue`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showthresholdvalue})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`showTopLabels`));
    temp237.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtoplabels})));
    abap.statements.insertInternal({data: temp237, table: temp236});
    temp237.get().n.set(new abap.types.String().set(`maxYValue`));
    temp237.get().v.set(maxyvalue);
    abap.statements.insertInternal({data: temp237, table: temp236});
    await this._generic({name: new abap.types.String().set(`LineMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp236});
    return result;
  }
  async line_micro_chart_empszd_point(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let x = INPUT?.x || new abap.types.Character();
    let y = INPUT?.y || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let show = INPUT?.show || new abap.types.Character();
    let temp238 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp239 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp238);
    temp239.get().n.set(new abap.types.String().set(`x`));
    temp239.get().v.set(x);
    abap.statements.insertInternal({data: temp239, table: temp238});
    temp239.get().n.set(new abap.types.String().set(`y`));
    temp239.get().v.set(y);
    abap.statements.insertInternal({data: temp239, table: temp238});
    temp239.get().n.set(new abap.types.String().set(`color`));
    temp239.get().v.set(color);
    abap.statements.insertInternal({data: temp239, table: temp238});
    temp239.get().n.set(new abap.types.String().set(`show`));
    temp239.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: show})));
    abap.statements.insertInternal({data: temp239, table: temp238});
    result.set((await this._generic({name: new abap.types.String().set(`LineMicroChartEmphasizedPoint`), ns: new abap.types.String().set(`mchart`), t_prop: temp238})));
    return result;
  }
  async line_micro_chart_line(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let points = INPUT?.points || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let temp240 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp241 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp240);
    temp241.get().n.set(new abap.types.String().set(`points`));
    temp241.get().v.set(points);
    abap.statements.insertInternal({data: temp241, table: temp240});
    temp241.get().n.set(new abap.types.String().set(`color`));
    temp241.get().v.set(color);
    abap.statements.insertInternal({data: temp241, table: temp240});
    temp241.get().n.set(new abap.types.String().set(`type`));
    temp241.get().v.set(type);
    abap.statements.insertInternal({data: temp241, table: temp240});
    result.set((await this._generic({name: new abap.types.String().set(`LineMicroChartLine`), ns: new abap.types.String().set(`mchart`), t_prop: temp240})));
    return result;
  }
  async line_micro_chart_point(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let x = INPUT?.x || new abap.types.Character();
    let y = INPUT?.y || new abap.types.Character();
    let temp242 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp243 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp242);
    temp243.get().n.set(new abap.types.String().set(`x`));
    temp243.get().v.set(x);
    abap.statements.insertInternal({data: temp243, table: temp242});
    temp243.get().n.set(new abap.types.String().set(`y`));
    temp243.get().v.set(y);
    abap.statements.insertInternal({data: temp243, table: temp242});
    result.set((await this._generic({name: new abap.types.String().set(`LineMicroChartPoint`), ns: new abap.types.String().set(`mchart`), t_prop: temp242})));
    return result;
  }
  async link(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let href = INPUT?.href || new abap.types.Character();
    let target = INPUT?.target || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let ns = INPUT?.ns || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let validateurl = INPUT?.validateurl || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let subtle = INPUT?.subtle || new abap.types.Character();
    let rel = INPUT?.rel || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let emphasized = INPUT?.emphasized || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let accessiblerole = INPUT?.accessiblerole || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let endicon = INPUT?.endicon || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let temp244 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp245 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp244);
    temp245.get().n.set(new abap.types.String().set(`text`));
    temp245.get().v.set(text);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`target`));
    temp245.get().v.set(target);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`href`));
    temp245.get().v.set(href);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`press`));
    temp245.get().v.set(press);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`id`));
    temp245.get().v.set(id);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`class`));
    temp245.get().v.set($class);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`accessibleRole`));
    temp245.get().v.set(accessiblerole);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp245.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp245.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`rel`));
    temp245.get().v.set(rel);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`subtle`));
    temp245.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: subtle})));
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`textAlign`));
    temp245.get().v.set(textalign);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`textDirection`));
    temp245.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`validateUrl`));
    temp245.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: validateurl})));
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`width`));
    temp245.get().v.set(width);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`wrapping`));
    temp245.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`emphasized`));
    temp245.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: emphasized})));
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`enabled`));
    temp245.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`endIcon`));
    temp245.get().v.set(endicon);
    abap.statements.insertInternal({data: temp245, table: temp244});
    temp245.get().n.set(new abap.types.String().set(`icon`));
    temp245.get().v.set(icon);
    abap.statements.insertInternal({data: temp245, table: temp244});
    await this._generic({name: new abap.types.String().set(`Link`), ns: ns, t_prop: temp244});
    return result;
  }
  async link_tile_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let linkhref = INPUT?.linkhref || new abap.types.Character();
    let linktext = INPUT?.linktext || new abap.types.Character();
    let iconsrc = INPUT?.iconsrc || new abap.types.Character();
    let linkpress = INPUT?.linkpress || new abap.types.Character();
    let temp246 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp247 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp246);
    temp247.get().n.set(new abap.types.String().set(`iconSrc`));
    temp247.get().v.set(iconsrc);
    abap.statements.insertInternal({data: temp247, table: temp246});
    temp247.get().n.set(new abap.types.String().set(`linkHref`));
    temp247.get().v.set(linkhref);
    abap.statements.insertInternal({data: temp247, table: temp246});
    temp247.get().n.set(new abap.types.String().set(`linkText`));
    temp247.get().v.set(linktext);
    abap.statements.insertInternal({data: temp247, table: temp246});
    temp247.get().n.set(new abap.types.String().set(`linkPress`));
    temp247.get().v.set(linkpress);
    abap.statements.insertInternal({data: temp247, table: temp246});
    result.set((await this._generic({name: new abap.types.String().set(`LinkTileContent`), t_prop: temp246})));
    return result;
  }
  async list(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let headertext = INPUT?.headertext || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let showseparators = INPUT?.showseparators || new abap.types.Character();
    let footertext = INPUT?.footertext || new abap.types.Character();
    let growingdirection = INPUT?.growingdirection || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let growingtriggertext = INPUT?.growingtriggertext || new abap.types.Character();
    let headerlevel = INPUT?.headerlevel || new abap.types.Character();
    let multiselectmode = INPUT?.multiselectmode || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let sticky = INPUT?.sticky || new abap.types.Character();
    let modeanimationon = INPUT?.modeanimationon || new abap.types.Character();
    let growingscrolltoload = INPUT?.growingscrolltoload || new abap.types.Character();
    let includeiteminselection = INPUT?.includeiteminselection || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let inset = INPUT?.inset || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let rememberselections = INPUT?.rememberselections || new abap.types.Character();
    let showunread = INPUT?.showunread || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let nodata = INPUT?.nodata || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let itempress = INPUT?.itempress || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let $delete = INPUT?.delete || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp248 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp249 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp248);
    temp249.get().n.set(new abap.types.String().set(`headerText`));
    temp249.get().v.set(headertext);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`items`));
    temp249.get().v.set(items);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`mode`));
    temp249.get().v.set(mode);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`class`));
    temp249.get().v.set($class);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`itemPress`));
    temp249.get().v.set(itempress);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`select`));
    temp249.get().v.set(select);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`selectionChange`));
    temp249.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`showSeparators`));
    temp249.get().v.set(showseparators);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`footerText`));
    temp249.get().v.set(footertext);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`growingDirection`));
    temp249.get().v.set(growingdirection);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`growingThreshold`));
    temp249.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`growingTriggerText`));
    temp249.get().v.set(growingtriggertext);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`headerLevel`));
    temp249.get().v.set(headerlevel);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`multiSelectMode`));
    temp249.get().v.set(multiselectmode);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`noDataText`));
    temp249.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`id`));
    temp249.get().v.set(id);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`sticky`));
    temp249.get().v.set(sticky);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`delete`));
    temp249.get().v.set($delete);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp249.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`modeAnimationOn`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: modeanimationon})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`growingScrollToLoad`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growingscrolltoload})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`includeItemInSelection`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: includeiteminselection})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`growing`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`inset`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inset})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`rememberSelections`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rememberselections})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`showUnread`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showunread})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`visible`));
    temp249.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp249, table: temp248});
    temp249.get().n.set(new abap.types.String().set(`noData`));
    temp249.get().v.set(nodata);
    abap.statements.insertInternal({data: temp249, table: temp248});
    result.set((await this._generic({name: new abap.types.String().set(`List`), t_prop: temp248})));
    return result;
  }
  async list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let additionaltext = INPUT?.additionaltext || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let temp250 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp251 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp250);
    temp251.get().n.set(new abap.types.String().set(`text`));
    temp251.get().v.set(text);
    abap.statements.insertInternal({data: temp251, table: temp250});
    temp251.get().n.set(new abap.types.String().set(`icon`));
    temp251.get().v.set(icon);
    abap.statements.insertInternal({data: temp251, table: temp250});
    temp251.get().n.set(new abap.types.String().set(`key`));
    temp251.get().v.set(key);
    abap.statements.insertInternal({data: temp251, table: temp250});
    temp251.get().n.set(new abap.types.String().set(`textDirection`));
    temp251.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp251, table: temp250});
    temp251.get().n.set(new abap.types.String().set(`enabled`));
    temp251.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp251, table: temp250});
    temp251.get().n.set(new abap.types.String().set(`additionalText`));
    temp251.get().v.set(additionaltext);
    abap.statements.insertInternal({data: temp251, table: temp250});
    await this._generic({name: new abap.types.String().set(`ListItem`), ns: new abap.types.String().set(`core`), t_prop: temp250});
    return result;
  }
  async main_content() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`mainContent`), ns: new abap.types.String().set(`f`)})));
    return result;
  }
  async main_contents() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`mainContents`), ns: new abap.types.String().set(`tnt`)})));
    return result;
  }
  async map_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let autoadjustheight = INPUT?.autoadjustheight || new abap.types.Character();
    let temp252 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp253 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp252);
    temp253.get().n.set(new abap.types.String().set(`id`));
    temp253.get().v.set(id);
    abap.statements.insertInternal({data: temp253, table: temp252});
    temp253.get().n.set(new abap.types.String().set(`autoAdjustHeight`));
    temp253.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autoadjustheight})));
    abap.statements.insertInternal({data: temp253, table: temp252});
    result.set((await this._generic({name: new abap.types.String().set(`MapContainer`), ns: new abap.types.String().set(`vk`), t_prop: temp252})));
    return result;
  }
  async markers(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`markers`), ns: ns})));
    return result;
  }
  async markers_as_status() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`markersAsStatus`), ns: new abap.types.String().set(`upload`)})));
    return result;
  }
  async mask_input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let mask = INPUT?.mask || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let placeholdersymbol = INPUT?.placeholdersymbol || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let fieldwidth = INPUT?.fieldwidth || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let temp254 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp255 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp254);
    temp255.get().n.set(new abap.types.String().set(`placeholder`));
    temp255.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`mask`));
    temp255.get().v.set(mask);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`name`));
    temp255.get().v.set(name);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`textAlign`));
    temp255.get().v.set(textalign);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`textDirection`));
    temp255.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`value`));
    temp255.get().v.set(value);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`width`));
    temp255.get().v.set(width);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`liveChange`));
    temp255.get().v.set(livechange);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`change`));
    temp255.get().v.set(change);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`valueState`));
    temp255.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`valueStateText`));
    temp255.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`placeholderSymbol`));
    temp255.get().v.set(placeholdersymbol);
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`required`));
    temp255.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp255.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearicon})));
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp255.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`visible`));
    temp255.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp255, table: temp254});
    temp255.get().n.set(new abap.types.String().set(`fieldWidth`));
    temp255.get().v.set(fieldwidth);
    abap.statements.insertInternal({data: temp255, table: temp254});
    await this._generic({name: new abap.types.String().set(`MaskInput`), t_prop: temp254});
    return result;
  }
  async mask_input_rule(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let maskformatsymbol = INPUT?.maskformatsymbol || new abap.types.Character();
    let regex = INPUT?.regex || new abap.types.Character();
    let temp256 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp257 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp256);
    temp257.get().n.set(new abap.types.String().set(`maskFormatSymbol`));
    temp257.get().v.set(maskformatsymbol);
    abap.statements.insertInternal({data: temp257, table: temp256});
    temp257.get().n.set(new abap.types.String().set(`regex`));
    temp257.get().v.set(regex);
    abap.statements.insertInternal({data: temp257, table: temp256});
    result.set((await this._generic({name: new abap.types.String().set(`MaskInputRule`), t_prop: temp256})));
    return result;
  }
  async master_pages() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`masterPages`)})));
    return result;
  }
  async menu_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let buttonmode = INPUT?.buttonmode || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let defaultaction = INPUT?.defaultaction || new abap.types.Character();
    let temp258 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp259 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp258);
    temp259.get().n.set(new abap.types.String().set(`buttonMode`));
    temp259.get().v.set(buttonmode);
    abap.statements.insertInternal({data: temp259, table: temp258});
    temp259.get().n.set(new abap.types.String().set(`defaultAction`));
    temp259.get().v.set(defaultaction);
    abap.statements.insertInternal({data: temp259, table: temp258});
    temp259.get().n.set(new abap.types.String().set(`text`));
    temp259.get().v.set(text);
    abap.statements.insertInternal({data: temp259, table: temp258});
    temp259.get().n.set(new abap.types.String().set(`enabled`));
    temp259.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp259, table: temp258});
    temp259.get().n.set(new abap.types.String().set(`activeIcon`));
    temp259.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp259, table: temp258});
    temp259.get().n.set(new abap.types.String().set(`type`));
    temp259.get().v.set(type);
    abap.statements.insertInternal({data: temp259, table: temp258});
    result.set((await this._generic({name: new abap.types.String().set(`MenuButton`), t_prop: temp258})));
    return result;
  }
  async menu_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let press = INPUT?.press || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let temp260 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp261 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp260);
    temp261.get().n.set(new abap.types.String().set(`press`));
    temp261.get().v.set(press);
    abap.statements.insertInternal({data: temp261, table: temp260});
    temp261.get().n.set(new abap.types.String().set(`text`));
    temp261.get().v.set(text);
    abap.statements.insertInternal({data: temp261, table: temp260});
    temp261.get().n.set(new abap.types.String().set(`icon`));
    temp261.get().v.set(icon);
    abap.statements.insertInternal({data: temp261, table: temp260});
    await this._generic({name: new abap.types.String().set(`MenuItem`), t_prop: temp260});
    return result;
  }
  async message_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let type = INPUT?.type || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let subtitle = INPUT?.subtitle || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let groupname = INPUT?.groupname || new abap.types.Character();
    let markupdescription = INPUT?.markupdescription || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let longtexturl = INPUT?.longtexturl || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let activetitle = INPUT?.activetitle || new abap.types.Character();
    let temp262 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp263 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp262);
    temp263.get().n.set(new abap.types.String().set(`type`));
    temp263.get().v.set(type);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`title`));
    temp263.get().v.set(title);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`subtitle`));
    temp263.get().v.set(subtitle);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`description`));
    temp263.get().v.set(description);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`longtextUrl`));
    temp263.get().v.set(longtexturl);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`textDirection`));
    temp263.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`groupName`));
    temp263.get().v.set(groupname);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`activeTitle`));
    temp263.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: activetitle})));
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`counter`));
    temp263.get().v.set(counter);
    abap.statements.insertInternal({data: temp263, table: temp262});
    temp263.get().n.set(new abap.types.String().set(`markupDescription`));
    temp263.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: markupdescription})));
    abap.statements.insertInternal({data: temp263, table: temp262});
    result.set((await this._generic({name: new abap.types.String().set(`MessageItem`), t_prop: temp262})));
    return result;
  }
  async message_page(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let show_header = INPUT?.show_header || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let enableformattedtext = INPUT?.enableformattedtext || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let temp264 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp265 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp264);
    temp265.get().n.set(new abap.types.String().set(`showHeader`));
    temp265.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: show_header})));
    abap.statements.insertInternal({data: temp265, table: temp264});
    temp265.get().n.set(new abap.types.String().set(`description`));
    temp265.get().v.set(description);
    abap.statements.insertInternal({data: temp265, table: temp264});
    temp265.get().n.set(new abap.types.String().set(`icon`));
    temp265.get().v.set(icon);
    abap.statements.insertInternal({data: temp265, table: temp264});
    temp265.get().n.set(new abap.types.String().set(`text`));
    temp265.get().v.set(text);
    abap.statements.insertInternal({data: temp265, table: temp264});
    temp265.get().n.set(new abap.types.String().set(`enableFormattedText`));
    temp265.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableformattedtext})));
    abap.statements.insertInternal({data: temp265, table: temp264});
    result.set((await this._generic({name: new abap.types.String().set(`MessagePage`), t_prop: temp264})));
    return result;
  }
  async message_popover(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let items = INPUT?.items || new abap.types.Character();
    let groupitems = INPUT?.groupitems || new abap.types.Character();
    let listselect = INPUT?.listselect || new abap.types.Character();
    let activetitlepress = INPUT?.activetitlepress || new abap.types.Character();
    let placement = INPUT?.placement || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let beforeclose = INPUT?.beforeclose || new abap.types.Character();
    let initiallyexpanded = INPUT?.initiallyexpanded || new abap.types.Character();
    let temp266 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp267 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp266);
    temp267.get().n.set(new abap.types.String().set(`items`));
    temp267.get().v.set(items);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`activeTitlePress`));
    temp267.get().v.set(activetitlepress);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`placement`));
    temp267.get().v.set(placement);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`listSelect`));
    temp267.get().v.set(listselect);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`afterClose`));
    temp267.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`beforeClose`));
    temp267.get().v.set(beforeclose);
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`initiallyExpanded`));
    temp267.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: initiallyexpanded})));
    abap.statements.insertInternal({data: temp267, table: temp266});
    temp267.get().n.set(new abap.types.String().set(`groupItems`));
    temp267.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: groupitems})));
    abap.statements.insertInternal({data: temp267, table: temp266});
    result.set((await this._generic({name: new abap.types.String().set(`MessagePopover`), t_prop: temp266})));
    return result;
  }
  async message_strip(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let showicon = INPUT?.showicon || new abap.types.Character();
    let customicon = INPUT?.customicon || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let showclosebutton = INPUT?.showclosebutton || new abap.types.Character();
    let enableformattedtext = INPUT?.enableformattedtext || new abap.types.Character();
    let temp268 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp269 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp268);
    temp269.get().n.set(new abap.types.String().set(`text`));
    temp269.get().v.set(text);
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`type`));
    temp269.get().v.set(type);
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`showIcon`));
    temp269.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicon})));
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`customIcon`));
    temp269.get().v.set(customicon);
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`visible`));
    temp269.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`showCloseButton`));
    temp269.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclosebutton})));
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`class`));
    temp269.get().v.set($class);
    abap.statements.insertInternal({data: temp269, table: temp268});
    temp269.get().n.set(new abap.types.String().set(`enableFormattedText`));
    temp269.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableformattedtext})));
    abap.statements.insertInternal({data: temp269, table: temp268});
    await this._generic({name: new abap.types.String().set(`MessageStrip`), t_prop: temp268});
    return result;
  }
  async message_view(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let items = INPUT?.items || new abap.types.Character();
    let groupitems = INPUT?.groupitems || new abap.types.Character();
    let temp270 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp271 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp270);
    temp271.get().n.set(new abap.types.String().set(`items`));
    temp271.get().v.set(items);
    abap.statements.insertInternal({data: temp271, table: temp270});
    temp271.get().n.set(new abap.types.String().set(`groupItems`));
    temp271.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: groupitems})));
    abap.statements.insertInternal({data: temp271, table: temp270});
    result.set((await this._generic({name: new abap.types.String().set(`MessageView`), t_prop: temp270})));
    return result;
  }
  async micro_process_flow(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let arialabel = INPUT?.arialabel || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let temp272 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp273 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp272);
    temp273.get().n.set(new abap.types.String().set(`id`));
    temp273.get().v.set(id);
    abap.statements.insertInternal({data: temp273, table: temp272});
    temp273.get().n.set(new abap.types.String().set(`class`));
    temp273.get().v.set($class);
    abap.statements.insertInternal({data: temp273, table: temp272});
    temp273.get().n.set(new abap.types.String().set(`renderType`));
    temp273.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp273, table: temp272});
    temp273.get().n.set(new abap.types.String().set(`width`));
    temp273.get().v.set(width);
    abap.statements.insertInternal({data: temp273, table: temp272});
    temp273.get().n.set(new abap.types.String().set(`ariaLabel`));
    temp273.get().v.set(arialabel);
    abap.statements.insertInternal({data: temp273, table: temp272});
    result.set((await this._generic({name: new abap.types.String().set(`MicroProcessFlow`), ns: new abap.types.String().set(`commons`), t_prop: temp272})));
    return result;
  }
  async micro_process_flow_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let showintermediary = INPUT?.showintermediary || new abap.types.Character();
    let showseparator = INPUT?.showseparator || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let stepwidth = INPUT?.stepwidth || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp274 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp275 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp274);
    temp275.get().n.set(new abap.types.String().set(`id`));
    temp275.get().v.set(id);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`class`));
    temp275.get().v.set($class);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`press`));
    temp275.get().v.set(press);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`title`));
    temp275.get().v.set(title);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`stepWidth`));
    temp275.get().v.set(stepwidth);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`state`));
    temp275.get().v.set(state);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`key`));
    temp275.get().v.set(key);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`icon`));
    temp275.get().v.set(icon);
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`showSeparator`));
    temp275.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showseparator})));
    abap.statements.insertInternal({data: temp275, table: temp274});
    temp275.get().n.set(new abap.types.String().set(`showIntermediary`));
    temp275.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showintermediary})));
    abap.statements.insertInternal({data: temp275, table: temp274});
    result.set((await this._generic({name: new abap.types.String().set(`MicroProcessFlowItem`), ns: new abap.types.String().set(`commons`), t_prop: temp274})));
    return result;
  }
  async mid_column_pages(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let temp276 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp277 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp276);
    temp277.get().n.set(new abap.types.String().set(`id`));
    temp277.get().v.set(id);
    abap.statements.insertInternal({data: temp277, table: temp276});
    result.set((await this._generic({name: new abap.types.String().set(`midColumnPages`), ns: new abap.types.String().set(`f`), t_prop: temp276})));
    return result;
  }
  async multi_combobox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let selectedkeys = INPUT?.selectedkeys || new abap.types.Character();
    let selecteditems = INPUT?.selecteditems || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let selectionfinish = INPUT?.selectionfinish || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let showsecondaryvalues = INPUT?.showsecondaryvalues || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let selecteditemid = INPUT?.selecteditemid || new abap.types.Character();
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let showbutton = INPUT?.showbutton || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let filtersecondaryvalues = INPUT?.filtersecondaryvalues || new abap.types.Character();
    let showselectall = INPUT?.showselectall || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp278 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp279 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp278);
    temp279.get().n.set(new abap.types.String().set(`selectionChange`));
    temp279.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`selectedKeys`));
    temp279.get().v.set(selectedkeys);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`selectedItems`));
    temp279.get().v.set(selecteditems);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`items`));
    temp279.get().v.set(items);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`id`));
    temp279.get().v.set(id);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`class`));
    temp279.get().v.set($class);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`selectionFinish`));
    temp279.get().v.set(selectionfinish);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`width`));
    temp279.get().v.set(width);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`showSecondaryValues`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsecondaryvalues})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`placeholder`));
    temp279.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`selectedItemId`));
    temp279.get().v.set(selecteditemid);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`selectedKey`));
    temp279.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`name`));
    temp279.get().v.set(name);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`value`));
    temp279.get().v.set(value);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`valueState`));
    temp279.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`valueStateText`));
    temp279.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`textAlign`));
    temp279.get().v.set(textalign);
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`visible`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearicon})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`showButton`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbutton})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`required`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`editable`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`enabled`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`filterSecondaryValues`));
    temp279.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: filtersecondaryvalues})));
    abap.statements.insertInternal({data: temp279, table: temp278});
    temp279.get().n.set(new abap.types.String().set(`showSelectAll`));
    temp279.get().v.set(showselectall);
    abap.statements.insertInternal({data: temp279, table: temp278});
    result.set((await this._generic({name: new abap.types.String().set(`MultiComboBox`), t_prop: temp278})));
    return result;
  }
  async multi_input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let showclearicon = INPUT?.showclearicon || new abap.types.Character();
    let showvaluehelp = INPUT?.showvaluehelp || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let suggestionitems = INPUT?.suggestionitems || new abap.types.Character();
    let tokenupdate = INPUT?.tokenupdate || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let tokens = INPUT?.tokens || new abap.types.Character();
    let submit = INPUT?.submit || new abap.types.Character();
    let valuehelprequest = INPUT?.valuehelprequest || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let showsuggestion = INPUT?.showsuggestion || new abap.types.Character();
    let temp280 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp281 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp280);
    temp281.get().n.set(new abap.types.String().set(`tokens`));
    temp281.get().v.set(tokens);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`showClearIcon`));
    temp281.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearicon})));
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`name`));
    temp281.get().v.set(name);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`showValueHelp`));
    temp281.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluehelp})));
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`enabled`));
    temp281.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`suggestionItems`));
    temp281.get().v.set(suggestionitems);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`tokenUpdate`));
    temp281.get().v.set(tokenupdate);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`submit`));
    temp281.get().v.set(submit);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`width`));
    temp281.get().v.set(width);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`value`));
    temp281.get().v.set(value);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`id`));
    temp281.get().v.set(id);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`change`));
    temp281.get().v.set(change);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`valueHelpRequest`));
    temp281.get().v.set(valuehelprequest);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`class`));
    temp281.get().v.set($class);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`required`));
    temp281.get().v.set(required);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`valueState`));
    temp281.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`valueStateText`));
    temp281.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`placeholder`));
    temp281.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp281, table: temp280});
    temp281.get().n.set(new abap.types.String().set(`showSuggestion`));
    temp281.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsuggestion})));
    abap.statements.insertInternal({data: temp281, table: temp280});
    result.set((await this._generic({name: new abap.types.String().set(`MultiInput`), t_prop: temp280})));
    return result;
  }
  async navigation_actions() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`navigationActions`), ns: new abap.types.String().set(`f`)})));
    return result;
  }
  async nav_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let initialpage = INPUT?.initialpage || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let defaulttransitionname = INPUT?.defaulttransitionname || new abap.types.Character();
    let autofocus = INPUT?.autofocus || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp282 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp283 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp282);
    temp283.get().n.set(new abap.types.String().set(`initialPage`));
    temp283.get().v.set(initialpage);
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`id`));
    temp283.get().v.set(id);
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`height`));
    temp283.get().v.set(height);
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`width`));
    temp283.get().v.set(width);
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`autoFocus`));
    temp283.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autofocus})));
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`visible`));
    temp283.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp283, table: temp282});
    temp283.get().n.set(new abap.types.String().set(`defaultTransitionName`));
    temp283.get().v.set(defaulttransitionname);
    abap.statements.insertInternal({data: temp283, table: temp282});
    result.set((await this._generic({name: new abap.types.String().set(`NavContainer`), t_prop: temp282})));
    return result;
  }
  async network_graph(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let layout = INPUT?.layout || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let nodes = INPUT?.nodes || new abap.types.Character();
    let lines = INPUT?.lines || new abap.types.Character();
    let groups = INPUT?.groups || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let backgroundimage = INPUT?.backgroundimage || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let orientation = INPUT?.orientation || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let enablewheelzoom = INPUT?.enablewheelzoom || new abap.types.Character();
    let enablezoom = INPUT?.enablezoom || new abap.types.Character();
    let nodata = INPUT?.nodata || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let afterlayouting = INPUT?.afterlayouting || new abap.types.Character();
    let beforelayouting = INPUT?.beforelayouting || new abap.types.Character();
    let failure = INPUT?.failure || new abap.types.Character();
    let graphready = INPUT?.graphready || new abap.types.Character();
    let search = INPUT?.search || new abap.types.Character();
    let searchsuggest = INPUT?.searchsuggest || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let zoomchanged = INPUT?.zoomchanged || new abap.types.Character();
    let temp284 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp285 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp284);
    temp285.get().n.set(new abap.types.String().set(`id`));
    temp285.get().v.set(id);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`class`));
    temp285.get().v.set($class);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`layout`));
    temp285.get().v.set(layout);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`height`));
    temp285.get().v.set(height);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`width`));
    temp285.get().v.set(width);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`nodes`));
    temp285.get().v.set(nodes);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`lines`));
    temp285.get().v.set(lines);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`groups`));
    temp285.get().v.set(groups);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp285.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`backgroundImage`));
    temp285.get().v.set(backgroundimage);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`noDataText`));
    temp285.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`orientation`));
    temp285.get().v.set(orientation);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`renderType`));
    temp285.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`afterLayouting`));
    temp285.get().v.set(afterlayouting);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`beforeLayouting`));
    temp285.get().v.set(beforelayouting);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`failure`));
    temp285.get().v.set(failure);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`graphReady`));
    temp285.get().v.set(graphready);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`search`));
    temp285.get().v.set(search);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`searchSuggest`));
    temp285.get().v.set(searchsuggest);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`selectionChange`));
    temp285.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`zoomChanged`));
    temp285.get().v.set(zoomchanged);
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`enableWheelZoom`));
    temp285.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablewheelzoom})));
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`enableZoom`));
    temp285.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablezoom})));
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`noData`));
    temp285.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: nodata})));
    abap.statements.insertInternal({data: temp285, table: temp284});
    temp285.get().n.set(new abap.types.String().set(`visible`));
    temp285.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp285, table: temp284});
    result.set((await this._generic({name: new abap.types.String().set(`Graph`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp284})));
    return result;
  }
  async node(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let alttext = INPUT?.alttext || new abap.types.Character();
    let collapsed = INPUT?.collapsed || new abap.types.Character();
    let corenodesize = INPUT?.corenodesize || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let descriptionlinesize = INPUT?.descriptionlinesize || new abap.types.Character();
    let group = INPUT?.group || new abap.types.Character();
    let headercheckboxstate = INPUT?.headercheckboxstate || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let maxwidth = INPUT?.maxwidth || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let shape = INPUT?.shape || new abap.types.Character();
    let showactionlinksbutton = INPUT?.showactionlinksbutton || new abap.types.Character();
    let showdetailbutton = INPUT?.showdetailbutton || new abap.types.Character();
    let showexpandbutton = INPUT?.showexpandbutton || new abap.types.Character();
    let statusicon = INPUT?.statusicon || new abap.types.Character();
    let titlelinesize = INPUT?.titlelinesize || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let x = INPUT?.x || new abap.types.Character();
    let y = INPUT?.y || new abap.types.Character();
    let collapseexpand = INPUT?.collapseexpand || new abap.types.Character();
    let headercheckboxpress = INPUT?.headercheckboxpress || new abap.types.Character();
    let hover = INPUT?.hover || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let attributes = INPUT?.attributes || new abap.types.Character();
    let actionbuttons = INPUT?.actionbuttons || new abap.types.Character();
    let temp286 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp287 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp286);
    temp287.get().n.set(new abap.types.String().set(`id`));
    temp287.get().v.set(id);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`class`));
    temp287.get().v.set($class);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`altText`));
    temp287.get().v.set(alttext);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`coreNodeSize`));
    temp287.get().v.set(corenodesize);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`description`));
    temp287.get().v.set(description);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`descriptionLineSize`));
    temp287.get().v.set(descriptionlinesize);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`group`));
    temp287.get().v.set(group);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`headerCheckBoxState`));
    temp287.get().v.set(headercheckboxstate);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`height`));
    temp287.get().v.set(height);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`icon`));
    temp287.get().v.set(icon);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`iconSize`));
    temp287.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`iconSize`));
    temp287.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`key`));
    temp287.get().v.set(key);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`maxWidth`));
    temp287.get().v.set(maxwidth);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`title`));
    temp287.get().v.set(title);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`shape`));
    temp287.get().v.set(shape);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`statusIcon`));
    temp287.get().v.set(statusicon);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`titleLineSize`));
    temp287.get().v.set(titlelinesize);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`width`));
    temp287.get().v.set(width);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`x`));
    temp287.get().v.set(x);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`y`));
    temp287.get().v.set(y);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`attributes`));
    temp287.get().v.set(attributes);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`actionButtons`));
    temp287.get().v.set(actionbuttons);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`collapseExpand`));
    temp287.get().v.set(collapseexpand);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`headerCheckBoxPress`));
    temp287.get().v.set(headercheckboxpress);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`hover`));
    temp287.get().v.set(hover);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`press`));
    temp287.get().v.set(press);
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`collapsed`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: collapsed})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`selected`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`showActionLinksButton`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showactionlinksbutton})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`showDetailButton`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showdetailbutton})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`showExpandButton`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showexpandbutton})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    temp287.get().n.set(new abap.types.String().set(`visible`));
    temp287.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp287, table: temp286});
    result.set((await this._generic({name: new abap.types.String().set(`Node`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp286})));
    return result;
  }
  async nodes(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`nodes`), ns: ns})));
    return result;
  }
  async node_image(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let src = INPUT?.src || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp288 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp289 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp288);
    temp289.get().n.set(new abap.types.String().set(`id`));
    temp289.get().v.set(id);
    abap.statements.insertInternal({data: temp289, table: temp288});
    temp289.get().n.set(new abap.types.String().set(`class`));
    temp289.get().v.set($class);
    abap.statements.insertInternal({data: temp289, table: temp288});
    temp289.get().n.set(new abap.types.String().set(`height`));
    temp289.get().v.set(height);
    abap.statements.insertInternal({data: temp289, table: temp288});
    temp289.get().n.set(new abap.types.String().set(`width`));
    temp289.get().v.set(width);
    abap.statements.insertInternal({data: temp289, table: temp288});
    temp289.get().n.set(new abap.types.String().set(`src`));
    temp289.get().v.set(src);
    abap.statements.insertInternal({data: temp289, table: temp288});
    result.set((await this._generic({name: new abap.types.String().set(`NodeImage`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp288})));
    return result;
  }
  async noop_layout() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`NoopLayout`), ns: new abap.types.String().set(`nglayout`)})));
    return result;
  }
  async notification_list(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let footertext = INPUT?.footertext || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingdirection = INPUT?.growingdirection || new abap.types.Character();
    let growingscrolltoload = INPUT?.growingscrolltoload || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let growingtriggertext = INPUT?.growingtriggertext || new abap.types.Character();
    let headerlevel = INPUT?.headerlevel || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let includeiteminselection = INPUT?.includeiteminselection || new abap.types.Character();
    let inset = INPUT?.inset || new abap.types.Character();
    let keyboardmode = INPUT?.keyboardmode || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let modeanimationon = INPUT?.modeanimationon || new abap.types.Character();
    let multiselectmode = INPUT?.multiselectmode || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let rememberselections = INPUT?.rememberselections || new abap.types.Character();
    let shownodata = INPUT?.shownodata || new abap.types.Character();
    let showseparators = INPUT?.showseparators || new abap.types.Character();
    let showunread = INPUT?.showunread || new abap.types.Character();
    let sticky = INPUT?.sticky || new abap.types.Character();
    let swipedirection = INPUT?.swipedirection || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let beforeopencontextmenu = INPUT?.beforeopencontextmenu || new abap.types.Character();
    let $delete = INPUT?.delete || new abap.types.Character();
    let growingfinished = INPUT?.growingfinished || new abap.types.Character();
    let growingstarted = INPUT?.growingstarted || new abap.types.Character();
    let itempress = INPUT?.itempress || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let swipe = INPUT?.swipe || new abap.types.Character();
    let updatefinished = INPUT?.updatefinished || new abap.types.Character();
    let updatestarted = INPUT?.updatestarted || new abap.types.Character();
    let temp290 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp291 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp290);
    temp291.get().n.set(new abap.types.String().set(`id`));
    temp291.get().v.set(id);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`class`));
    temp291.get().v.set($class);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`footerText`));
    temp291.get().v.set(footertext);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingDirection`));
    temp291.get().v.set(growingdirection);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingThreshold`));
    temp291.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingTriggerText`));
    temp291.get().v.set(growingtriggertext);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`headerLevel`));
    temp291.get().v.set(headerlevel);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`headerText`));
    temp291.get().v.set(headertext);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`keyboardMode`));
    temp291.get().v.set(keyboardmode);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`mode`));
    temp291.get().v.set(mode);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`multiSelectMode`));
    temp291.get().v.set(multiselectmode);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`noDataText`));
    temp291.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`sticky`));
    temp291.get().v.set(sticky);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`swipeDirection`));
    temp291.get().v.set(swipedirection);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`width`));
    temp291.get().v.set(width);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`showSeparators`));
    temp291.get().v.set(showseparators);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`beforeOpenContextMenu`));
    temp291.get().v.set(beforeopencontextmenu);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`delete`));
    temp291.get().v.set($delete);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingFinished`));
    temp291.get().v.set(growingfinished);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingStarted`));
    temp291.get().v.set(growingstarted);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`itemPress`));
    temp291.get().v.set(itempress);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`select`));
    temp291.get().v.set(select);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`selectionChange`));
    temp291.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`swipe`));
    temp291.get().v.set(swipe);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`updateFinished`));
    temp291.get().v.set(updatefinished);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`updateStarted`));
    temp291.get().v.set(updatestarted);
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growingScrollToLoad`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growingscrolltoload})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`visible`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`growing`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`includeItemInSelection`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: includeiteminselection})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`inset`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inset})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`modeAnimationOn`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: modeanimationon})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`rememberSelections`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rememberselections})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`showNoData`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownodata})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    temp291.get().n.set(new abap.types.String().set(`showUnread`));
    temp291.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showunread})));
    abap.statements.insertInternal({data: temp291, table: temp290});
    result.set((await this._generic({name: new abap.types.String().set(`NotificationList`), t_prop: temp290})));
    return result;
  }
  async notification_list_group(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let autopriority = INPUT?.autopriority || new abap.types.Character();
    let collapsed = INPUT?.collapsed || new abap.types.Character();
    let enablecollapsebuttonwhenempty = INPUT?.enablecollapsebuttonwhenempty || new abap.types.Character();
    let highlight = INPUT?.highlight || new abap.types.Character();
    let highlighttext = INPUT?.highlighttext || new abap.types.Character();
    let navigated = INPUT?.navigated || new abap.types.Character();
    let priority = INPUT?.priority || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let showbuttons = INPUT?.showbuttons || new abap.types.Character();
    let showclosebutton = INPUT?.showclosebutton || new abap.types.Character();
    let showemptygroup = INPUT?.showemptygroup || new abap.types.Character();
    let showitemscounter = INPUT?.showitemscounter || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let unread = INPUT?.unread || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let oncollapse = INPUT?.oncollapse || new abap.types.Character();
    let temp292 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp293 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp292);
    temp293.get().n.set(new abap.types.String().set(`id`));
    temp293.get().v.set(id);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`class`));
    temp293.get().v.set($class);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`highlight`));
    temp293.get().v.set(highlight);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`highlightText`));
    temp293.get().v.set(highlighttext);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`priority`));
    temp293.get().v.set(priority);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`title`));
    temp293.get().v.set(title);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`type`));
    temp293.get().v.set(type);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`onCollapse`));
    temp293.get().v.set(oncollapse);
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`visible`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`autoPriority`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autopriority})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`collapsed`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: collapsed})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`enableCollapseButtonWhenEmpty`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecollapsebuttonwhenempty})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`navigated`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: navigated})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`selected`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`showButtons`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbuttons})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`showCloseButton`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclosebutton})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`showEmptyGroup`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showemptygroup})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`showItemsCounter`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showitemscounter})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    temp293.get().n.set(new abap.types.String().set(`unread`));
    temp293.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: unread})));
    abap.statements.insertInternal({data: temp293, table: temp292});
    result.set((await this._generic({name: new abap.types.String().set(`NotificationListGroup`), t_prop: temp292})));
    return result;
  }
  async notification_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let authoravatarcolor = INPUT?.authoravatarcolor || new abap.types.Character();
    let authorinitials = INPUT?.authorinitials || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let hideshowmorebutton = INPUT?.hideshowmorebutton || new abap.types.Character();
    let truncate = INPUT?.truncate || new abap.types.Character();
    let authorname = INPUT?.authorname || new abap.types.Character();
    let authorpicture = INPUT?.authorpicture || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let datetime = INPUT?.datetime || new abap.types.Character();
    let highlight = INPUT?.highlight || new abap.types.Character();
    let highlighttext = INPUT?.highlighttext || new abap.types.Character();
    let navigated = INPUT?.navigated || new abap.types.Character();
    let priority = INPUT?.priority || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let showbuttons = INPUT?.showbuttons || new abap.types.Character();
    let showclosebutton = INPUT?.showclosebutton || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let unread = INPUT?.unread || new abap.types.Character();
    let close = INPUT?.close || new abap.types.Character();
    let detailpress = INPUT?.detailpress || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp294 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp295 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp294);
    temp295.get().n.set(new abap.types.String().set(`id`));
    temp295.get().v.set(id);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`class`));
    temp295.get().v.set($class);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`authorAvatarColor`));
    temp295.get().v.set(authoravatarcolor);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`authorInitials`));
    temp295.get().v.set(authorinitials);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`description`));
    temp295.get().v.set(description);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`authorName`));
    temp295.get().v.set(authorname);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`authorPicture`));
    temp295.get().v.set(authorpicture);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`datetime`));
    temp295.get().v.set(datetime);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`counter`));
    temp295.get().v.set(counter);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`highlightText`));
    temp295.get().v.set(highlighttext);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`priority`));
    temp295.get().v.set(priority);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`title`));
    temp295.get().v.set(title);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`type`));
    temp295.get().v.set(type);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`close`));
    temp295.get().v.set(close);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`detailPress`));
    temp295.get().v.set(detailpress);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`press`));
    temp295.get().v.set(press);
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`visible`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`hideShowMoreButton`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideshowmorebutton})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`truncate`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: truncate})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`highlight`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: highlight})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`navigated`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: navigated})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`selected`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`showButtons`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showbuttons})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`showCloseButton`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclosebutton})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`truncate`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: truncate})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    temp295.get().n.set(new abap.types.String().set(`unread`));
    temp295.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: unread})));
    abap.statements.insertInternal({data: temp295, table: temp294});
    result.set((await this._generic({name: new abap.types.String().set(`NotificationListItem`), t_prop: temp294})));
    return result;
  }
  async no_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`noData`), ns: ns})));
    return result;
  }
  async numeric_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let withmargin = INPUT?.withmargin || new abap.types.Character();
    let adaptivefontsize = INPUT?.adaptivefontsize || new abap.types.Character();
    let animatetextchange = INPUT?.animatetextchange || new abap.types.Character();
    let formattervalue = INPUT?.formattervalue || new abap.types.Character();
    let icondescription = INPUT?.icondescription || new abap.types.Character();
    let indicator = INPUT?.indicator || new abap.types.Character();
    let nullifyvalue = INPUT?.nullifyvalue || new abap.types.Character();
    let scale = INPUT?.scale || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let truncatevalueto = INPUT?.truncatevalueto || new abap.types.Character();
    let valuecolor = INPUT?.valuecolor || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp296 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp297 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp296);
    temp297.get().n.set(new abap.types.String().set(`value`));
    temp297.get().v.set(value);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`icon`));
    temp297.get().v.set(icon);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`width`));
    temp297.get().v.set(width);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`valueColor`));
    temp297.get().v.set(valuecolor);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`truncateValueTo`));
    temp297.get().v.set(truncatevalueto);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`state`));
    temp297.get().v.set(state);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`scale`));
    temp297.get().v.set(scale);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`indicator`));
    temp297.get().v.set(indicator);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`iconDescription`));
    temp297.get().v.set(icondescription);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`visible`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`nullifyValue`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: nullifyvalue})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`formatterValue`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: formattervalue})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`animateTextChange`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: animatetextchange})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`adaptiveFontSize`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: adaptivefontsize})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`withMargin`));
    temp297.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: withmargin})));
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`class`));
    temp297.get().v.set($class);
    abap.statements.insertInternal({data: temp297, table: temp296});
    temp297.get().n.set(new abap.types.String().set(`press`));
    temp297.get().v.set(press);
    abap.statements.insertInternal({data: temp297, table: temp296});
    result.set((await this._generic({name: new abap.types.String().set(`NumericContent`), t_prop: temp296})));
    return result;
  }
  async numeric_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let datatimestamp = INPUT?.datatimestamp || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let details = INPUT?.details || new abap.types.Character();
    let detailsmaxlines = INPUT?.detailsmaxlines || new abap.types.Character();
    let detailsstate = INPUT?.detailsstate || new abap.types.Character();
    let iconalt = INPUT?.iconalt || new abap.types.Character();
    let iconbackgroundcolor = INPUT?.iconbackgroundcolor || new abap.types.Character();
    let icondisplayshape = INPUT?.icondisplayshape || new abap.types.Character();
    let iconinitials = INPUT?.iconinitials || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let iconsrc = INPUT?.iconsrc || new abap.types.Character();
    let iconvisible = INPUT?.iconvisible || new abap.types.Character();
    let number = INPUT?.number || new abap.types.Character();
    let numbersize = INPUT?.numbersize || new abap.types.Character();
    let numbervisible = INPUT?.numbervisible || new abap.types.Character();
    let scale = INPUT?.scale || new abap.types.Character();
    let sideindicatorsalignment = INPUT?.sideindicatorsalignment || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let statustext = INPUT?.statustext || new abap.types.Character();
    let statusvisible = INPUT?.statusvisible || new abap.types.Character();
    let subtitle = INPUT?.subtitle || new abap.types.Character();
    let subtitlemaxlines = INPUT?.subtitlemaxlines || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titlemaxlines = INPUT?.titlemaxlines || new abap.types.Character();
    let trend = INPUT?.trend || new abap.types.Character();
    let unitofmeasurement = INPUT?.unitofmeasurement || new abap.types.Character();
    let temp298 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp299 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp298);
    temp299.get().n.set(new abap.types.String().set(`id`));
    temp299.get().v.set(id);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`class`));
    temp299.get().v.set($class);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`datatimestamp`));
    temp299.get().v.set(datatimestamp);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`press`));
    temp299.get().v.set(press);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`details`));
    temp299.get().v.set(details);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`detailsMaxLines`));
    temp299.get().v.set(detailsmaxlines);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`detailsState`));
    temp299.get().v.set(detailsstate);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconAlt`));
    temp299.get().v.set(iconalt);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconBackgroundColor`));
    temp299.get().v.set(iconbackgroundcolor);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconDisplayShape`));
    temp299.get().v.set(icondisplayshape);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconSize`));
    temp299.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconSrc`));
    temp299.get().v.set(iconsrc);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconInitials`));
    temp299.get().v.set(iconinitials);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`number`));
    temp299.get().v.set(number);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`numberSize`));
    temp299.get().v.set(numbersize);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`scale`));
    temp299.get().v.set(scale);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`sideIndicatorsAlignment`));
    temp299.get().v.set(sideindicatorsalignment);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`state`));
    temp299.get().v.set(state);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`statusText`));
    temp299.get().v.set(statustext);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`subtitle`));
    temp299.get().v.set(subtitle);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`subtitleMaxLines`));
    temp299.get().v.set(subtitlemaxlines);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`title`));
    temp299.get().v.set(title);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`titleMaxLines`));
    temp299.get().v.set(titlemaxlines);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`trend`));
    temp299.get().v.set(trend);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`unitOfMeasurement`));
    temp299.get().v.set(unitofmeasurement);
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`statusVisible`));
    temp299.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: statusvisible})));
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`numberVisible`));
    temp299.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: numbervisible})));
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`iconVisible`));
    temp299.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconvisible})));
    abap.statements.insertInternal({data: temp299, table: temp298});
    temp299.get().n.set(new abap.types.String().set(`visible`));
    temp299.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp299, table: temp298});
    result.set((await this._generic({name: new abap.types.String().set(`NumericHeader`), ns: new abap.types.String().set(`f`), t_prop: temp298})));
    return result;
  }
  async numeric_side_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let number = INPUT?.number || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let unit = INPUT?.unit || new abap.types.Character();
    let temp300 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp301 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp300);
    temp301.get().n.set(new abap.types.String().set(`id`));
    temp301.get().v.set(id);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`class`));
    temp301.get().v.set($class);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`unit`));
    temp301.get().v.set(unit);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`title`));
    temp301.get().v.set(title);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`state`));
    temp301.get().v.set(state);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`number`));
    temp301.get().v.set(number);
    abap.statements.insertInternal({data: temp301, table: temp300});
    temp301.get().n.set(new abap.types.String().set(`visible`));
    temp301.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp301, table: temp300});
    result.set((await this._generic({name: new abap.types.String().set(`NumericSideIndicator`), ns: new abap.types.String().set(`f`), t_prop: temp300})));
    return result;
  }
  async object_attribute(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let active = INPUT?.active || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp302 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp303 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp302);
    temp303.get().n.set(new abap.types.String().set(`title`));
    temp303.get().v.set(title);
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`textDirection`));
    temp303.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp303.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`press`));
    temp303.get().v.set(press);
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`active`));
    temp303.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`visible`));
    temp303.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp303, table: temp302});
    temp303.get().n.set(new abap.types.String().set(`text`));
    temp303.get().v.set(text);
    abap.statements.insertInternal({data: temp303, table: temp302});
    await this._generic({name: new abap.types.String().set(`ObjectAttribute`), t_prop: temp302});
    return result;
  }
  async object_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let condensed = INPUT?.condensed || new abap.types.Character();
    let fullscreenoptimized = INPUT?.fullscreenoptimized || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let iconactive = INPUT?.iconactive || new abap.types.Character();
    let iconalt = INPUT?.iconalt || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let icontooltip = INPUT?.icontooltip || new abap.types.Character();
    let imageshape = INPUT?.imageshape || new abap.types.Character();
    let intro = INPUT?.intro || new abap.types.Character();
    let introactive = INPUT?.introactive || new abap.types.Character();
    let introhref = INPUT?.introhref || new abap.types.Character();
    let introtarget = INPUT?.introtarget || new abap.types.Character();
    let introtextdirection = INPUT?.introtextdirection || new abap.types.Character();
    let number = INPUT?.number || new abap.types.Character();
    let numberstate = INPUT?.numberstate || new abap.types.Character();
    let numbertextdirection = INPUT?.numbertextdirection || new abap.types.Character();
    let numberunit = INPUT?.numberunit || new abap.types.Character();
    let responsive = INPUT?.responsive || new abap.types.Character();
    let showtitleselector = INPUT?.showtitleselector || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titleactive = INPUT?.titleactive || new abap.types.Character();
    let titlehref = INPUT?.titlehref || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let titleselectortooltip = INPUT?.titleselectortooltip || new abap.types.Character();
    let titletarget = INPUT?.titletarget || new abap.types.Character();
    let titletextdirection = INPUT?.titletextdirection || new abap.types.Character();
    let iconpress = INPUT?.iconpress || new abap.types.Character();
    let intropress = INPUT?.intropress || new abap.types.Character();
    let titlepress = INPUT?.titlepress || new abap.types.Character();
    let titleselectorpress = INPUT?.titleselectorpress || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp304 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp305 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp304);
    temp305.get().n.set(new abap.types.String().set(`backgrounddesign`));
    temp305.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`condensed`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: condensed})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`fullscreenoptimized`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fullscreenoptimized})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`icon`));
    temp305.get().v.set(icon);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`iconactive`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconactive})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`iconalt`));
    temp305.get().v.set(iconalt);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`icondensityaware`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`icontooltip`));
    temp305.get().v.set(icontooltip);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`imageShape`));
    temp305.get().v.set(imageshape);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`intro`));
    temp305.get().v.set(intro);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`introactive`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: introactive})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`introhref`));
    temp305.get().v.set(introhref);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`introtarget`));
    temp305.get().v.set(introtarget);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`introtextdirection`));
    temp305.get().v.set(introtextdirection);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`number`));
    temp305.get().v.set(number);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`numberstate`));
    temp305.get().v.set(numberstate);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`numbertextdirection`));
    temp305.get().v.set(numbertextdirection);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`numberunit`));
    temp305.get().v.set(numberunit);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`responsive`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: responsive})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`showtitleselector`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitleselector})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`title`));
    temp305.get().v.set(title);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titleactive`));
    temp305.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: titleactive})));
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titlehref`));
    temp305.get().v.set(titlehref);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titlelevel`));
    temp305.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titleselectortooltip`));
    temp305.get().v.set(titleselectortooltip);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titletarget`));
    temp305.get().v.set(titletarget);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titletextdirection`));
    temp305.get().v.set(titletextdirection);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`iconpress`));
    temp305.get().v.set(iconpress);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`intropress`));
    temp305.get().v.set(intropress);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titlepress`));
    temp305.get().v.set(titlepress);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`titleselectorpress`));
    temp305.get().v.set(titleselectorpress);
    abap.statements.insertInternal({data: temp305, table: temp304});
    temp305.get().n.set(new abap.types.String().set(`class`));
    temp305.get().v.set($class);
    abap.statements.insertInternal({data: temp305, table: temp304});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectHeader`), t_prop: temp304})));
    return result;
  }
  async object_identifier(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titleactive = INPUT?.titleactive || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let titlepress = INPUT?.titlepress || new abap.types.Character();
    let temp306 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp307 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp306);
    temp307.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp307.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`text`));
    temp307.get().v.set(text);
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`textDirection`));
    temp307.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`title`));
    temp307.get().v.set(title);
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`titleActive`));
    temp307.get().v.set(titleactive);
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`visible`));
    temp307.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp307, table: temp306});
    temp307.get().n.set(new abap.types.String().set(`titlePress`));
    temp307.get().v.set(titlepress);
    abap.statements.insertInternal({data: temp307, table: temp306});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectIdentifier`), t_prop: temp306})));
    return result;
  }
  async object_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let intro = INPUT?.intro || new abap.types.Character();
    let introtextdirection = INPUT?.introtextdirection || new abap.types.Character();
    let number = INPUT?.number || new abap.types.Character();
    let numberstate = INPUT?.numberstate || new abap.types.Character();
    let numbertextdirection = INPUT?.numbertextdirection || new abap.types.Character();
    let numberunit = INPUT?.numberunit || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titletextdirection = INPUT?.titletextdirection || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let temp308 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp309 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp308);
    temp309.get().n.set(new abap.types.String().set(`activeIcon`));
    temp309.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`icon`));
    temp309.get().v.set(icon);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`intro`));
    temp309.get().v.set(intro);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`introTextDirection`));
    temp309.get().v.set(introtextdirection);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`number`));
    temp309.get().v.set(number);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`numberState`));
    temp309.get().v.set(numberstate);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`numberTextDirection`));
    temp309.get().v.set(numbertextdirection);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`numberUnit`));
    temp309.get().v.set(numberunit);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`title`));
    temp309.get().v.set(title);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`titleTextDirection`));
    temp309.get().v.set(titletextdirection);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp309.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`press`));
    temp309.get().v.set(press);
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`selected`));
    temp309.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp309, table: temp308});
    temp309.get().n.set(new abap.types.String().set(`type`));
    temp309.get().v.set(type);
    abap.statements.insertInternal({data: temp309, table: temp308});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectListItem`), t_prop: temp308})));
    return result;
  }
  async object_marker(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let additionalinfo = INPUT?.additionalinfo || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let visibility = INPUT?.visibility || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp310 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp311 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp310);
    temp311.get().n.set(new abap.types.String().set(`additionalInfo`));
    temp311.get().v.set(additionalinfo);
    abap.statements.insertInternal({data: temp311, table: temp310});
    temp311.get().n.set(new abap.types.String().set(`type`));
    temp311.get().v.set(type);
    abap.statements.insertInternal({data: temp311, table: temp310});
    temp311.get().n.set(new abap.types.String().set(`visible`));
    temp311.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp311, table: temp310});
    temp311.get().n.set(new abap.types.String().set(`press`));
    temp311.get().v.set(press);
    abap.statements.insertInternal({data: temp311, table: temp310});
    temp311.get().n.set(new abap.types.String().set(`visibility`));
    temp311.get().v.set(visibility);
    abap.statements.insertInternal({data: temp311, table: temp310});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectMarker`), t_prop: temp310})));
    return result;
  }
  async object_number(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let state = INPUT?.state || new abap.types.Character();
    let emphasized = INPUT?.emphasized || new abap.types.Character();
    let number = INPUT?.number || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let numberunit = INPUT?.numberunit || new abap.types.Character();
    let inverted = INPUT?.inverted || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let active = INPUT?.active || new abap.types.Character();
    let unit = INPUT?.unit || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp312 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp313 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp312);
    temp313.get().n.set(new abap.types.String().set(`emphasized`));
    temp313.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: emphasized})));
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`number`));
    temp313.get().v.set(number);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`state`));
    temp313.get().v.set(state);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`id`));
    temp313.get().v.set(id);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`class`));
    temp313.get().v.set($class);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`textAlign`));
    temp313.get().v.set(textalign);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`textDirection`));
    temp313.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp313.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`numberunit`));
    temp313.get().v.set(numberunit);
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`active`));
    temp313.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`inverted`));
    temp313.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inverted})));
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`visible`));
    temp313.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp313, table: temp312});
    temp313.get().n.set(new abap.types.String().set(`unit`));
    temp313.get().v.set(unit);
    abap.statements.insertInternal({data: temp313, table: temp312});
    await this._generic({name: new abap.types.String().set(`ObjectNumber`), t_prop: temp312});
    return result;
  }
  async object_page_dyn_header_title() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectPageDynamicHeaderTitle`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async object_page_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let isactionareaalwaysvisible = INPUT?.isactionareaalwaysvisible || new abap.types.Character();
    let isobjecticonalwaysvisible = INPUT?.isobjecticonalwaysvisible || new abap.types.Character();
    let isobjectsubtitlealwaysvisible = INPUT?.isobjectsubtitlealwaysvisible || new abap.types.Character();
    let isobjecttitlealwaysvisible = INPUT?.isobjecttitlealwaysvisible || new abap.types.Character();
    let markchanges = INPUT?.markchanges || new abap.types.Character();
    let markfavorite = INPUT?.markfavorite || new abap.types.Character();
    let markflagged = INPUT?.markflagged || new abap.types.Character();
    let marklocked = INPUT?.marklocked || new abap.types.Character();
    let objectimagealt = INPUT?.objectimagealt || new abap.types.Character();
    let objectimagebackgroundcolor = INPUT?.objectimagebackgroundcolor || new abap.types.Character();
    let objectimagedensityaware = INPUT?.objectimagedensityaware || new abap.types.Character();
    let objectimageshape = INPUT?.objectimageshape || new abap.types.Character();
    let objectimageuri = INPUT?.objectimageuri || new abap.types.Character();
    let objectsubtitle = INPUT?.objectsubtitle || new abap.types.Character();
    let objecttitle = INPUT?.objecttitle || new abap.types.Character();
    let showmarkers = INPUT?.showmarkers || new abap.types.Character();
    let showplaceholder = INPUT?.showplaceholder || new abap.types.Character();
    let showtitleselector = INPUT?.showtitleselector || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let markchangespress = INPUT?.markchangespress || new abap.types.Character();
    let marklockedpress = INPUT?.marklockedpress || new abap.types.Character();
    let titleselectorpress = INPUT?.titleselectorpress || new abap.types.Character();
    let temp314 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp315 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp314);
    temp315.get().n.set(new abap.types.String().set(`isActionAreaAlwaysVisible`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isactionareaalwaysvisible})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`isObjectIconAlwaysVisible`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isobjecticonalwaysvisible})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`isObjectSubtitleAlwaysVisible`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isobjectsubtitlealwaysvisible})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`isObjectTitleAlwaysVisible`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: isobjecttitlealwaysvisible})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markChanges`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: markchanges})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markFavorite`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: markfavorite})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markFlagged`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: markflagged})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markLocked`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: marklocked})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectImageDensityAware`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: objectimagedensityaware})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`showMarkers`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showmarkers})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`showPlaceholder`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showplaceholder})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`showTitleSelector`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitleselector})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`visible`));
    temp315.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectImageAlt`));
    temp315.get().v.set(objectimagealt);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectImageBackgroundColor`));
    temp315.get().v.set(objectimagebackgroundcolor);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectImageURI`));
    temp315.get().v.set(objectimageuri);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectSubtitle`));
    temp315.get().v.set(objectsubtitle);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectTitle`));
    temp315.get().v.set(objecttitle);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markChangesPress`));
    temp315.get().v.set(markchangespress);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`markLockedPress`));
    temp315.get().v.set(marklockedpress);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`titleSelectorPress`));
    temp315.get().v.set(titleselectorpress);
    abap.statements.insertInternal({data: temp315, table: temp314});
    temp315.get().n.set(new abap.types.String().set(`objectImageShape`));
    temp315.get().v.set(objectimageshape);
    abap.statements.insertInternal({data: temp315, table: temp314});
    await this._generic({name: new abap.types.String().set(`ObjectPageHeader`), ns: new abap.types.String().set(`uxap`), t_prop: temp314});
    return result;
  }
  async object_page_header_action_btn(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let hideicon = INPUT?.hideicon || new abap.types.Character();
    let hidetext = INPUT?.hidetext || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let iconfirst = INPUT?.iconfirst || new abap.types.Character();
    let importance = INPUT?.importance || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp316 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp317 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp316);
    temp317.get().n.set(new abap.types.String().set(`activeIcon`));
    temp317.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp317.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`icon`));
    temp317.get().v.set(icon);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`importance`));
    temp317.get().v.set(importance);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`text`));
    temp317.get().v.set(text);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`textDirection`));
    temp317.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`type`));
    temp317.get().v.set(type);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`width`));
    temp317.get().v.set(width);
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`enabled`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`hideIcon`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideicon})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`hideText`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hidetext})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`iconFirst`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconfirst})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`visible`));
    temp317.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp317, table: temp316});
    temp317.get().n.set(new abap.types.String().set(`press`));
    temp317.get().v.set(press);
    abap.statements.insertInternal({data: temp317, table: temp316});
    await this._generic({name: new abap.types.String().set(`ObjectPageHeaderActionButton`), ns: new abap.types.String().set(`uxap`), t_prop: temp316});
    return result;
  }
  async object_page_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let showtitleinheadercontent = INPUT?.showtitleinheadercontent || new abap.types.Character();
    let showeditheaderbutton = INPUT?.showeditheaderbutton || new abap.types.Character();
    let editheaderbuttonpress = INPUT?.editheaderbuttonpress || new abap.types.Character();
    let uppercaseanchorbar = INPUT?.uppercaseanchorbar || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let alwaysshowcontentheader = INPUT?.alwaysshowcontentheader || new abap.types.Character();
    let enablelazyloading = INPUT?.enablelazyloading || new abap.types.Character();
    let flexenabled = INPUT?.flexenabled || new abap.types.Character();
    let headercontentpinnable = INPUT?.headercontentpinnable || new abap.types.Character();
    let headercontentpinned = INPUT?.headercontentpinned || new abap.types.Character();
    let ischildpage = INPUT?.ischildpage || new abap.types.Character();
    let preserveheaderstateonscroll = INPUT?.preserveheaderstateonscroll || new abap.types.Character();
    let showanchorbar = INPUT?.showanchorbar || new abap.types.Character();
    let showanchorbarpopover = INPUT?.showanchorbarpopover || new abap.types.Character();
    let showheadercontent = INPUT?.showheadercontent || new abap.types.Character();
    let showonlyhighimportance = INPUT?.showonlyhighimportance || new abap.types.Character();
    let subsectionlayout = INPUT?.subsectionlayout || new abap.types.Character();
    let toggleheaderontitleclick = INPUT?.toggleheaderontitleclick || new abap.types.Character();
    let useicontabbar = INPUT?.useicontabbar || new abap.types.Character();
    let usetwocolumnsforlargescreen = INPUT?.usetwocolumnsforlargescreen || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let backgrounddesignanchorbar = INPUT?.backgrounddesignanchorbar || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let sectiontitlelevel = INPUT?.sectiontitlelevel || new abap.types.Character();
    let beforenavigate = INPUT?.beforenavigate || new abap.types.Character();
    let headercontentpinnedstatechange = INPUT?.headercontentpinnedstatechange || new abap.types.Character();
    let navigate = INPUT?.navigate || new abap.types.Character();
    let sectionchange = INPUT?.sectionchange || new abap.types.Character();
    let subsectionvisibilitychange = INPUT?.subsectionvisibilitychange || new abap.types.Character();
    let toggleanchorbar = INPUT?.toggleanchorbar || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp318 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp319 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp318);
    temp319.get().n.set(new abap.types.String().set(`showTitleInHeaderContent`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitleinheadercontent})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showEditHeaderButton`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showeditheaderbutton})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`alwaysShowContentHeader`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: alwaysshowcontentheader})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`enableLazyLoading`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablelazyloading})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`flexEnabled`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: flexenabled})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`headerContentPinnable`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: headercontentpinnable})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`headerContentPinned`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: headercontentpinned})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`isChildPage`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: ischildpage})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`preserveHeaderStateOnScroll`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: preserveheaderstateonscroll})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showAnchorBar`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showanchorbar})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showAnchorBarPopover`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showanchorbarpopover})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showHeaderContent`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showheadercontent})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showOnlyHighImportance`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showonlyhighimportance})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`subSectionLayout`));
    temp319.get().v.set(subsectionlayout);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`toggleHeaderOnTitleClick`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: toggleheaderontitleclick})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`useIconTabBar`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: useicontabbar})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`useTwoColumnsForLargeScreen`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usetwocolumnsforlargescreen})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`visible`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`backgroundDesignAnchorBar`));
    temp319.get().v.set(backgrounddesignanchorbar);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`height`));
    temp319.get().v.set(height);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`sectionTitleLevel`));
    temp319.get().v.set(sectiontitlelevel);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`editHeaderButtonPress`));
    temp319.get().v.set(editheaderbuttonpress);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`upperCaseAnchorBar`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: uppercaseanchorbar})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`beforeNavigate`));
    temp319.get().v.set(beforenavigate);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`headerContentPinnedStateChange`));
    temp319.get().v.set(headercontentpinnedstatechange);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`navigate`));
    temp319.get().v.set(navigate);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`sectionChange`));
    temp319.get().v.set(sectionchange);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`subSectionVisibilityChange`));
    temp319.get().v.set(subsectionvisibilitychange);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`toggleAnchorBar`));
    temp319.get().v.set(toggleanchorbar);
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`showFooter`));
    temp319.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp319, table: temp318});
    temp319.get().n.set(new abap.types.String().set(`class`));
    temp319.get().v.set($class);
    abap.statements.insertInternal({data: temp319, table: temp318});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectPageLayout`), ns: new abap.types.String().set(`uxap`), t_prop: temp318})));
    return result;
  }
  async object_page_section(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let titleuppercase = INPUT?.titleuppercase || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let importance = INPUT?.importance || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let showtitle = INPUT?.showtitle || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let wraptitle = INPUT?.wraptitle || new abap.types.Character();
    let anchorbarbuttoncolor = INPUT?.anchorbarbuttoncolor || new abap.types.Character();
    let titlevisible = INPUT?.titlevisible || new abap.types.Character();
    let temp320 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp321 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp320);
    temp321.get().n.set(new abap.types.String().set(`titleUppercase`));
    temp321.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: titleuppercase})));
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`title`));
    temp321.get().v.set(title);
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`id`));
    temp321.get().v.set(id);
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`anchorBarButtonColor`));
    temp321.get().v.set(anchorbarbuttoncolor);
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`titleLevel`));
    temp321.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`titleVisible`));
    temp321.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: titlevisible})));
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`showTitle`));
    temp321.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitle})));
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`visible`));
    temp321.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`wrapTitle`));
    temp321.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wraptitle})));
    abap.statements.insertInternal({data: temp321, table: temp320});
    temp321.get().n.set(new abap.types.String().set(`importance`));
    temp321.get().v.set(importance);
    abap.statements.insertInternal({data: temp321, table: temp320});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectPageSection`), ns: new abap.types.String().set(`uxap`), t_prop: temp320})));
    return result;
  }
  async object_page_sub_section(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let importance = INPUT?.importance || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let showtitle = INPUT?.showtitle || new abap.types.Character();
    let titleuppercase = INPUT?.titleuppercase || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let titlevisible = INPUT?.titlevisible || new abap.types.Character();
    let temp322 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp323 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp322);
    temp323.get().n.set(new abap.types.String().set(`id`));
    temp323.get().v.set(id);
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`mode`));
    temp323.get().v.set(mode);
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`importance`));
    temp323.get().v.set(importance);
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`titleLevel`));
    temp323.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`titleVisible`));
    temp323.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: titlevisible})));
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`showTitle`));
    temp323.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitle})));
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`titleUppercase`));
    temp323.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: titleuppercase})));
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`visible`));
    temp323.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp323, table: temp322});
    temp323.get().n.set(new abap.types.String().set(`title`));
    temp323.get().v.set(title);
    abap.statements.insertInternal({data: temp323, table: temp322});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectPageSubSection`), ns: new abap.types.String().set(`uxap`), t_prop: temp322})));
    return result;
  }
  async object_status(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let active = INPUT?.active || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let icondensityaware = INPUT?.icondensityaware || new abap.types.Character();
    let inverted = INPUT?.inverted || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let stateannouncementtext = INPUT?.stateannouncementtext || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp324 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp325 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp324);
    temp325.get().n.set(new abap.types.String().set(`active`));
    temp325.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp325.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`icon`));
    temp325.get().v.set(icon);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`iconDensityAware`));
    temp325.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: icondensityaware})));
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`inverted`));
    temp325.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inverted})));
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`state`));
    temp325.get().v.set(state);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`stateAnnouncementText`));
    temp325.get().v.set(stateannouncementtext);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`text`));
    temp325.get().v.set(text);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`id`));
    temp325.get().v.set(id);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`class`));
    temp325.get().v.set($class);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`textDirection`));
    temp325.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`title`));
    temp325.get().v.set(title);
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`visible`));
    temp325.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp325, table: temp324});
    temp325.get().n.set(new abap.types.String().set(`press`));
    temp325.get().v.set(press);
    abap.statements.insertInternal({data: temp325, table: temp324});
    result.set((await this._generic({name: new abap.types.String().set(`ObjectStatus`), t_prop: temp324})));
    return result;
  }
  async overflow_toolbar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let press = INPUT?.press || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let active = INPUT?.active || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let asyncmode = INPUT?.asyncmode || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let style = INPUT?.style || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp326 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp327 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp326);
    temp327.get().n.set(new abap.types.String().set(`press`));
    temp327.get().v.set(press);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`text`));
    temp327.get().v.set(text);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`active`));
    temp327.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`visible`));
    temp327.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`asyncMode`));
    temp327.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: asyncmode})));
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`enabled`));
    temp327.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`design`));
    temp327.get().v.set(design);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`type`));
    temp327.get().v.set(type);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`style`));
    temp327.get().v.set(style);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`id`));
    temp327.get().v.set(id);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`class`));
    temp327.get().v.set($class);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`width`));
    temp327.get().v.set(width);
    abap.statements.insertInternal({data: temp327, table: temp326});
    temp327.get().n.set(new abap.types.String().set(`height`));
    temp327.get().v.set(height);
    abap.statements.insertInternal({data: temp327, table: temp326});
    result.set((await this._generic({name: new abap.types.String().set(`OverflowToolbar`), t_prop: temp326})));
    return result;
  }
  async overflow_toolbar_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let temp328 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp329 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp328);
    temp329.get().n.set(new abap.types.String().set(`id`));
    temp329.get().v.set(id);
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`press`));
    temp329.get().v.set(press);
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`text`));
    temp329.get().v.set(text);
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`enabled`));
    temp329.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`icon`));
    temp329.get().v.set(icon);
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`type`));
    temp329.get().v.set(type);
    abap.statements.insertInternal({data: temp329, table: temp328});
    temp329.get().n.set(new abap.types.String().set(`tooltip`));
    temp329.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp329, table: temp328});
    await this._generic({name: new abap.types.String().set(`OverflowToolbarButton`), t_prop: temp328});
    return result;
  }
  async overflow_toolbar_menu_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let buttonmode = INPUT?.buttonmode || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let defaultaction = INPUT?.defaultaction || new abap.types.Character();
    let temp330 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp331 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp330);
    temp331.get().n.set(new abap.types.String().set(`buttonMode`));
    temp331.get().v.set(buttonmode);
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`defaultAction`));
    temp331.get().v.set(defaultaction);
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`text`));
    temp331.get().v.set(text);
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`enabled`));
    temp331.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`icon`));
    temp331.get().v.set(icon);
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`type`));
    temp331.get().v.set(type);
    abap.statements.insertInternal({data: temp331, table: temp330});
    temp331.get().n.set(new abap.types.String().set(`tooltip`));
    temp331.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp331, table: temp330});
    result.set((await this._generic({name: new abap.types.String().set(`OverflowToolbarMenuButton`), t_prop: temp330})));
    return result;
  }
  async overflow_toolbar_toggle_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let temp332 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp333 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp332);
    temp333.get().n.set(new abap.types.String().set(`press`));
    temp333.get().v.set(press);
    abap.statements.insertInternal({data: temp333, table: temp332});
    temp333.get().n.set(new abap.types.String().set(`text`));
    temp333.get().v.set(text);
    abap.statements.insertInternal({data: temp333, table: temp332});
    temp333.get().n.set(new abap.types.String().set(`enabled`));
    temp333.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp333, table: temp332});
    temp333.get().n.set(new abap.types.String().set(`icon`));
    temp333.get().v.set(icon);
    abap.statements.insertInternal({data: temp333, table: temp332});
    temp333.get().n.set(new abap.types.String().set(`type`));
    temp333.get().v.set(type);
    abap.statements.insertInternal({data: temp333, table: temp332});
    temp333.get().n.set(new abap.types.String().set(`tooltip`));
    temp333.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp333, table: temp332});
    await this._generic({name: new abap.types.String().set(`OverflowToolbarToggleButton`), t_prop: temp332});
    return result;
  }
  async page(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let navbuttonpress = INPUT?.navbuttonpress || new abap.types.Character();
    let shownavbutton = INPUT?.shownavbutton || new abap.types.Character();
    let showheader = INPUT?.showheader || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let ns = INPUT?.ns || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let contentonlybusy = INPUT?.contentonlybusy || new abap.types.Character();
    let enablescrolling = INPUT?.enablescrolling || new abap.types.Character();
    let navbuttontooltip = INPUT?.navbuttontooltip || new abap.types.Character();
    let floatingfooter = INPUT?.floatingfooter || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let showsubheader = INPUT?.showsubheader || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let titlelevel = INPUT?.titlelevel || new abap.types.Character();
    let temp334 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp335 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp334);
    temp335.get().n.set(new abap.types.String().set(`title`));
    temp335.get().v.set(title);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`showNavButton`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownavbutton})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`navButtonPress`));
    temp335.get().v.set(navbuttonpress);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`showHeader`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showheader})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`class`));
    temp335.get().v.set($class);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp335.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`navButtonTooltip`));
    temp335.get().v.set(navbuttontooltip);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp335.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`titleLevel`));
    temp335.get().v.set(titlelevel);
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`contentOnlyBusy`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: contentonlybusy})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`enableScrolling`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablescrolling})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`floatingFooter`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: floatingfooter})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`showFooter`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`showSubHeader`));
    temp335.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsubheader})));
    abap.statements.insertInternal({data: temp335, table: temp334});
    temp335.get().n.set(new abap.types.String().set(`id`));
    temp335.get().v.set(id);
    abap.statements.insertInternal({data: temp335, table: temp334});
    result.set((await this._generic({name: new abap.types.String().set(`Page`), ns: ns, t_prop: temp334})));
    return result;
  }
  async pages() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`pages`)})));
    return result;
  }
  async paging_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let count = INPUT?.count || new abap.types.Character();
    let nextbuttontooltip = INPUT?.nextbuttontooltip || new abap.types.Character();
    let previousbuttontooltip = INPUT?.previousbuttontooltip || new abap.types.Character();
    let position = INPUT?.position || new abap.types.Character();
    let temp336 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp337 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp336);
    temp337.get().n.set(new abap.types.String().set(`count`));
    temp337.get().v.set(count);
    abap.statements.insertInternal({data: temp337, table: temp336});
    temp337.get().n.set(new abap.types.String().set(`nextButtonTooltip`));
    temp337.get().v.set(nextbuttontooltip);
    abap.statements.insertInternal({data: temp337, table: temp336});
    temp337.get().n.set(new abap.types.String().set(`position`));
    temp337.get().v.set(position);
    abap.statements.insertInternal({data: temp337, table: temp336});
    temp337.get().n.set(new abap.types.String().set(`previousButtonTooltip`));
    temp337.get().v.set(previousbuttontooltip);
    abap.statements.insertInternal({data: temp337, table: temp336});
    await this._generic({name: new abap.types.String().set(`PagingButton`), t_prop: temp336});
    return result;
  }
  async panel(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let expandable = INPUT?.expandable || new abap.types.Character();
    let expanded = INPUT?.expanded || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let stickyheader = INPUT?.stickyheader || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let expandanimation = INPUT?.expandanimation || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let expand = INPUT?.expand || new abap.types.Character();
    let temp338 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp339 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp338);
    temp339.get().n.set(new abap.types.String().set(`expandable`));
    temp339.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expandable})));
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`expanded`));
    temp339.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expanded})));
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`stickyHeader`));
    temp339.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: stickyheader})));
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`expandAnimation`));
    temp339.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expandanimation})));
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`visible`));
    temp339.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`height`));
    temp339.get().v.set(height);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp339.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`width`));
    temp339.get().v.set(width);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`id`));
    temp339.get().v.set(id);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`class`));
    temp339.get().v.set($class);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`expand`));
    temp339.get().v.set(expand);
    abap.statements.insertInternal({data: temp339, table: temp338});
    temp339.get().n.set(new abap.types.String().set(`headerText`));
    temp339.get().v.set(headertext);
    abap.statements.insertInternal({data: temp339, table: temp338});
    result.set((await this._generic({name: new abap.types.String().set(`Panel`), t_prop: temp338})));
    return result;
  }
  async pane_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let resize = INPUT?.resize || new abap.types.Character();
    let orientation = INPUT?.orientation || new abap.types.Character();
    let temp340 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp341 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp340);
    temp341.get().n.set(new abap.types.String().set(`resize`));
    temp341.get().v.set(resize);
    abap.statements.insertInternal({data: temp341, table: temp340});
    temp341.get().n.set(new abap.types.String().set(`orientation`));
    temp341.get().v.set(orientation);
    abap.statements.insertInternal({data: temp341, table: temp340});
    result.set((await this._generic({name: new abap.types.String().set(`PaneContainer`), ns: new abap.types.String().set(`layout`), t_prop: temp340})));
    return result;
  }
  async planning_calendar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let rows = INPUT?.rows || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let startdate = INPUT?.startdate || new abap.types.Character();
    let appointmentsvisualization = INPUT?.appointmentsvisualization || new abap.types.Character();
    let appointmentselect = INPUT?.appointmentselect || new abap.types.Character();
    let showemptyintervalheaders = INPUT?.showemptyintervalheaders || new abap.types.Character();
    let showweeknumbers = INPUT?.showweeknumbers || new abap.types.Character();
    let showdaynamesline = INPUT?.showdaynamesline || new abap.types.Character();
    let legend = INPUT?.legend || new abap.types.Character();
    let appointmentheight = INPUT?.appointmentheight || new abap.types.Character();
    let appointmentroundwidth = INPUT?.appointmentroundwidth || new abap.types.Character();
    let builtinviews = INPUT?.builtinviews || new abap.types.Character();
    let calendarweeknumbering = INPUT?.calendarweeknumbering || new abap.types.Character();
    let firstdayofweek = INPUT?.firstdayofweek || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let groupappointmentsmode = INPUT?.groupappointmentsmode || new abap.types.Character();
    let iconshape = INPUT?.iconshape || new abap.types.Character();
    let maxdate = INPUT?.maxdate || new abap.types.Character();
    let mindate = INPUT?.mindate || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let primarycalendartype = INPUT?.primarycalendartype || new abap.types.Character();
    let secondarycalendartype = INPUT?.secondarycalendartype || new abap.types.Character();
    let intervalselect = INPUT?.intervalselect || new abap.types.Character();
    let rowheaderpress = INPUT?.rowheaderpress || new abap.types.Character();
    let rowselectionchange = INPUT?.rowselectionchange || new abap.types.Character();
    let startdatechange = INPUT?.startdatechange || new abap.types.Character();
    let viewchange = INPUT?.viewchange || new abap.types.Character();
    let stickyheader = INPUT?.stickyheader || new abap.types.Character();
    let viewkey = INPUT?.viewkey || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let singleselection = INPUT?.singleselection || new abap.types.Character();
    let showrowheaders = INPUT?.showrowheaders || new abap.types.Character();
    let multipleappointmentsselection = INPUT?.multipleappointmentsselection || new abap.types.Character();
    let showintervalheaders = INPUT?.showintervalheaders || new abap.types.Character();
    let temp342 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp343 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp342);
    temp343.get().n.set(new abap.types.String().set(`rows`));
    temp343.get().v.set(rows);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`startDate`));
    temp343.get().v.set(startdate);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`id`));
    temp343.get().v.set(id);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`class`));
    temp343.get().v.set($class);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`appointmentHeight`));
    temp343.get().v.set(appointmentheight);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`appointmentRoundWidth`));
    temp343.get().v.set(appointmentroundwidth);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`builtInViews`));
    temp343.get().v.set(builtinviews);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`calendarWeekNumbering`));
    temp343.get().v.set(calendarweeknumbering);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`firstDayOfWeek`));
    temp343.get().v.set(firstdayofweek);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`groupAppointmentsMode`));
    temp343.get().v.set(groupappointmentsmode);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`height`));
    temp343.get().v.set(height);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`iconShape`));
    temp343.get().v.set(iconshape);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`maxDate`));
    temp343.get().v.set(maxdate);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`minDate`));
    temp343.get().v.set(mindate);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`noDataText`));
    temp343.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`primaryCalendarType`));
    temp343.get().v.set(primarycalendartype);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`secondaryCalendarType`));
    temp343.get().v.set(secondarycalendartype);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`appointmentsVisualization`));
    temp343.get().v.set(appointmentsvisualization);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`appointmentSelect`));
    temp343.get().v.set(appointmentselect);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`intervalSelect`));
    temp343.get().v.set(intervalselect);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`rowHeaderPress`));
    temp343.get().v.set(rowheaderpress);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`rowSelectionChange`));
    temp343.get().v.set(rowselectionchange);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`startDateChange`));
    temp343.get().v.set(startdatechange);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`viewChange`));
    temp343.get().v.set(viewchange);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`stickyHeader`));
    temp343.get().v.set(stickyheader);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`viewKey`));
    temp343.get().v.set(viewkey);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`width`));
    temp343.get().v.set(width);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`singleSelection`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: singleselection})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`showRowHeaders`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showrowheaders})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`multipleAppointmentsSelection`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: multipleappointmentsselection})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`showIntervalHeaders`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showintervalheaders})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`showEmptyIntervalHeaders`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showemptyintervalheaders})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`showWeekNumbers`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showweeknumbers})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`legend`));
    temp343.get().v.set(legend);
    abap.statements.insertInternal({data: temp343, table: temp342});
    temp343.get().n.set(new abap.types.String().set(`showDayNamesLine`));
    temp343.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showdaynamesline})));
    abap.statements.insertInternal({data: temp343, table: temp342});
    result.set((await this._generic({name: new abap.types.String().set(`PlanningCalendar`), t_prop: temp342})));
    return result;
  }
  async planning_calendar_legend(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let items = INPUT?.items || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let appointmentitems = INPUT?.appointmentitems || new abap.types.Character();
    let standarditems = INPUT?.standarditems || new abap.types.Character();
    let columnwidth = INPUT?.columnwidth || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp344 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp345 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp344);
    temp345.get().n.set(new abap.types.String().set(`id`));
    temp345.get().v.set(id);
    abap.statements.insertInternal({data: temp345, table: temp344});
    temp345.get().n.set(new abap.types.String().set(`items`));
    temp345.get().v.set(items);
    abap.statements.insertInternal({data: temp345, table: temp344});
    temp345.get().n.set(new abap.types.String().set(`appointmentItems`));
    temp345.get().v.set(appointmentitems);
    abap.statements.insertInternal({data: temp345, table: temp344});
    temp345.get().n.set(new abap.types.String().set(`columnWidth`));
    temp345.get().v.set(columnwidth);
    abap.statements.insertInternal({data: temp345, table: temp344});
    temp345.get().n.set(new abap.types.String().set(`visible`));
    temp345.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp345, table: temp344});
    temp345.get().n.set(new abap.types.String().set(`standardItems`));
    temp345.get().v.set(standarditems);
    abap.statements.insertInternal({data: temp345, table: temp344});
    result.set((await this._generic({name: new abap.types.String().set(`PlanningCalendarLegend`), t_prop: temp344})));
    return result;
  }
  async planning_calendar_row(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let appointments = INPUT?.appointments || new abap.types.Character();
    let intervalheaders = INPUT?.intervalheaders || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let enableappointmentscreate = INPUT?.enableappointmentscreate || new abap.types.Character();
    let enableappointmentsdraganddrop = INPUT?.enableappointmentsdraganddrop || new abap.types.Character();
    let enableappointmentsresize = INPUT?.enableappointmentsresize || new abap.types.Character();
    let noappointmentstext = INPUT?.noappointmentstext || new abap.types.Character();
    let nonworkinghours = INPUT?.nonworkinghours || new abap.types.Character();
    let rowheaderdescription = INPUT?.rowheaderdescription || new abap.types.Character();
    let nonworkingdays = INPUT?.nonworkingdays || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let appointmentcreate = INPUT?.appointmentcreate || new abap.types.Character();
    let appointmentdragenter = INPUT?.appointmentdragenter || new abap.types.Character();
    let appointmentdrop = INPUT?.appointmentdrop || new abap.types.Character();
    let appointmentresize = INPUT?.appointmentresize || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp346 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp347 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp346);
    temp347.get().n.set(new abap.types.String().set(`appointments`));
    temp347.get().v.set(appointments);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`intervalHeaders`));
    temp347.get().v.set(intervalheaders);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`id`));
    temp347.get().v.set(id);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`class`));
    temp347.get().v.set($class);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`icon`));
    temp347.get().v.set(icon);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`title`));
    temp347.get().v.set(title);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`key`));
    temp347.get().v.set(key);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`noAppointmentsText`));
    temp347.get().v.set(noappointmentstext);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`nonWorkingHours`));
    temp347.get().v.set(nonworkinghours);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`rowHeaderDescription`));
    temp347.get().v.set(rowheaderdescription);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`nonworkingdays`));
    temp347.get().v.set(nonworkingdays);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`enableAppointmentsCreate`));
    temp347.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableappointmentscreate})));
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`appointmentResize`));
    temp347.get().v.set(appointmentresize);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`appointmentDrop`));
    temp347.get().v.set(appointmentdrop);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`appointmentDragEnter`));
    temp347.get().v.set(appointmentdragenter);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`appointmentCreate`));
    temp347.get().v.set(appointmentcreate);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`selected`));
    temp347.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`nonWorkingDays`));
    temp347.get().v.set(nonworkingdays);
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`enableAppointmentsResize`));
    temp347.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableappointmentsresize})));
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`enableAppointmentsDragAndDrop`));
    temp347.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableappointmentsdraganddrop})));
    abap.statements.insertInternal({data: temp347, table: temp346});
    temp347.get().n.set(new abap.types.String().set(`text`));
    temp347.get().v.set(text);
    abap.statements.insertInternal({data: temp347, table: temp346});
    result.set((await this._generic({name: new abap.types.String().set(`PlanningCalendarRow`), t_prop: temp346})));
    return result;
  }
  async planning_calendar_view(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let appointmentheight = INPUT?.appointmentheight || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let intervallabelformatter = INPUT?.intervallabelformatter || new abap.types.Character();
    let intervalsize = INPUT?.intervalsize || new abap.types.Character();
    let intervalsl = INPUT?.intervalsl || new abap.types.Character();
    let intervalsm = INPUT?.intervalsm || new abap.types.Character();
    let intervalss = INPUT?.intervalss || new abap.types.Character();
    let intervaltype = INPUT?.intervaltype || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let relative = INPUT?.relative || new abap.types.Character();
    let showsubintervals = INPUT?.showsubintervals || new abap.types.Character();
    let temp348 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp349 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp348);
    temp349.get().n.set(new abap.types.String().set(`appointmentHeight`));
    temp349.get().v.set(appointmentheight);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`description`));
    temp349.get().v.set(description);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalLabelFormatter`));
    temp349.get().v.set(intervallabelformatter);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalSize`));
    temp349.get().v.set(intervalsize);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalsL`));
    temp349.get().v.set(intervalsl);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalsM`));
    temp349.get().v.set(intervalsm);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalsS`));
    temp349.get().v.set(intervalss);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`intervalType`));
    temp349.get().v.set(intervaltype);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`key`));
    temp349.get().v.set(key);
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`relative`));
    temp349.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: relative})));
    abap.statements.insertInternal({data: temp349, table: temp348});
    temp349.get().n.set(new abap.types.String().set(`showSubIntervals`));
    temp349.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsubintervals})));
    abap.statements.insertInternal({data: temp349, table: temp348});
    result.set((await this._generic({name: new abap.types.String().set(`PlanningCalendarView`), t_prop: temp348})));
    return result;
  }
  async points() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`points`), ns: new abap.types.String().set(`mchart`)})));
    return result;
  }
  async popover(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let placement = INPUT?.placement || new abap.types.Character();
    let initialfocus = INPUT?.initialfocus || new abap.types.Character();
    let contentwidth = INPUT?.contentwidth || new abap.types.Character();
    let contentheight = INPUT?.contentheight || new abap.types.Character();
    let showheader = INPUT?.showheader || new abap.types.Character();
    let showarrow = INPUT?.showarrow || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let modal = INPUT?.modal || new abap.types.Character();
    let horizontalscrolling = INPUT?.horizontalscrolling || new abap.types.Character();
    let verticalscrolling = INPUT?.verticalscrolling || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let offsetx = INPUT?.offsetx || new abap.types.Character();
    let offsety = INPUT?.offsety || new abap.types.Character();
    let contentminwidth = INPUT?.contentminwidth || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let beforeopen = INPUT?.beforeopen || new abap.types.Character();
    let beforeclose = INPUT?.beforeclose || new abap.types.Character();
    let afteropen = INPUT?.afteropen || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let temp350 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp351 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp350);
    temp351.get().n.set(new abap.types.String().set(`title`));
    temp351.get().v.set(title);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`class`));
    temp351.get().v.set($class);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`placement`));
    temp351.get().v.set(placement);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`initialFocus`));
    temp351.get().v.set(initialfocus);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`contentHeight`));
    temp351.get().v.set(contentheight);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`showHeader`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showheader})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`showArrow`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showarrow})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`resizable`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`modal`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: modal})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`horizontalScrolling`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: horizontalscrolling})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`verticalScrolling`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: verticalscrolling})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`visible`));
    temp351.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`offsetX`));
    temp351.get().v.set(offsetx);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`offsetY`));
    temp351.get().v.set(offsety);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`contentMinWidth`));
    temp351.get().v.set(contentminwidth);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp351.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`contentWidth`));
    temp351.get().v.set(contentwidth);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`afterClose`));
    temp351.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`afterOpen`));
    temp351.get().v.set(afteropen);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`beforeClose`));
    temp351.get().v.set(beforeclose);
    abap.statements.insertInternal({data: temp351, table: temp350});
    temp351.get().n.set(new abap.types.String().set(`beforeOpen`));
    temp351.get().v.set(beforeopen);
    abap.statements.insertInternal({data: temp351, table: temp350});
    result.set((await this._generic({name: new abap.types.String().set(`Popover`), t_prop: temp350})));
    return result;
  }
  async process_flow(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let foldedcorners = INPUT?.foldedcorners || new abap.types.Character();
    let scrollable = INPUT?.scrollable || new abap.types.Character();
    let showlabels = INPUT?.showlabels || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let wheelzoomable = INPUT?.wheelzoomable || new abap.types.Character();
    let headerpress = INPUT?.headerpress || new abap.types.Character();
    let labelpress = INPUT?.labelpress || new abap.types.Character();
    let nodepress = INPUT?.nodepress || new abap.types.Character();
    let onerror = INPUT?.onerror || new abap.types.Character();
    let lanes = INPUT?.lanes || new abap.types.Character();
    let nodes = INPUT?.nodes || new abap.types.Character();
    let temp352 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp353 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp352);
    temp353.get().n.set(new abap.types.String().set(`id`));
    temp353.get().v.set(id);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`foldedCorners`));
    temp353.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: foldedcorners})));
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`scrollable`));
    temp353.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: scrollable})));
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`showLabels`));
    temp353.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showlabels})));
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`visible`));
    temp353.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`wheelZoomable`));
    temp353.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wheelzoomable})));
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`headerPress`));
    temp353.get().v.set(headerpress);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`labelPress`));
    temp353.get().v.set(labelpress);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`nodePress`));
    temp353.get().v.set(nodepress);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`onError`));
    temp353.get().v.set(onerror);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`lanes`));
    temp353.get().v.set(lanes);
    abap.statements.insertInternal({data: temp353, table: temp352});
    temp353.get().n.set(new abap.types.String().set(`nodes`));
    temp353.get().v.set(nodes);
    abap.statements.insertInternal({data: temp353, table: temp352});
    result.set((await this._generic({name: new abap.types.String().set(`ProcessFlow`), ns: new abap.types.Character(7).set('commons'), t_prop: temp352})));
    return result;
  }
  async process_flow_lane_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let iconsrc = INPUT?.iconsrc || new abap.types.Character();
    let laneid = INPUT?.laneid || new abap.types.Character();
    let position = INPUT?.position || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let zoomlevel = INPUT?.zoomlevel || new abap.types.Character();
    let temp354 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp355 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp354);
    temp355.get().n.set(new abap.types.String().set(`iconSrc`));
    temp355.get().v.set(iconsrc);
    abap.statements.insertInternal({data: temp355, table: temp354});
    temp355.get().n.set(new abap.types.String().set(`laneId`));
    temp355.get().v.set(laneid);
    abap.statements.insertInternal({data: temp355, table: temp354});
    temp355.get().n.set(new abap.types.String().set(`position`));
    temp355.get().v.set(position);
    abap.statements.insertInternal({data: temp355, table: temp354});
    temp355.get().n.set(new abap.types.String().set(`state`));
    temp355.get().v.set(state);
    abap.statements.insertInternal({data: temp355, table: temp354});
    temp355.get().n.set(new abap.types.String().set(`text`));
    temp355.get().v.set(text);
    abap.statements.insertInternal({data: temp355, table: temp354});
    temp355.get().n.set(new abap.types.String().set(`zoomLevel`));
    temp355.get().v.set(zoomlevel);
    abap.statements.insertInternal({data: temp355, table: temp354});
    result.set((await this._generic({name: new abap.types.String().set(`ProcessFlowLaneHeader`), ns: new abap.types.Character(7).set('commons'), t_prop: temp354})));
    return result;
  }
  async process_flow_node(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let laneid = INPUT?.laneid || new abap.types.Character();
    let nodeid = INPUT?.nodeid || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titleabbreviation = INPUT?.titleabbreviation || new abap.types.Character();
    let children = INPUT?.children || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let statetext = INPUT?.statetext || new abap.types.Character();
    let texts = INPUT?.texts || new abap.types.Character();
    let highlighted = INPUT?.highlighted || new abap.types.Character();
    let focused = INPUT?.focused || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let tag = INPUT?.tag || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let temp356 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp357 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp356);
    temp357.get().n.set(new abap.types.String().set(`laneId`));
    temp357.get().v.set(laneid);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`nodeId`));
    temp357.get().v.set(nodeid);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`title`));
    temp357.get().v.set(title);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`titleAbbreviation`));
    temp357.get().v.set(titleabbreviation);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`children`));
    temp357.get().v.set(children);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`state`));
    temp357.get().v.set(state);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`stateText`));
    temp357.get().v.set(statetext);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`texts`));
    temp357.get().v.set(texts);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`highlighted`));
    temp357.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: highlighted})));
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`focused`));
    temp357.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: focused})));
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`selected`));
    temp357.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`tag`));
    temp357.get().v.set(tag);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`texts`));
    temp357.get().v.set(texts);
    abap.statements.insertInternal({data: temp357, table: temp356});
    temp357.get().n.set(new abap.types.String().set(`type`));
    temp357.get().v.set(type);
    abap.statements.insertInternal({data: temp357, table: temp356});
    result.set((await this._generic({name: new abap.types.String().set(`ProcessFlowNode`), ns: new abap.types.Character(7).set('commons'), t_prop: temp356})));
    return result;
  }
  async progress_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let percentvalue = INPUT?.percentvalue || new abap.types.Character();
    let displayvalue = INPUT?.displayvalue || new abap.types.Character();
    let showvalue = INPUT?.showvalue || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp358 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp359 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp358);
    temp359.get().n.set(new abap.types.String().set(`class`));
    temp359.get().v.set($class);
    abap.statements.insertInternal({data: temp359, table: temp358});
    temp359.get().n.set(new abap.types.String().set(`percentValue`));
    temp359.get().v.set(percentvalue);
    abap.statements.insertInternal({data: temp359, table: temp358});
    temp359.get().n.set(new abap.types.String().set(`displayValue`));
    temp359.get().v.set(displayvalue);
    abap.statements.insertInternal({data: temp359, table: temp358});
    temp359.get().n.set(new abap.types.String().set(`showValue`));
    temp359.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvalue})));
    abap.statements.insertInternal({data: temp359, table: temp358});
    temp359.get().n.set(new abap.types.String().set(`visible`));
    temp359.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp359, table: temp358});
    temp359.get().n.set(new abap.types.String().set(`state`));
    temp359.get().v.set(state);
    abap.statements.insertInternal({data: temp359, table: temp358});
    await this._generic({name: new abap.types.String().set(`ProgressIndicator`), t_prop: temp358});
    return result;
  }
  async property_threshold(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let fillcolor = INPUT?.fillcolor || new abap.types.Character();
    let tovalue = INPUT?.tovalue || new abap.types.Character();
    let arialabel = INPUT?.arialabel || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp360 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp361 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp360);
    temp361.get().n.set(new abap.types.String().set(`id`));
    temp361.get().v.set(id);
    abap.statements.insertInternal({data: temp361, table: temp360});
    temp361.get().n.set(new abap.types.String().set(`class`));
    temp361.get().v.set($class);
    abap.statements.insertInternal({data: temp361, table: temp360});
    temp361.get().n.set(new abap.types.String().set(`ariaLabel`));
    temp361.get().v.set(arialabel);
    abap.statements.insertInternal({data: temp361, table: temp360});
    temp361.get().n.set(new abap.types.String().set(`fillColor`));
    temp361.get().v.set(fillcolor);
    abap.statements.insertInternal({data: temp361, table: temp360});
    temp361.get().n.set(new abap.types.String().set(`toValue`));
    temp361.get().v.set(tovalue);
    abap.statements.insertInternal({data: temp361, table: temp360});
    temp361.get().n.set(new abap.types.String().set(`visible`));
    temp361.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp361, table: temp360});
    result.set((await this._generic({name: new abap.types.String().set(`PropertyThreshold`), ns: new abap.types.String().set(`si`), t_prop: temp360})));
    return result;
  }
  async property_thresholds() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`propertyThresholds`), ns: new abap.types.String().set(`si`)})));
    return result;
  }
  async proportion_zoom_strategy(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let zoomlevel = INPUT?.zoomlevel || new abap.types.Character();
    let temp362 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp363 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp362);
    temp363.get().n.set(new abap.types.String().set(`zoomLevel`));
    temp363.get().v.set(zoomlevel);
    abap.statements.insertInternal({data: temp363, table: temp362});
    result.set((await this._generic({name: new abap.types.String().set(`ProportionZoomStrategy`), ns: new abap.types.String().set(`axistime`), t_prop: temp362})));
    return result;
  }
  async quick_view(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let placement = INPUT?.placement || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let afterclose = INPUT?.afterclose || new abap.types.Character();
    let afteropen = INPUT?.afteropen || new abap.types.Character();
    let beforeclose = INPUT?.beforeclose || new abap.types.Character();
    let beforeopen = INPUT?.beforeopen || new abap.types.Character();
    let temp364 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp365 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp364);
    temp365.get().n.set(new abap.types.String().set(`placement`));
    temp365.get().v.set(placement);
    abap.statements.insertInternal({data: temp365, table: temp364});
    temp365.get().n.set(new abap.types.String().set(`width`));
    temp365.get().v.set(width);
    abap.statements.insertInternal({data: temp365, table: temp364});
    temp365.get().n.set(new abap.types.String().set(`afterClose`));
    temp365.get().v.set(afterclose);
    abap.statements.insertInternal({data: temp365, table: temp364});
    temp365.get().n.set(new abap.types.String().set(`afterOpen`));
    temp365.get().v.set(afteropen);
    abap.statements.insertInternal({data: temp365, table: temp364});
    temp365.get().n.set(new abap.types.String().set(`beforeClose`));
    temp365.get().v.set(beforeclose);
    abap.statements.insertInternal({data: temp365, table: temp364});
    temp365.get().n.set(new abap.types.String().set(`beforeOpen`));
    temp365.get().v.set(beforeopen);
    abap.statements.insertInternal({data: temp365, table: temp364});
    result.set((await this._generic({name: new abap.types.String().set(`QuickView`), t_prop: temp364})));
    return result;
  }
  async quick_view_group(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let heading = INPUT?.heading || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp366 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp367 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp366);
    temp367.get().n.set(new abap.types.String().set(`heading`));
    temp367.get().v.set(heading);
    abap.statements.insertInternal({data: temp367, table: temp366});
    temp367.get().n.set(new abap.types.String().set(`visible`));
    temp367.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp367, table: temp366});
    result.set((await this._generic({name: new abap.types.String().set(`QuickViewGroup`), t_prop: temp366})));
    return result;
  }
  async quick_view_group_element(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let emailsubject = INPUT?.emailsubject || new abap.types.Character();
    let label = INPUT?.label || new abap.types.Character();
    let pagelinkid = INPUT?.pagelinkid || new abap.types.Character();
    let target = INPUT?.target || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let url = INPUT?.url || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp368 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp369 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp368);
    temp369.get().n.set(new abap.types.String().set(`emailSubject`));
    temp369.get().v.set(emailsubject);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`label`));
    temp369.get().v.set(label);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`pageLinkId`));
    temp369.get().v.set(pagelinkid);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`target`));
    temp369.get().v.set(target);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`type`));
    temp369.get().v.set(type);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`url`));
    temp369.get().v.set(url);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`value`));
    temp369.get().v.set(value);
    abap.statements.insertInternal({data: temp369, table: temp368});
    temp369.get().n.set(new abap.types.String().set(`visible`));
    temp369.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp369, table: temp368});
    result.set((await this._generic({name: new abap.types.String().set(`QuickViewGroupElement`), t_prop: temp368})));
    return result;
  }
  async quick_view_page(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let description = INPUT?.description || new abap.types.Character();
    let header = INPUT?.header || new abap.types.Character();
    let pageid = INPUT?.pageid || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titleurl = INPUT?.titleurl || new abap.types.Character();
    let temp370 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp371 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp370);
    temp371.get().n.set(new abap.types.String().set(`description`));
    temp371.get().v.set(description);
    abap.statements.insertInternal({data: temp371, table: temp370});
    temp371.get().n.set(new abap.types.String().set(`header`));
    temp371.get().v.set(header);
    abap.statements.insertInternal({data: temp371, table: temp370});
    temp371.get().n.set(new abap.types.String().set(`pageId`));
    temp371.get().v.set(pageid);
    abap.statements.insertInternal({data: temp371, table: temp370});
    temp371.get().n.set(new abap.types.String().set(`title`));
    temp371.get().v.set(title);
    abap.statements.insertInternal({data: temp371, table: temp370});
    temp371.get().n.set(new abap.types.String().set(`titleUrl`));
    temp371.get().v.set(titleurl);
    abap.statements.insertInternal({data: temp371, table: temp370});
    result.set((await this._generic({name: new abap.types.String().set(`QuickViewPage`), t_prop: temp370})));
    return result;
  }
  async quick_view_page_avatar() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`avatar`)})));
    return result;
  }
  async radial_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let size = INPUT?.size || new abap.types.Character();
    let percentage = INPUT?.percentage || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let valuecolor = INPUT?.valuecolor || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let temp372 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp373 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp372);
    temp373.get().n.set(new abap.types.String().set(`percentage`));
    temp373.get().v.set(percentage);
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`press`));
    temp373.get().v.set(press);
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`size`));
    temp373.get().v.set(size);
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`height`));
    temp373.get().v.set(height);
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`alignContent`));
    temp373.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp373.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp373, table: temp372});
    temp373.get().n.set(new abap.types.String().set(`valueColor`));
    temp373.get().v.set(valuecolor);
    abap.statements.insertInternal({data: temp373, table: temp372});
    await this._generic({name: new abap.types.String().set(`RadialMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp372});
    return result;
  }
  async radio_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let activehandling = INPUT?.activehandling || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let groupname = INPUT?.groupname || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let useentirewidth = INPUT?.useentirewidth || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let temp374 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp375 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp374);
    temp375.get().n.set(new abap.types.String().set(`id`));
    temp375.get().v.set(id);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`activeHandling`));
    temp375.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: activehandling})));
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`editable`));
    temp375.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`enabled`));
    temp375.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`selected`));
    temp375.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`useEntireWidth`));
    temp375.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: useentirewidth})));
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`text`));
    temp375.get().v.set(text);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`textDirection`));
    temp375.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`textAlign`));
    temp375.get().v.set(textalign);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`groupName`));
    temp375.get().v.set(groupname);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`valueState`));
    temp375.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`width`));
    temp375.get().v.set(width);
    abap.statements.insertInternal({data: temp375, table: temp374});
    temp375.get().n.set(new abap.types.String().set(`select`));
    temp375.get().v.set(select);
    abap.statements.insertInternal({data: temp375, table: temp374});
    result.set((await this._generic({name: new abap.types.String().set(`RadioButton`), t_prop: temp374})));
    return result;
  }
  async radio_button_group(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let columns = INPUT?.columns || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let selectedindex = INPUT?.selectedindex || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp376 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp377 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp376);
    temp377.get().n.set(new abap.types.String().set(`id`));
    temp377.get().v.set(id);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`columns`));
    temp377.get().v.set(columns);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`editable`));
    temp377.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`enabled`));
    temp377.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`selectedIndex`));
    temp377.get().v.set(selectedindex);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`textDirection`));
    temp377.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`valueState`));
    temp377.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`select`));
    temp377.get().v.set(select);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`width`));
    temp377.get().v.set(width);
    abap.statements.insertInternal({data: temp377, table: temp376});
    temp377.get().n.set(new abap.types.String().set(`class`));
    temp377.get().v.set($class);
    abap.statements.insertInternal({data: temp377, table: temp376});
    result.set((await this._generic({name: new abap.types.String().set(`RadioButtonGroup`), t_prop: temp376})));
    return result;
  }
  async range_slider(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let max = INPUT?.max || new abap.types.Character();
    let min = INPUT?.min || new abap.types.Character();
    let step = INPUT?.step || new abap.types.Character();
    let startvalue = INPUT?.startvalue || new abap.types.Character();
    let endvalue = INPUT?.endvalue || new abap.types.Character();
    let showtickmarks = INPUT?.showtickmarks || new abap.types.Character();
    let labelinterval = INPUT?.labelinterval || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let value2 = INPUT?.value2 || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let temp378 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp379 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp378);
    temp379.get().n.set(new abap.types.String().set(`class`));
    temp379.get().v.set($class);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`endValue`));
    temp379.get().v.set(endvalue);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`id`));
    temp379.get().v.set(id);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`labelInterval`));
    temp379.get().v.set(labelinterval);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`max`));
    temp379.get().v.set(max);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`min`));
    temp379.get().v.set(min);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`showTickmarks`));
    temp379.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtickmarks})));
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`startValue`));
    temp379.get().v.set(startvalue);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`step`));
    temp379.get().v.set(step);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`width`));
    temp379.get().v.set(width);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`value`));
    temp379.get().v.set(value);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`value2`));
    temp379.get().v.set(value2);
    abap.statements.insertInternal({data: temp379, table: temp378});
    temp379.get().n.set(new abap.types.String().set(`change`));
    temp379.get().v.set(change);
    abap.statements.insertInternal({data: temp379, table: temp378});
    await this._generic({name: new abap.types.String().set(`RangeSlider`), t_prop: temp378});
    return result;
  }
  async rating_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let maxvalue = INPUT?.maxvalue || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let displayonly = INPUT?.displayonly || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let temp380 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp381 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp380);
    temp381.get().n.set(new abap.types.String().set(`class`));
    temp381.get().v.set($class);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`maxValue`));
    temp381.get().v.set(maxvalue);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`displayOnly`));
    temp381.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayonly})));
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`editable`));
    temp381.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`iconSize`));
    temp381.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`value`));
    temp381.get().v.set(value);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`id`));
    temp381.get().v.set(id);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`change`));
    temp381.get().v.set(change);
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`enabled`));
    temp381.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp381, table: temp380});
    temp381.get().n.set(new abap.types.String().set(`tooltip`));
    temp381.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp381, table: temp380});
    result.set((await this._generic({name: new abap.types.String().set(`RatingIndicator`), t_prop: temp380})));
    return result;
  }
  async relationship(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let shapeid = INPUT?.shapeid || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let successor = INPUT?.successor || new abap.types.Character();
    let predecessor = INPUT?.predecessor || new abap.types.Character();
    let temp382 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp383 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp382);
    temp383.get().n.set(new abap.types.String().set(`shapeId`));
    temp383.get().v.set(shapeid);
    abap.statements.insertInternal({data: temp383, table: temp382});
    temp383.get().n.set(new abap.types.String().set(`type`));
    temp383.get().v.set(type);
    abap.statements.insertInternal({data: temp383, table: temp382});
    temp383.get().n.set(new abap.types.String().set(`successor`));
    temp383.get().v.set(successor);
    abap.statements.insertInternal({data: temp383, table: temp382});
    temp383.get().n.set(new abap.types.String().set(`predecessor`));
    temp383.get().v.set(predecessor);
    abap.statements.insertInternal({data: temp383, table: temp382});
    result.set((await this._generic({name: new abap.types.String().set(`Relationship`), ns: new abap.types.String().set(`gantt`), t_prop: temp382})));
    return result;
  }
  async relationships() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`relationships`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async responsive_scale(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let tickmarksbetweenlabels = INPUT?.tickmarksbetweenlabels || new abap.types.Character();
    let temp384 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp385 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp384);
    temp385.get().n.set(new abap.types.String().set(`id`));
    temp385.get().v.set(id);
    abap.statements.insertInternal({data: temp385, table: temp384});
    temp385.get().n.set(new abap.types.String().set(`class`));
    temp385.get().v.set($class);
    abap.statements.insertInternal({data: temp385, table: temp384});
    temp385.get().n.set(new abap.types.String().set(`tickmarksBetweenLabels`));
    temp385.get().v.set(tickmarksbetweenlabels);
    abap.statements.insertInternal({data: temp385, table: temp384});
    result.set((await this._generic({name: new abap.types.String().set(`ResponsiveScale`), t_prop: temp384})));
    return result;
  }
  async responsive_splitter(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let defaultpane = INPUT?.defaultpane || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp386 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp387 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp386);
    temp387.get().n.set(new abap.types.String().set(`defaultPane`));
    temp387.get().v.set(defaultpane);
    abap.statements.insertInternal({data: temp387, table: temp386});
    temp387.get().n.set(new abap.types.String().set(`height`));
    temp387.get().v.set(height);
    abap.statements.insertInternal({data: temp387, table: temp386});
    temp387.get().n.set(new abap.types.String().set(`width`));
    temp387.get().v.set(width);
    abap.statements.insertInternal({data: temp387, table: temp386});
    result.set((await this._generic({name: new abap.types.String().set(`ResponsiveSplitter`), ns: new abap.types.String().set(`layout`), t_prop: temp386})));
    return result;
  }
  async rich_text_editor(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let buttongroups = INPUT?.buttongroups || new abap.types.Character();
    let customtoolbar = INPUT?.customtoolbar || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let editortype = INPUT?.editortype || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let plugins = INPUT?.plugins || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let sanitizevalue = INPUT?.sanitizevalue || new abap.types.Character();
    let showgroupclipboard = INPUT?.showgroupclipboard || new abap.types.Character();
    let showgroupfont = INPUT?.showgroupfont || new abap.types.Character();
    let showgroupfontstyle = INPUT?.showgroupfontstyle || new abap.types.Character();
    let showgroupinsert = INPUT?.showgroupinsert || new abap.types.Character();
    let showgrouplink = INPUT?.showgrouplink || new abap.types.Character();
    let showgroupstructure = INPUT?.showgroupstructure || new abap.types.Character();
    let showgrouptextalign = INPUT?.showgrouptextalign || new abap.types.Character();
    let showgroupundo = INPUT?.showgroupundo || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let uselegacytheme = INPUT?.uselegacytheme || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let beforeeditorinit = INPUT?.beforeeditorinit || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let ready = INPUT?.ready || new abap.types.Character();
    let readyrecurring = INPUT?.readyrecurring || new abap.types.Character();
    let temp388 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp389 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp388);
    temp389.get().n.set(new abap.types.String().set(`buttonGroups`));
    temp389.get().v.set(buttongroups);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`customToolbar`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: customtoolbar})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`editable`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`height`));
    temp389.get().v.set(height);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`editorType`));
    temp389.get().v.set(editortype);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`plugins`));
    temp389.get().v.set(plugins);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`textDirection`));
    temp389.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`value`));
    temp389.get().v.set(value);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`beforeEditorInit`));
    temp389.get().v.set(beforeeditorinit);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`change`));
    temp389.get().v.set(change);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`ready`));
    temp389.get().v.set(ready);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`readyRecurring`));
    temp389.get().v.set(readyrecurring);
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`required`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`sanitizeValue`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sanitizevalue})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupClipboard`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupclipboard})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupFont`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupfont})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupFontStyle`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupfontstyle})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupInsert`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupinsert})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupLink`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgrouplink})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupStructure`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupstructure})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupTextAlign`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgrouptextalign})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`showGroupUndo`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showgroupundo})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`useLegacyTheme`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: uselegacytheme})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`wrapping`));
    temp389.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp389, table: temp388});
    temp389.get().n.set(new abap.types.String().set(`width`));
    temp389.get().v.set(width);
    abap.statements.insertInternal({data: temp389, table: temp388});
    result.set((await this._generic({name: new abap.types.String().set(`RichTextEditor`), ns: new abap.types.String().set(`text`), t_prop: temp388})));
    return result;
  }
  async route(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let position = INPUT?.position || new abap.types.Character();
    let routetype = INPUT?.routetype || new abap.types.Character();
    let linedash = INPUT?.linedash || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let colorborder = INPUT?.colorborder || new abap.types.Character();
    let linewidth = INPUT?.linewidth || new abap.types.Character();
    let temp390 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp391 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp390);
    temp391.get().n.set(new abap.types.String().set(`id`));
    temp391.get().v.set(id);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`position`));
    temp391.get().v.set(position);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`routetype`));
    temp391.get().v.set(routetype);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`lineDash`));
    temp391.get().v.set(linedash);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`linewidth`));
    temp391.get().v.set(linewidth);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`color`));
    temp391.get().v.set(color);
    abap.statements.insertInternal({data: temp391, table: temp390});
    temp391.get().n.set(new abap.types.String().set(`colorBorder`));
    temp391.get().v.set(colorborder);
    abap.statements.insertInternal({data: temp391, table: temp390});
    await this._generic({name: new abap.types.String().set(`Route`), ns: new abap.types.String().set(`vbm`), t_prop: temp390});
    return result;
  }
  async routes(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let temp392 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp393 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp392);
    temp393.get().n.set(new abap.types.String().set(`id`));
    temp393.get().v.set(id);
    abap.statements.insertInternal({data: temp393, table: temp392});
    temp393.get().n.set(new abap.types.String().set(`items`));
    temp393.get().v.set(items);
    abap.statements.insertInternal({data: temp393, table: temp392});
    result.set((await this._generic({name: new abap.types.String().set(`Routes`), ns: new abap.types.String().set(`vbm`), t_prop: temp392})));
    return result;
  }
  async rows() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`rows`)})));
    return result;
  }
  async row_settings_template() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`rowSettingsTemplate`), ns: new abap.types.String().set(`table`)})));
    return result;
  }
  async rules() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`rules`)})));
    return result;
  }
  async scroll_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let height = INPUT?.height || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let vertical = INPUT?.vertical || new abap.types.Character();
    let horizontal = INPUT?.horizontal || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let focusable = INPUT?.focusable || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp394 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp395 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp394);
    temp395.get().n.set(new abap.types.String().set(`height`));
    temp395.get().v.set(height);
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`width`));
    temp395.get().v.set(width);
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`id`));
    temp395.get().v.set(id);
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`visible`));
    temp395.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`vertical`));
    temp395.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: vertical})));
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`horizontal`));
    temp395.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: horizontal})));
    abap.statements.insertInternal({data: temp395, table: temp394});
    temp395.get().n.set(new abap.types.String().set(`focusable`));
    temp395.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: focusable})));
    abap.statements.insertInternal({data: temp395, table: temp394});
    result.set((await this._generic({name: new abap.types.String().set(`ScrollContainer`), t_prop: temp394})));
    return result;
  }
  async search_field(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let search = INPUT?.search || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let suggest = INPUT?.suggest || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let enablesuggestions = INPUT?.enablesuggestions || new abap.types.Character();
    let maxlength = INPUT?.maxlength || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let showrefreshbutton = INPUT?.showrefreshbutton || new abap.types.Character();
    let showsearchbutton = INPUT?.showsearchbutton || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp396 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp397 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp396);
    temp397.get().n.set(new abap.types.String().set(`width`));
    temp397.get().v.set(width);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`search`));
    temp397.get().v.set(search);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`value`));
    temp397.get().v.set(value);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`id`));
    temp397.get().v.set(id);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`class`));
    temp397.get().v.set($class);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`change`));
    temp397.get().v.set(change);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`maxLength`));
    temp397.get().v.set(maxlength);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`placeholder`));
    temp397.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`suggest`));
    temp397.get().v.set(suggest);
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`enableSuggestions`));
    temp397.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablesuggestions})));
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`showRefreshButton`));
    temp397.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showrefreshbutton})));
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`showSearchButton`));
    temp397.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsearchbutton})));
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`visible`));
    temp397.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`enabled`));
    temp397.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp397, table: temp396});
    temp397.get().n.set(new abap.types.String().set(`liveChange`));
    temp397.get().v.set(livechange);
    abap.statements.insertInternal({data: temp397, table: temp396});
    await this._generic({name: new abap.types.String().set(`SearchField`), t_prop: temp396});
    return result;
  }
  async second_status() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`secondStatus`)})));
    return result;
  }
  async sections() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`sections`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async segmented_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let selected_key = INPUT?.selected_key || new abap.types.Character();
    let selection_change = INPUT?.selection_change || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let temp398 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp399 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp398);
    temp399.get().n.set(new abap.types.String().set(`id`));
    temp399.get().v.set(id);
    abap.statements.insertInternal({data: temp399, table: temp398});
    temp399.get().n.set(new abap.types.String().set(`selectedKey`));
    temp399.get().v.set(selected_key);
    abap.statements.insertInternal({data: temp399, table: temp398});
    temp399.get().n.set(new abap.types.String().set(`visible`));
    temp399.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp399, table: temp398});
    temp399.get().n.set(new abap.types.String().set(`enabled`));
    temp399.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp399, table: temp398});
    temp399.get().n.set(new abap.types.String().set(`selectionChange`));
    temp399.get().v.set(selection_change);
    abap.statements.insertInternal({data: temp399, table: temp398});
    result.set((await this._generic({name: new abap.types.String().set(`SegmentedButton`), t_prop: temp398})));
    return result;
  }
  async segmented_button_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let icon = INPUT?.icon || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp400 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp401 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp400);
    temp401.get().n.set(new abap.types.String().set(`icon`));
    temp401.get().v.set(icon);
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`press`));
    temp401.get().v.set(press);
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`width`));
    temp401.get().v.set(width);
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`key`));
    temp401.get().v.set(key);
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`textDirection`));
    temp401.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`enabled`));
    temp401.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`visible`));
    temp401.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp401, table: temp400});
    temp401.get().n.set(new abap.types.String().set(`text`));
    temp401.get().v.set(text);
    abap.statements.insertInternal({data: temp401, table: temp400});
    await this._generic({name: new abap.types.String().set(`SegmentedButtonItem`), t_prop: temp400});
    return result;
  }
  async segments() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`segments`), ns: new abap.types.String().set(`mchart`)})));
    return result;
  }
  async select(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let autoadjustwidth = INPUT?.autoadjustwidth || new abap.types.Character();
    let columnratio = INPUT?.columnratio || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let forceselection = INPUT?.forceselection || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let maxwidth = INPUT?.maxwidth || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let resetonmissingkey = INPUT?.resetonmissingkey || new abap.types.Character();
    let selecteditemid = INPUT?.selecteditemid || new abap.types.Character();
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let showsecondaryvalues = INPUT?.showsecondaryvalues || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapitemstext = INPUT?.wrapitemstext || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let selecteditem = INPUT?.selecteditem || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp402 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp403 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp402);
    temp403.get().n.set(new abap.types.String().set(`id`));
    temp403.get().v.set(id);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`class`));
    temp403.get().v.set($class);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`autoAdjustWidth`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autoadjustwidth})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`columnRatio`));
    temp403.get().v.set(columnratio);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`editable`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`enabled`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`forceSelection`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: forceselection})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`icon`));
    temp403.get().v.set(icon);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`maxWidth`));
    temp403.get().v.set(maxwidth);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`name`));
    temp403.get().v.set(name);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`required`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`resetOnMissingKey`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resetonmissingkey})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`selectedItemId`));
    temp403.get().v.set(selecteditemid);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`selectedKey`));
    temp403.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`showSecondaryValues`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsecondaryvalues})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`textAlign`));
    temp403.get().v.set(textalign);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`textDirection`));
    temp403.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`type`));
    temp403.get().v.set(type);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`valueState`));
    temp403.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`valueStateText`));
    temp403.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`width`));
    temp403.get().v.set(width);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`wrapItemsText`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapitemstext})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`items`));
    temp403.get().v.set(items);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`selectedItem`));
    temp403.get().v.set(selecteditem);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`change`));
    temp403.get().v.set(change);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`liveChange`));
    temp403.get().v.set(livechange);
    abap.statements.insertInternal({data: temp403, table: temp402});
    temp403.get().n.set(new abap.types.String().set(`visible`));
    temp403.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp403, table: temp402});
    result.set((await this._generic({name: new abap.types.String().set(`Select`), t_prop: temp402})));
    return result;
  }
  async shapes1() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`shapes1`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async shapes2() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`shapes2`), ns: new abap.types.String().set(`gantt`)})));
    return result;
  }
  async shape_group() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`ShapeGroup`), ns: new abap.types.String().set(`si`)})));
    return result;
  }
  async shell(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let appwidthlimited = INPUT?.appwidthlimited || new abap.types.Character();
    let temp404 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp405 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp404);
    temp405.get().n.set(new abap.types.String().set(`appWidthLimited`));
    temp405.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: appwidthlimited})));
    abap.statements.insertInternal({data: temp405, table: temp404});
    result.set((await this._generic({name: new abap.types.String().set(`Shell`), ns: ns, t_prop: temp404})));
    return result;
  }
  async shell_bar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let homeicon = INPUT?.homeicon || new abap.types.Character();
    let homeicontooltip = INPUT?.homeicontooltip || new abap.types.Character();
    let notificationsnumber = INPUT?.notificationsnumber || new abap.types.Character();
    let secondtitle = INPUT?.secondtitle || new abap.types.Character();
    let showcopilot = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.showcopilot) {showcopilot.set(INPUT.showcopilot);}
    let showmenubutton = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.showmenubutton) {showmenubutton.set(INPUT.showmenubutton);}
    let shownavbutton = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.shownavbutton) {shownavbutton.set(INPUT.shownavbutton);}
    let shownotifications = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.shownotifications) {shownotifications.set(INPUT.shownotifications);}
    let showproductswitcher = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.showproductswitcher) {showproductswitcher.set(INPUT.showproductswitcher);}
    let showsearch = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.showsearch) {showsearch.set(INPUT.showsearch);}
    let title = INPUT?.title || new abap.types.Character();
    let avatarpressed = INPUT?.avatarpressed || new abap.types.Character();
    let copilotpressed = INPUT?.copilotpressed || new abap.types.Character();
    let homeiconpressed = INPUT?.homeiconpressed || new abap.types.Character();
    let menubuttonpressed = INPUT?.menubuttonpressed || new abap.types.Character();
    let navbuttonpressed = INPUT?.navbuttonpressed || new abap.types.Character();
    let notificationspressed = INPUT?.notificationspressed || new abap.types.Character();
    let productswitcherpressed = INPUT?.productswitcherpressed || new abap.types.Character();
    let searchbuttonpressed = INPUT?.searchbuttonpressed || new abap.types.Character();
    let temp406 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp407 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp406);
    temp407.get().n.set(new abap.types.String().set(`homeIcon`));
    temp407.get().v.set(homeicon);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`homeIconTooltip`));
    temp407.get().v.set(homeicontooltip);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`title`));
    temp407.get().v.set(title);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`secondTitle`));
    temp407.get().v.set(secondtitle);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showCopilot`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcopilot})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showMenuButton`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showmenubutton})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showNavButton`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownavbutton})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showNotifications`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownotifications})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showProductSwitcher`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showproductswitcher})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`showSearch`));
    temp407.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsearch})));
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.String().set(`notificationsNumber`));
    temp407.get().v.set(notificationsnumber);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(13).set('avatarPressed'));
    temp407.get().v.set(avatarpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(14).set('copilotPressed'));
    temp407.get().v.set(copilotpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(15).set('homeIconPressed'));
    temp407.get().v.set(homeiconpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(17).set('menuButtonPressed'));
    temp407.get().v.set(menubuttonpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(16).set('navButtonPressed'));
    temp407.get().v.set(navbuttonpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(20).set('notificationsPressed'));
    temp407.get().v.set(notificationspressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(22).set('productSwitcherPressed'));
    temp407.get().v.set(productswitcherpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    temp407.get().n.set(new abap.types.Character(19).set('searchButtonPressed'));
    temp407.get().v.set(searchbuttonpressed);
    abap.statements.insertInternal({data: temp407, table: temp406});
    result.set((await this._generic({name: new abap.types.String().set(`ShellBar`), ns: new abap.types.String().set(`f`), t_prop: temp406})));
    return result;
  }
  async side_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let width = INPUT?.width || new abap.types.Character();
    let temp408 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp409 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp408);
    temp409.get().n.set(new abap.types.String().set(`width`));
    temp409.get().v.set(width);
    abap.statements.insertInternal({data: temp409, table: temp408});
    result.set((await this._generic({name: new abap.types.String().set(`sideContent`), ns: new abap.types.Character(6).set('layout'), t_prop: temp408})));
    return result;
  }
  async side_panel(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let actionbarexpanded = INPUT?.actionbarexpanded || new abap.types.Character();
    let arialabel = INPUT?.arialabel || new abap.types.Character();
    let sidepanelmaxwidth = INPUT?.sidepanelmaxwidth || new abap.types.Character();
    let sidepanelminwidth = INPUT?.sidepanelminwidth || new abap.types.Character();
    let sidepanelposition = INPUT?.sidepanelposition || new abap.types.Character();
    let sidepanelresizable = INPUT?.sidepanelresizable || new abap.types.Character();
    let sidepanelresizelargerstep = INPUT?.sidepanelresizelargerstep || new abap.types.Character();
    let sidepanelresizestep = INPUT?.sidepanelresizestep || new abap.types.Character();
    let sidepanelwidth = INPUT?.sidepanelwidth || new abap.types.Character();
    let toggle = INPUT?.toggle || new abap.types.Character();
    let temp410 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp411 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp410);
    temp411.get().n.set(new abap.types.String().set(`sidePanelWidth`));
    temp411.get().v.set(sidepanelwidth);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelResizeStep`));
    temp411.get().v.set(sidepanelresizestep);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelResizeLargerStep`));
    temp411.get().v.set(sidepanelresizelargerstep);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelPosition`));
    temp411.get().v.set(sidepanelposition);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelMinWidth`));
    temp411.get().v.set(sidepanelminwidth);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelMaxWidth`));
    temp411.get().v.set(sidepanelmaxwidth);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`sidePanelResizable`));
    temp411.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sidepanelresizable})));
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`actionBarExpanded`));
    temp411.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: actionbarexpanded})));
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`toggle`));
    temp411.get().v.set(toggle);
    abap.statements.insertInternal({data: temp411, table: temp410});
    temp411.get().n.set(new abap.types.String().set(`ariaLabel`));
    temp411.get().v.set(arialabel);
    abap.statements.insertInternal({data: temp411, table: temp410});
    result.set((await this._generic({name: new abap.types.String().set(`SidePanel`), ns: new abap.types.String().set(`f`), t_prop: temp410})));
    return result;
  }
  async side_panel_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let icon = INPUT?.icon || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let temp412 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp413 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp412);
    temp413.get().n.set(new abap.types.String().set(`icon`));
    temp413.get().v.set(icon);
    abap.statements.insertInternal({data: temp413, table: temp412});
    temp413.get().n.set(new abap.types.String().set(`enabled`));
    temp413.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp413, table: temp412});
    temp413.get().n.set(new abap.types.String().set(`key`));
    temp413.get().v.set(key);
    abap.statements.insertInternal({data: temp413, table: temp412});
    temp413.get().n.set(new abap.types.String().set(`text`));
    temp413.get().v.set(text);
    abap.statements.insertInternal({data: temp413, table: temp412});
    result.set((await this._generic({name: new abap.types.String().set(`SidePanelItem`), ns: new abap.types.String().set(`f`), t_prop: temp412})));
    return result;
  }
  async simple_form(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let layout = INPUT?.layout || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let columnsxl = INPUT?.columnsxl || new abap.types.Character();
    let columnsl = INPUT?.columnsl || new abap.types.Character();
    let columnsm = INPUT?.columnsm || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let adjustlabelspan = INPUT?.adjustlabelspan || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let breakpointl = INPUT?.breakpointl || new abap.types.Character();
    let breakpointm = INPUT?.breakpointm || new abap.types.Character();
    let breakpointxl = INPUT?.breakpointxl || new abap.types.Character();
    let emptyspanl = INPUT?.emptyspanl || new abap.types.Character();
    let emptyspanm = INPUT?.emptyspanm || new abap.types.Character();
    let emptyspans = INPUT?.emptyspans || new abap.types.Character();
    let emptyspanxl = INPUT?.emptyspanxl || new abap.types.Character();
    let labelspans = INPUT?.labelspans || new abap.types.Character();
    let labelspanm = INPUT?.labelspanm || new abap.types.Character();
    let labelspanl = INPUT?.labelspanl || new abap.types.Character();
    let labelspanxl = INPUT?.labelspanxl || new abap.types.Character();
    let maxcontainercols = INPUT?.maxcontainercols || new abap.types.Character();
    let minwidth = INPUT?.minwidth || new abap.types.Character();
    let singlecontainerfullsize = INPUT?.singlecontainerfullsize || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp414 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp415 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp414);
    temp415.get().n.set(new abap.types.String().set(`title`));
    temp415.get().v.set(title);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`layout`));
    temp415.get().v.set(layout);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`class`));
    temp415.get().v.set($class);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`adjustLabelSpan`));
    temp415.get().v.set(adjustlabelspan);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp415.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`breakpointL`));
    temp415.get().v.set(breakpointl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`breakpointM`));
    temp415.get().v.set(breakpointm);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`breakpointXL`));
    temp415.get().v.set(breakpointxl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`emptySpanL`));
    temp415.get().v.set(emptyspanl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`emptySpanM`));
    temp415.get().v.set(emptyspanm);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`emptySpanS`));
    temp415.get().v.set(emptyspans);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`emptySpanXL`));
    temp415.get().v.set(emptyspanxl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`labelSpanL`));
    temp415.get().v.set(labelspanl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`labelSpanM`));
    temp415.get().v.set(labelspanm);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`labelSpanS`));
    temp415.get().v.set(labelspans);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`labelSpanXL`));
    temp415.get().v.set(labelspanxl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`maxContainerCols`));
    temp415.get().v.set(maxcontainercols);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`minWidth`));
    temp415.get().v.set(minwidth);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`singleContainerFullSize`));
    temp415.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: singlecontainerfullsize})));
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`visible`));
    temp415.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`width`));
    temp415.get().v.set(width);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`id`));
    temp415.get().v.set(id);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`columnsXL`));
    temp415.get().v.set(columnsxl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`columnsL`));
    temp415.get().v.set(columnsl);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`columnsM`));
    temp415.get().v.set(columnsm);
    abap.statements.insertInternal({data: temp415, table: temp414});
    temp415.get().n.set(new abap.types.String().set(`editable`));
    temp415.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp415, table: temp414});
    result.set((await this._generic({name: new abap.types.String().set(`SimpleForm`), ns: new abap.types.String().set(`form`), t_prop: temp414})));
    return result;
  }
  async slider(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let max = INPUT?.max || new abap.types.Character();
    let min = INPUT?.min || new abap.types.Character();
    let step = INPUT?.step || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let enabletickmarks = INPUT?.enabletickmarks || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let inputsastooltips = INPUT?.inputsastooltips || new abap.types.Character();
    let showadvancedtooltip = INPUT?.showadvancedtooltip || new abap.types.Character();
    let showhandletooltip = INPUT?.showhandletooltip || new abap.types.Character();
    let temp416 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp417 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp416);
    temp417.get().n.set(new abap.types.String().set(`class`));
    temp417.get().v.set($class);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`id`));
    temp417.get().v.set(id);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`max`));
    temp417.get().v.set(max);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`min`));
    temp417.get().v.set(min);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`enableTickmarks`));
    temp417.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabletickmarks})));
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`enabled`));
    temp417.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`value`));
    temp417.get().v.set(value);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`step`));
    temp417.get().v.set(step);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`change`));
    temp417.get().v.set(change);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`width`));
    temp417.get().v.set(width);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`inputsAsTooltips`));
    temp417.get().v.set(inputsastooltips);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`showAdvancedTooltip`));
    temp417.get().v.set(showadvancedtooltip);
    abap.statements.insertInternal({data: temp417, table: temp416});
    temp417.get().n.set(new abap.types.String().set(`showHandleTooltip`));
    temp417.get().v.set(showhandletooltip);
    abap.statements.insertInternal({data: temp417, table: temp416});
    await this._generic({name: new abap.types.String().set(`Slider`), t_prop: temp416});
    return result;
  }
  async slide_tile(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let displaytime = INPUT?.displaytime || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let scope = INPUT?.scope || new abap.types.Character();
    let sizebehavior = INPUT?.sizebehavior || new abap.types.Character();
    let transitiontime = INPUT?.transitiontime || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp418 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp419 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp418);
    temp419.get().n.set(new abap.types.String().set(`displayTime`));
    temp419.get().v.set(displaytime);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`height`));
    temp419.get().v.set(height);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`scope`));
    temp419.get().v.set(scope);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`sizeBehavior`));
    temp419.get().v.set(sizebehavior);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`transitionTime`));
    temp419.get().v.set(transitiontime);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`width`));
    temp419.get().v.set(width);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`press`));
    temp419.get().v.set(press);
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`visible`));
    temp419.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp419, table: temp418});
    temp419.get().n.set(new abap.types.String().set(`class`));
    temp419.get().v.set($class);
    abap.statements.insertInternal({data: temp419, table: temp418});
    result.set((await this._generic({name: new abap.types.String().set(`SlideTile`), t_prop: temp418})));
    return result;
  }
  async smart_variant_management(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let showexecuteonselection = INPUT?.showexecuteonselection || new abap.types.Character();
    let temp420 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp421 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp420);
    temp421.get().n.set(new abap.types.String().set(`id`));
    temp421.get().v.set(id);
    abap.statements.insertInternal({data: temp421, table: temp420});
    temp421.get().n.set(new abap.types.String().set(`showExecuteOnSelection`));
    temp421.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showexecuteonselection})));
    abap.statements.insertInternal({data: temp421, table: temp420});
    result.set((await this._generic({name: new abap.types.String().set(`SmartVariantManagement`), ns: new abap.types.String().set(`svm`), t_prop: temp420})));
    return result;
  }
  async snapped_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns;
    result.set((await this._generic({name: new abap.types.String().set(`snappedContent`), ns: ns})));
    return result;
  }
  async snapped_heading() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(this.me);
    result.set((await this._generic({name: new abap.types.String().set(`snappedHeading`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async snapped_title_on_mobile() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`snappedTitleOnMobile`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async sort_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`sortItems`)})));
    return result;
  }
  async splitter_layout_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let size = INPUT?.size || new abap.types.Character();
    let minsize = INPUT?.minsize || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let temp422 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp423 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp422);
    temp423.get().n.set(new abap.types.String().set(`size`));
    temp423.get().v.set(size);
    abap.statements.insertInternal({data: temp423, table: temp422});
    temp423.get().n.set(new abap.types.String().set(`minSize`));
    temp423.get().v.set(minsize);
    abap.statements.insertInternal({data: temp423, table: temp422});
    temp423.get().n.set(new abap.types.String().set(`resizable`));
    temp423.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp423, table: temp422});
    result.set((await this._generic({name: new abap.types.String().set(`SplitterLayoutData`), ns: new abap.types.String().set(`layout`), t_prop: temp422})));
    return result;
  }
  async split_container(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let initialdetail = INPUT?.initialdetail || new abap.types.Character();
    let initialmaster = INPUT?.initialmaster || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let backgroundimage = INPUT?.backgroundimage || new abap.types.Character();
    let backgroundopacity = INPUT?.backgroundopacity || new abap.types.Character();
    let backgroundrepeat = INPUT?.backgroundrepeat || new abap.types.Character();
    let defaulttransitionnamedetail = INPUT?.defaulttransitionnamedetail || new abap.types.Character();
    let defaulttransitionnamemaster = INPUT?.defaulttransitionnamemaster || new abap.types.Character();
    let masterbuttontext = INPUT?.masterbuttontext || new abap.types.Character();
    let masterbuttontooltip = INPUT?.masterbuttontooltip || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let afterdetailnavigate = INPUT?.afterdetailnavigate || new abap.types.Character();
    let aftermasterclose = INPUT?.aftermasterclose || new abap.types.Character();
    let aftermasternavigate = INPUT?.aftermasternavigate || new abap.types.Character();
    let aftermasteropen = INPUT?.aftermasteropen || new abap.types.Character();
    let beforemasterclose = INPUT?.beforemasterclose || new abap.types.Character();
    let beforemasteropen = INPUT?.beforemasteropen || new abap.types.Character();
    let detailnavigate = INPUT?.detailnavigate || new abap.types.Character();
    let masterbutton = INPUT?.masterbutton || new abap.types.Character();
    let masternavigate = INPUT?.masternavigate || new abap.types.Character();
    let temp424 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp425 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp424);
    temp425.get().n.set(new abap.types.String().set(`id`));
    temp425.get().v.set(id);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`initialDetail`));
    temp425.get().v.set(initialdetail);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`initialMaster`));
    temp425.get().v.set(initialmaster);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp425.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`backgroundImage`));
    temp425.get().v.set(backgroundimage);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`backgroundOpacity`));
    temp425.get().v.set(backgroundopacity);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`backgroundRepeat`));
    temp425.get().v.set(backgroundrepeat);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`defaultTransitionNameDetail`));
    temp425.get().v.set(defaulttransitionnamedetail);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`defaultTransitionNameMaster`));
    temp425.get().v.set(defaulttransitionnamemaster);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`masterButtonText`));
    temp425.get().v.set(masterbuttontext);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`masterButtonTooltip`));
    temp425.get().v.set(masterbuttontooltip);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`afterDetailNavigate`));
    temp425.get().v.set(afterdetailnavigate);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`afterMasterClose`));
    temp425.get().v.set(aftermasterclose);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`afterMasterNavigate`));
    temp425.get().v.set(aftermasternavigate);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`afterMasterOpen`));
    temp425.get().v.set(aftermasteropen);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`beforeMasterClose`));
    temp425.get().v.set(beforemasterclose);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`beforeMasterOpen`));
    temp425.get().v.set(beforemasteropen);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`detailNavigate`));
    temp425.get().v.set(detailnavigate);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`masterButton`));
    temp425.get().v.set(masterbutton);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`masterNavigate`));
    temp425.get().v.set(masternavigate);
    abap.statements.insertInternal({data: temp425, table: temp424});
    temp425.get().n.set(new abap.types.String().set(`mode`));
    temp425.get().v.set(mode);
    abap.statements.insertInternal({data: temp425, table: temp424});
    await this._generic({name: new abap.types.String().set(`SplitContainer`), t_prop: temp424});
    return result;
  }
  async split_pane(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let requiredparentwidth = INPUT?.requiredparentwidth || new abap.types.Character();
    let temp426 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp427 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp426);
    temp427.get().n.set(new abap.types.String().set(`id`));
    temp427.get().v.set(id);
    abap.statements.insertInternal({data: temp427, table: temp426});
    temp427.get().n.set(new abap.types.String().set(`requiredParentWidth`));
    temp427.get().v.set(requiredparentwidth);
    abap.statements.insertInternal({data: temp427, table: temp426});
    result.set((await this._generic({name: new abap.types.String().set(`SplitPane`), ns: new abap.types.String().set(`layout`), t_prop: temp426})));
    return result;
  }
  async spot(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let position = INPUT?.position || new abap.types.Character();
    let contentoffset = INPUT?.contentoffset || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let scale = INPUT?.scale || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let image = INPUT?.image || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let click = INPUT?.click || new abap.types.Character();
    let temp428 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp429 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp428);
    temp429.get().n.set(new abap.types.String().set(`id`));
    temp429.get().v.set(id);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`position`));
    temp429.get().v.set(position);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`contentOffset`));
    temp429.get().v.set(contentoffset);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`type`));
    temp429.get().v.set(type);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`scale`));
    temp429.get().v.set(scale);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`tooltip`));
    temp429.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`image`));
    temp429.get().v.set(image);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`icon`));
    temp429.get().v.set(icon);
    abap.statements.insertInternal({data: temp429, table: temp428});
    temp429.get().n.set(new abap.types.String().set(`click`));
    temp429.get().v.set(click);
    abap.statements.insertInternal({data: temp429, table: temp428});
    await this._generic({name: new abap.types.String().set(`Spot`), ns: new abap.types.String().set(`vbm`), t_prop: temp428});
    return result;
  }
  async spots(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let temp430 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp431 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp430);
    temp431.get().n.set(new abap.types.String().set(`id`));
    temp431.get().v.set(id);
    abap.statements.insertInternal({data: temp431, table: temp430});
    temp431.get().n.set(new abap.types.String().set(`items`));
    temp431.get().v.set(items);
    abap.statements.insertInternal({data: temp431, table: temp430});
    result.set((await this._generic({name: new abap.types.String().set(`Spots`), ns: new abap.types.String().set(`vbm`), t_prop: temp430})));
    return result;
  }
  async stacked_bar_micro_chart(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let height = INPUT?.height || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let maxvalue = INPUT?.maxvalue || new abap.types.Character();
    let precision = INPUT?.precision || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let hideonnodata = INPUT?.hideonnodata || new abap.types.Character();
    let displayzerovalue = INPUT?.displayzerovalue || new abap.types.Character();
    let showlabels = INPUT?.showlabels || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp432 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp433 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp432);
    temp433.get().n.set(new abap.types.String().set(`height`));
    temp433.get().v.set(height);
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`press`));
    temp433.get().v.set(press);
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`maxValue`));
    temp433.get().v.set(maxvalue);
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`precision`));
    temp433.get().v.set(precision);
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`size`));
    temp433.get().v.set(size);
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`hideOnNoData`));
    temp433.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideonnodata})));
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`displayZeroValue`));
    temp433.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayzerovalue})));
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`showLabels`));
    temp433.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showlabels})));
    abap.statements.insertInternal({data: temp433, table: temp432});
    temp433.get().n.set(new abap.types.String().set(`width`));
    temp433.get().v.set(width);
    abap.statements.insertInternal({data: temp433, table: temp432});
    await this._generic({name: new abap.types.String().set(`StackedBarMicroChart`), ns: new abap.types.String().set(`mchart`), t_prop: temp432});
    return result;
  }
  async standard_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let info = INPUT?.info || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let wrapcharlimit = INPUT?.wrapcharlimit || new abap.types.Character();
    let infostateinverted = INPUT?.infostateinverted || new abap.types.Character();
    let infostate = INPUT?.infostate || new abap.types.Character();
    let iconinset = INPUT?.iconinset || new abap.types.Character();
    let adapttitlesize = INPUT?.adapttitlesize || new abap.types.Character();
    let activeicon = INPUT?.activeicon || new abap.types.Character();
    let unread = INPUT?.unread || new abap.types.Character();
    let highlight = INPUT?.highlight || new abap.types.Character();
    let temp434 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp435 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp434);
    temp435.get().n.set(new abap.types.String().set(`title`));
    temp435.get().v.set(title);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`description`));
    temp435.get().v.set(description);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`icon`));
    temp435.get().v.set(icon);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`info`));
    temp435.get().v.set(info);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`press`));
    temp435.get().v.set(press);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`type`));
    temp435.get().v.set(type);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`counter`));
    temp435.get().v.set(counter);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`activeIcon`));
    temp435.get().v.set(activeicon);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`adaptTitleSize`));
    temp435.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: adapttitlesize})));
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`unread`));
    temp435.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: unread})));
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`iconInset`));
    temp435.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: iconinset})));
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`infoStateInverted`));
    temp435.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: infostateinverted})));
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`wrapping`));
    temp435.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`infoState`));
    temp435.get().v.set(infostate);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`highlight`));
    temp435.get().v.set(highlight);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`wrapCharLimit`));
    temp435.get().v.set(wrapcharlimit);
    abap.statements.insertInternal({data: temp435, table: temp434});
    temp435.get().n.set(new abap.types.String().set(`selected`));
    temp435.get().v.set(selected);
    abap.statements.insertInternal({data: temp435, table: temp434});
    await this._generic({name: new abap.types.String().set(`StandardListItem`), t_prop: temp434});
    return result;
  }
  async standard_tree_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let title = INPUT?.title || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let detailpress = INPUT?.detailpress || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let counter = INPUT?.counter || new abap.types.Character();
    let tooltip = INPUT?.tooltip || new abap.types.Character();
    let temp436 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp437 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp436);
    temp437.get().n.set(new abap.types.String().set(`title`));
    temp437.get().v.set(title);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`icon`));
    temp437.get().v.set(icon);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`press`));
    temp437.get().v.set(press);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`detailPress`));
    temp437.get().v.set(detailpress);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`type`));
    temp437.get().v.set(type);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`counter`));
    temp437.get().v.set(counter);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`selected`));
    temp437.get().v.set(selected);
    abap.statements.insertInternal({data: temp437, table: temp436});
    temp437.get().n.set(new abap.types.String().set(`tooltip`));
    temp437.get().v.set(tooltip);
    abap.statements.insertInternal({data: temp437, table: temp436});
    await this._generic({name: new abap.types.String().set(`StandardTreeItem`), t_prop: temp436});
    return result;
  }
  async status(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let bordercolor = INPUT?.bordercolor || new abap.types.Character();
    let borderstyle = INPUT?.borderstyle || new abap.types.Character();
    let borderwidth = INPUT?.borderwidth || new abap.types.Character();
    let contentcolor = INPUT?.contentcolor || new abap.types.Character();
    let headercontentcolor = INPUT?.headercontentcolor || new abap.types.Character();
    let hoverbackgroundcolor = INPUT?.hoverbackgroundcolor || new abap.types.Character();
    let hoverbordercolor = INPUT?.hoverbordercolor || new abap.types.Character();
    let hovercontentcolor = INPUT?.hovercontentcolor || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let legendcolor = INPUT?.legendcolor || new abap.types.Character();
    let selectedbackgroundcolor = INPUT?.selectedbackgroundcolor || new abap.types.Character();
    let selectedbordercolor = INPUT?.selectedbordercolor || new abap.types.Character();
    let selectedcontentcolor = INPUT?.selectedcontentcolor || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let usefocuscolorascontentcolor = INPUT?.usefocuscolorascontentcolor || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp438 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp439 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp438);
    temp439.get().n.set(new abap.types.String().set(`id`));
    temp439.get().v.set(id);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`class`));
    temp439.get().v.set($class);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp439.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`borderColor`));
    temp439.get().v.set(bordercolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`borderStyle`));
    temp439.get().v.set(borderstyle);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`borderWidth`));
    temp439.get().v.set(borderwidth);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`contentColor`));
    temp439.get().v.set(contentcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`headerContentColor`));
    temp439.get().v.set(headercontentcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`hoverBackgroundColor`));
    temp439.get().v.set(hoverbackgroundcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`hoverBorderColor`));
    temp439.get().v.set(hoverbordercolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`hoverContentColor`));
    temp439.get().v.set(hovercontentcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`key`));
    temp439.get().v.set(key);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`legendColor`));
    temp439.get().v.set(legendcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`selectedBackgroundColor`));
    temp439.get().v.set(selectedbackgroundcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`selectedBorderColor`));
    temp439.get().v.set(selectedbordercolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`selectedContentColor`));
    temp439.get().v.set(selectedcontentcolor);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`title`));
    temp439.get().v.set(title);
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`useFocusColorAsContentColor`));
    temp439.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usefocuscolorascontentcolor})));
    abap.statements.insertInternal({data: temp439, table: temp438});
    temp439.get().n.set(new abap.types.String().set(`visible`));
    temp439.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp439, table: temp438});
    result.set((await this._generic({name: new abap.types.String().set(`Status`), ns: new abap.types.String().set(`networkgraph`), t_prop: temp438})));
    return result;
  }
  async statuses(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let temp440 = new abap.types.String({qualifiedName: "STRING"});
    let unique182 = ns;
    if (abap.compare.eq(unique182, new abap.types.Character(1).set(''))) {
      temp440.set(new abap.types.String().set(`networkgraph`));
    } else {
      temp440.set(ns);
    }
    result.set((await this._generic({name: new abap.types.String().set(`statuses`), ns: temp440})));
    return result;
  }
  async status_indicator(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let labelposition = INPUT?.labelposition || new abap.types.Character();
    let showlabel = INPUT?.showlabel || new abap.types.Character();
    let size = INPUT?.size || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let viewbox = INPUT?.viewbox || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp441 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp442 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp441);
    temp442.get().n.set(new abap.types.String().set(`id`));
    temp442.get().v.set(id);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`class`));
    temp442.get().v.set($class);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`height`));
    temp442.get().v.set(height);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`labelPosition`));
    temp442.get().v.set(labelposition);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`showLabel`));
    temp442.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showlabel})));
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`size`));
    temp442.get().v.set(size);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`value`));
    temp442.get().v.set(value);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`viewBox`));
    temp442.get().v.set(viewbox);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`width`));
    temp442.get().v.set(width);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`press`));
    temp442.get().v.set(press);
    abap.statements.insertInternal({data: temp442, table: temp441});
    temp442.get().n.set(new abap.types.String().set(`visible`));
    temp442.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp442, table: temp441});
    result.set((await this._generic({name: new abap.types.String().set(`StatusIndicator`), ns: new abap.types.String().set(`si`), t_prop: temp441})));
    return result;
  }
  async step_input(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let min = INPUT?.min || new abap.types.Character();
    let max = INPUT?.max || new abap.types.Character();
    let step = INPUT?.step || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let description = INPUT?.description || new abap.types.Character();
    let displayvalueprecision = INPUT?.displayvalueprecision || new abap.types.Character();
    let largerstep = INPUT?.largerstep || new abap.types.Character();
    let stepmode = INPUT?.stepmode || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let fieldwidth = INPUT?.fieldwidth || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let validationmode = INPUT?.validationmode || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let temp443 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp444 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp443);
    temp444.get().n.set(new abap.types.String().set(`id`));
    temp444.get().v.set(id);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`max`));
    temp444.get().v.set(max);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`min`));
    temp444.get().v.set(min);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`step`));
    temp444.get().v.set(step);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`width`));
    temp444.get().v.set(width);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`value`));
    temp444.get().v.set(value);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`valueState`));
    temp444.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`enabled`));
    temp444.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`description`));
    temp444.get().v.set(description);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`displayValuePrecision`));
    temp444.get().v.set(displayvalueprecision);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`largerStep`));
    temp444.get().v.set(largerstep);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`stepMode`));
    temp444.get().v.set(stepmode);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`editable`));
    temp444.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`fieldWidth`));
    temp444.get().v.set(fieldwidth);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`textalign`));
    temp444.get().v.set(textalign);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`validationMode`));
    temp444.get().v.set(validationmode);
    abap.statements.insertInternal({data: temp444, table: temp443});
    temp444.get().n.set(new abap.types.String().set(`change`));
    temp444.get().v.set(change);
    abap.statements.insertInternal({data: temp444, table: temp443});
    await this._generic({name: new abap.types.String().set(`StepInput`), t_prop: temp443});
    return result;
  }
  async stringify() {
    let result = new abap.types.String({qualifiedName: "STRING"});
    result.set((await (await this.get_root()).get().xml_get()));
    return result;
  }
  async sub_header(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`subHeader`), ns: ns})));
    return result;
  }
  async sub_sections() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set(this.me);
    result.set((await this._generic({name: new abap.types.String().set(`subSections`), ns: new abap.types.String().set(`uxap`)})));
    return result;
  }
  async suggestion_columns() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`suggestionColumns`)})));
    return result;
  }
  async suggestion_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let description = INPUT?.description || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let temp445 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp446 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp445);
    temp446.get().n.set(new abap.types.String().set(`description`));
    temp446.get().v.set(description);
    abap.statements.insertInternal({data: temp446, table: temp445});
    temp446.get().n.set(new abap.types.String().set(`icon`));
    temp446.get().v.set(icon);
    abap.statements.insertInternal({data: temp446, table: temp445});
    temp446.get().n.set(new abap.types.String().set(`key`));
    temp446.get().v.set(key);
    abap.statements.insertInternal({data: temp446, table: temp445});
    temp446.get().n.set(new abap.types.String().set(`text`));
    temp446.get().v.set(text);
    abap.statements.insertInternal({data: temp446, table: temp445});
    temp446.get().n.set(new abap.types.String().set(`textDirection`));
    temp446.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp446, table: temp445});
    await this._generic({name: new abap.types.String().set(`SuggestionItem`), t_prop: temp445});
    return result;
  }
  async suggestion_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`suggestionItems`)})));
    return result;
  }
  async suggestion_rows() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`suggestionRows`)})));
    return result;
  }
  async swim_lane_chain_layout() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`SwimLaneChainLayout`), ns: new abap.types.String().set(`nglayout`)})));
    return result;
  }
  async switch(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let state = INPUT?.state || new abap.types.Character();
    let customtexton = INPUT?.customtexton || new abap.types.Character();
    let customtextoff = INPUT?.customtextoff || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let temp447 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp448 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp447);
    temp448.get().n.set(new abap.types.String().set(`type`));
    temp448.get().v.set(type);
    abap.statements.insertInternal({data: temp448, table: temp447});
    temp448.get().n.set(new abap.types.String().set(`enabled`));
    temp448.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp448, table: temp447});
    temp448.get().n.set(new abap.types.String().set(`state`));
    temp448.get().v.set(state);
    abap.statements.insertInternal({data: temp448, table: temp447});
    temp448.get().n.set(new abap.types.String().set(`change`));
    temp448.get().v.set(change);
    abap.statements.insertInternal({data: temp448, table: temp447});
    temp448.get().n.set(new abap.types.String().set(`customTextOff`));
    temp448.get().v.set(customtextoff);
    abap.statements.insertInternal({data: temp448, table: temp447});
    temp448.get().n.set(new abap.types.String().set(`customTextOn`));
    temp448.get().v.set(customtexton);
    abap.statements.insertInternal({data: temp448, table: temp447});
    await this._generic({name: new abap.types.String().set(`Switch`), t_prop: temp447});
    return result;
  }
  async tab(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let temp449 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp450 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp449);
    temp450.get().n.set(new abap.types.String().set(`text`));
    temp450.get().v.set(text);
    abap.statements.insertInternal({data: temp450, table: temp449});
    temp450.get().n.set(new abap.types.String().set(`selected`));
    temp450.get().v.set(selected);
    abap.statements.insertInternal({data: temp450, table: temp449});
    result.set((await this._generic({name: new abap.types.String().set(`Tab`), ns: new abap.types.String().set(`webc`), t_prop: temp449})));
    return result;
  }
  async table(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let growingscrolltoload = INPUT?.growingscrolltoload || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let sticky = INPUT?.sticky || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let alternaterowcolors = INPUT?.alternaterowcolors || new abap.types.Character();
    let autopopinmode = INPUT?.autopopinmode || new abap.types.Character();
    let inset = INPUT?.inset || new abap.types.Character();
    let showseparators = INPUT?.showseparators || new abap.types.Character();
    let showoverlay = INPUT?.showoverlay || new abap.types.Character();
    let hiddeninpopin = INPUT?.hiddeninpopin || new abap.types.Character();
    let popinlayout = INPUT?.popinlayout || new abap.types.Character();
    let fixedlayout = INPUT?.fixedlayout || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp451 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp452 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp451);
    temp452.get().n.set(new abap.types.String().set(`items`));
    temp452.get().v.set(items);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`headerText`));
    temp452.get().v.set(headertext);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`class`));
    temp452.get().v.set($class);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`growing`));
    temp452.get().v.set(growing);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`growingThreshold`));
    temp452.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`growingScrollToLoad`));
    temp452.get().v.set(growingscrolltoload);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`sticky`));
    temp452.get().v.set(sticky);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`showSeparators`));
    temp452.get().v.set(showseparators);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`mode`));
    temp452.get().v.set(mode);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`inset`));
    temp452.get().v.set(inset);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`width`));
    temp452.get().v.set(width);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`id`));
    temp452.get().v.set(id);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`hiddenInPopin`));
    temp452.get().v.set(hiddeninpopin);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`popinLayout`));
    temp452.get().v.set(popinlayout);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`selectionChange`));
    temp452.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp452.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`visible`));
    temp452.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`alternateRowColors`));
    temp452.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: alternaterowcolors})));
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`fixedLayout`));
    temp452.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fixedlayout})));
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`showOverlay`));
    temp452.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showoverlay})));
    abap.statements.insertInternal({data: temp452, table: temp451});
    temp452.get().n.set(new abap.types.String().set(`autoPopinMode`));
    temp452.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autopopinmode})));
    abap.statements.insertInternal({data: temp452, table: temp451});
    result.set((await this._generic({name: new abap.types.String().set(`Table`), t_prop: temp451})));
    return result;
  }
  async table_select_dialog(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let confirmbuttontext = INPUT?.confirmbuttontext || new abap.types.Character();
    let contentheight = INPUT?.contentheight || new abap.types.Character();
    let contentwidth = INPUT?.contentwidth || new abap.types.Character();
    let draggable = INPUT?.draggable || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let multiselect = INPUT?.multiselect || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let rememberselections = INPUT?.rememberselections || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let searchplaceholder = INPUT?.searchplaceholder || new abap.types.Character();
    let showclearbutton = INPUT?.showclearbutton || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let search = INPUT?.search || new abap.types.Character();
    let confirm = INPUT?.confirm || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let temp453 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp454 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp453);
    temp454.get().n.set(new abap.types.String().set(`confirmButtonText`));
    temp454.get().v.set(confirmbuttontext);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`contentHeight`));
    temp454.get().v.set(contentheight);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`contentWidth`));
    temp454.get().v.set(contentwidth);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`draggable`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: draggable})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`growing`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`growingThreshold`));
    temp454.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`multiSelect`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: multiselect})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`noDataText`));
    temp454.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`rememberSelections`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rememberselections})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`resizable`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`searchPlaceholder`));
    temp454.get().v.set(searchplaceholder);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`showClearButton`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showclearbutton})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`title`));
    temp454.get().v.set(title);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp454.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`items`));
    temp454.get().v.set(items);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`search`));
    temp454.get().v.set(search);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`confirm`));
    temp454.get().v.set(confirm);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`cancel`));
    temp454.get().v.set(cancel);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`liveChange`));
    temp454.get().v.set(livechange);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`selectionChange`));
    temp454.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp454, table: temp453});
    temp454.get().n.set(new abap.types.String().set(`visible`));
    temp454.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp454, table: temp453});
    result.set((await this._generic({name: new abap.types.String().set(`TableSelectDialog`), t_prop: temp453})));
    return result;
  }
  async tab_container() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`TabContainer`), ns: new abap.types.String().set(`webc`)})));
    return result;
  }
  async task(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let color = INPUT?.color || new abap.types.Character();
    let endtime = INPUT?.endtime || new abap.types.Character();
    let time = INPUT?.time || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let showtitle = INPUT?.showtitle || new abap.types.Character();
    let connectable = INPUT?.connectable || new abap.types.Character();
    let temp455 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp456 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp455);
    temp456.get().n.set(new abap.types.String().set(`time`));
    temp456.get().v.set(time);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`endTime`));
    temp456.get().v.set(endtime);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`id`));
    temp456.get().v.set(id);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`type`));
    temp456.get().v.set(type);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`connectable`));
    temp456.get().v.set(connectable);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`title`));
    temp456.get().v.set(title);
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`showTitle`));
    temp456.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtitle})));
    abap.statements.insertInternal({data: temp456, table: temp455});
    temp456.get().n.set(new abap.types.String().set(`color`));
    temp456.get().v.set(color);
    abap.statements.insertInternal({data: temp456, table: temp455});
    result.set((await this._generic({name: new abap.types.String().set(`Task`), ns: new abap.types.String().set(`shapes`), t_prop: temp455})));
    return result;
  }
  async template_else() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`else`), ns: new abap.types.String().set(`template`)})));
    return result;
  }
  async template_elseif(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let test = INPUT?.test || new abap.types.Character();
    let temp457 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp458 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp457);
    temp458.get().n.set(new abap.types.String().set(`test`));
    temp458.get().v.set(test);
    abap.statements.insertInternal({data: temp458, table: temp457});
    result.set((await this._generic({name: new abap.types.String().set(`elseif`), ns: new abap.types.String().set(`template`), t_prop: temp457})));
    return result;
  }
  async template_if(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let test = INPUT?.test || new abap.types.Character();
    let temp459 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp460 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp459);
    temp460.get().n.set(new abap.types.String().set(`test`));
    temp460.get().v.set(test);
    abap.statements.insertInternal({data: temp460, table: temp459});
    result.set((await this._generic({name: new abap.types.String().set(`if`), ns: new abap.types.String().set(`template`), t_prop: temp459})));
    return result;
  }
  async template_repeat(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let list = INPUT?.list || new abap.types.Character();
    let $var = INPUT?.var || new abap.types.Character();
    let temp461 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp462 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp461);
    temp462.get().n.set(new abap.types.String().set(`list`));
    temp462.get().v.set(list);
    abap.statements.insertInternal({data: temp462, table: temp461});
    temp462.get().n.set(new abap.types.String().set(`var`));
    temp462.get().v.set($var);
    abap.statements.insertInternal({data: temp462, table: temp461});
    result.set((await this._generic({name: new abap.types.String().set(`repeat`), ns: new abap.types.String().set(`template`), t_prop: temp461})));
    return result;
  }
  async template_then() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`then`), ns: new abap.types.String().set(`template`)})));
    return result;
  }
  async template_with(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let path = INPUT?.path || new abap.types.Character();
    let helper = INPUT?.helper || new abap.types.Character();
    let $var = INPUT?.var || new abap.types.Character();
    let temp463 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp464 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp463);
    temp464.get().n.set(new abap.types.String().set(`path`));
    temp464.get().v.set(path);
    abap.statements.insertInternal({data: temp464, table: temp463});
    temp464.get().n.set(new abap.types.String().set(`helper`));
    temp464.get().v.set(helper);
    abap.statements.insertInternal({data: temp464, table: temp463});
    temp464.get().n.set(new abap.types.String().set(`var`));
    temp464.get().v.set($var);
    abap.statements.insertInternal({data: temp464, table: temp463});
    result.set((await this._generic({name: new abap.types.String().set(`with`), ns: new abap.types.String().set(`template`), t_prop: temp463})));
    return result;
  }
  async text(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let ns = INPUT?.ns || new abap.types.Character();
    let emptyindicatormode = INPUT?.emptyindicatormode || new abap.types.Character();
    let maxlines = INPUT?.maxlines || new abap.types.Character();
    let renderwhitespace = INPUT?.renderwhitespace || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp465 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp466 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp465);
    temp466.get().n.set(new abap.types.String().set(`text`));
    temp466.get().v.set(text);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`emptyIndicatorMode`));
    temp466.get().v.set(emptyindicatormode);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`maxLines`));
    temp466.get().v.set(maxlines);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`renderWhitespace`));
    temp466.get().v.set(renderwhitespace);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`textAlign`));
    temp466.get().v.set(textalign);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`visible`));
    temp466.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`textDirection`));
    temp466.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`width`));
    temp466.get().v.set(width);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`id`));
    temp466.get().v.set(id);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`wrapping`));
    temp466.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`wrappingType`));
    temp466.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp466, table: temp465});
    temp466.get().n.set(new abap.types.String().set(`class`));
    temp466.get().v.set($class);
    abap.statements.insertInternal({data: temp466, table: temp465});
    await this._generic({name: new abap.types.String().set(`Text`), ns: ns, t_prop: temp465});
    return result;
  }
  async text_area(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let rows = INPUT?.rows || new abap.types.Character();
    let cols = INPUT?.cols || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let valueliveupdate = INPUT?.valueliveupdate || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let growing = INPUT?.growing || new abap.types.Character();
    let growingmaxlines = INPUT?.growingmaxlines || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let maxlength = INPUT?.maxlength || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let showexceededtext = INPUT?.showexceededtext || new abap.types.Character();
    let temp467 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp468 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp467);
    temp468.get().n.set(new abap.types.String().set(`value`));
    temp468.get().v.set(value);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`rows`));
    temp468.get().v.set(rows);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`cols`));
    temp468.get().v.set(cols);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`height`));
    temp468.get().v.set(height);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`width`));
    temp468.get().v.set(width);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`wrapping`));
    temp468.get().v.set(wrapping);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`maxLength`));
    temp468.get().v.set(maxlength);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`textAlign`));
    temp468.get().v.set(textalign);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`textDirection`));
    temp468.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`showExceededText`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showexceededtext})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`valueLiveUpdate`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: valueliveupdate})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`editable`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`class`));
    temp468.get().v.set($class);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`enabled`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`id`));
    temp468.get().v.set(id);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`growing`));
    temp468.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: growing})));
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`growingMaxLines`));
    temp468.get().v.set(growingmaxlines);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`required`));
    temp468.get().v.set(required);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`valueState`));
    temp468.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`placeholder`));
    temp468.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp468, table: temp467});
    temp468.get().n.set(new abap.types.String().set(`valueStateText`));
    temp468.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp468, table: temp467});
    await this._generic({name: new abap.types.String().set(`TextArea`), t_prop: temp467});
    return result;
  }
  async tile_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let unit = INPUT?.unit || new abap.types.Character();
    let footercolor = INPUT?.footercolor || new abap.types.Character();
    let blocked = INPUT?.blocked || new abap.types.Character();
    let frametype = INPUT?.frametype || new abap.types.Character();
    let priority = INPUT?.priority || new abap.types.Character();
    let prioritytext = INPUT?.prioritytext || new abap.types.Character();
    let state = INPUT?.state || new abap.types.Character();
    let disabled = INPUT?.disabled || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let footer = INPUT?.footer || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let temp469 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp470 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp469);
    temp470.get().n.set(new abap.types.String().set(`unit`));
    temp470.get().v.set(unit);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`footerColor`));
    temp470.get().v.set(footercolor);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`blocked`));
    temp470.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: blocked})));
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`frameType`));
    temp470.get().v.set(frametype);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`priority`));
    temp470.get().v.set(priority);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`priorityText`));
    temp470.get().v.set(prioritytext);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`state`));
    temp470.get().v.set(state);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`disabled`));
    temp470.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: disabled})));
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`visible`));
    temp470.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`footer`));
    temp470.get().v.set(footer);
    abap.statements.insertInternal({data: temp470, table: temp469});
    temp470.get().n.set(new abap.types.String().set(`class`));
    temp470.get().v.set($class);
    abap.statements.insertInternal({data: temp470, table: temp469});
    result.set((await this._generic({name: new abap.types.String().set(`TileContent`), ns: new abap.types.String().set(``), t_prop: temp469})));
    return result;
  }
  async tile_info(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let backgroundcolor = INPUT?.backgroundcolor || new abap.types.Character();
    let bordercolor = INPUT?.bordercolor || new abap.types.Character();
    let src = INPUT?.src || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textcolor = INPUT?.textcolor || new abap.types.Character();
    let temp471 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp472 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp471);
    temp472.get().n.set(new abap.types.String().set(`id`));
    temp472.get().v.set(id);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`class`));
    temp472.get().v.set($class);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`backgroundColor`));
    temp472.get().v.set(backgroundcolor);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`borderColor`));
    temp472.get().v.set(bordercolor);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`src`));
    temp472.get().v.set(src);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`text`));
    temp472.get().v.set(text);
    abap.statements.insertInternal({data: temp472, table: temp471});
    temp472.get().n.set(new abap.types.String().set(`textColor`));
    temp472.get().v.set(textcolor);
    abap.statements.insertInternal({data: temp472, table: temp471});
    result.set((await this._generic({name: new abap.types.String().set(`TileInfo`), t_prop: temp471})));
    return result;
  }
  async timeline(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let enabledoublesided = INPUT?.enabledoublesided || new abap.types.Character();
    let groupby = INPUT?.groupby || new abap.types.Character();
    let growingthreshold = INPUT?.growingthreshold || new abap.types.Character();
    let filtertitle = INPUT?.filtertitle || new abap.types.Character();
    let sortoldestfirst = INPUT?.sortoldestfirst || new abap.types.Character();
    let alignment = INPUT?.alignment || new abap.types.Character();
    let axisorientation = INPUT?.axisorientation || new abap.types.Character();
    let content = INPUT?.content || new abap.types.Character();
    let enablemodelfilter = INPUT?.enablemodelfilter || new abap.types.Character();
    let enablescroll = INPUT?.enablescroll || new abap.types.Character();
    let forcegrowing = INPUT?.forcegrowing || new abap.types.Character();
    let group = INPUT?.group || new abap.types.Character();
    let lazyloading = INPUT?.lazyloading || new abap.types.Character();
    let showheaderbar = INPUT?.showheaderbar || new abap.types.Character();
    let showicons = INPUT?.showicons || new abap.types.Character();
    let showitemfilter = INPUT?.showitemfilter || new abap.types.Character();
    let showsearch = INPUT?.showsearch || new abap.types.Character();
    let showsort = INPUT?.showsort || new abap.types.Character();
    let showtimefilter = INPUT?.showtimefilter || new abap.types.Character();
    let sort = INPUT?.sort || new abap.types.Character();
    let groupbytype = INPUT?.groupbytype || new abap.types.Character();
    let textheight = INPUT?.textheight || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let filterlist = INPUT?.filterlist || new abap.types.Character();
    let customfilter = INPUT?.customfilter || new abap.types.Character();
    let temp473 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp474 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp473);
    temp474.get().n.set(new abap.types.Character(2).set('id'));
    temp474.get().v.set(id);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(17).set('enableDoubleSided'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabledoublesided})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(7).set('groupBy'));
    temp474.get().v.set(groupby);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(16).set('growingThreshold'));
    temp474.get().v.set(growingthreshold);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(11).set('filterTitle'));
    temp474.get().v.set(filtertitle);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(15).set('sortOldestFirst'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sortoldestfirst})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(17).set('enableModelFilter'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablemodelfilter})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(12).set('enableScroll'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablescroll})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(12).set('forceGrowing'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: forcegrowing})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(5).set('group'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: group})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(11).set('lazyLoading'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: lazyloading})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(13).set('showHeaderBar'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showheaderbar})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(9).set('showIcons'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicons})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(14).set('showItemFilter'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showitemfilter})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(10).set('showSearch'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsearch})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(8).set('showSort'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsort})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(14).set('showTimeFilter'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showtimefilter})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(4).set('sort'));
    temp474.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sort})));
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(11).set('groupByType'));
    temp474.get().v.set(groupbytype);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(10).set('textHeight'));
    temp474.get().v.set(textheight);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(5).set('width'));
    temp474.get().v.set(width);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(6).set('height'));
    temp474.get().v.set(height);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(10).set('noDataText'));
    temp474.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(9).set('alignment'));
    temp474.get().v.set(alignment);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(15).set('axisOrientation'));
    temp474.get().v.set(axisorientation);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(10).set('filterList'));
    temp474.get().v.set(filterlist);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(12).set('customFilter'));
    temp474.get().v.set(customfilter);
    abap.statements.insertInternal({data: temp474, table: temp473});
    temp474.get().n.set(new abap.types.Character(7).set('content'));
    temp474.get().v.set(content);
    abap.statements.insertInternal({data: temp474, table: temp473});
    result.set((await this._generic({name: new abap.types.String().set(`Timeline`), ns: new abap.types.Character(7).set('commons'), t_prop: temp473})));
    return result;
  }
  async timeline_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let datetime = INPUT?.datetime || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let usernameclickable = INPUT?.usernameclickable || new abap.types.Character();
    let useicontooltip = INPUT?.useicontooltip || new abap.types.Character();
    let usernameclicked = INPUT?.usernameclicked || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let userpicture = INPUT?.userpicture || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let username = INPUT?.username || new abap.types.Character();
    let filtervalue = INPUT?.filtervalue || new abap.types.Character();
    let icondisplayshape = INPUT?.icondisplayshape || new abap.types.Character();
    let iconinitials = INPUT?.iconinitials || new abap.types.Character();
    let iconsize = INPUT?.iconsize || new abap.types.Character();
    let icontooltip = INPUT?.icontooltip || new abap.types.Character();
    let maxcharacters = INPUT?.maxcharacters || new abap.types.Character();
    let replycount = INPUT?.replycount || new abap.types.Character();
    let status = INPUT?.status || new abap.types.Character();
    let customactionclicked = INPUT?.customactionclicked || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let replylistopen = INPUT?.replylistopen || new abap.types.Character();
    let replypost = INPUT?.replypost || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let temp475 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp476 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp475);
    temp476.get().n.set(new abap.types.Character(2).set('id'));
    temp476.get().v.set(id);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(8).set('dateTime'));
    temp476.get().v.set(datetime);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(5).set('title'));
    temp476.get().v.set(title);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(17).set('userNameClickable'));
    temp476.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usernameclickable})));
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(14).set('useIconTooltip'));
    temp476.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: useicontooltip})));
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(15).set('userNameClicked'));
    temp476.get().v.set(usernameclicked);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(11).set('userPicture'));
    temp476.get().v.set(userpicture);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(6).set('select'));
    temp476.get().v.set(select);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(4).set('text'));
    temp476.get().v.set(text);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(8).set('userName'));
    temp476.get().v.set(username);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(11).set('filterValue'));
    temp476.get().v.set(filtervalue);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(16).set('iconDisplayShape'));
    temp476.get().v.set(icondisplayshape);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(12).set('iconInitials'));
    temp476.get().v.set(iconinitials);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(8).set('iconSize'));
    temp476.get().v.set(iconsize);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(11).set('iconTooltip'));
    temp476.get().v.set(icontooltip);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(13).set('maxCharacters'));
    temp476.get().v.set(maxcharacters);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(10).set('replyCount'));
    temp476.get().v.set(replycount);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(6).set('status'));
    temp476.get().v.set(status);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(19).set('customActionClicked'));
    temp476.get().v.set(customactionclicked);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(5).set('press'));
    temp476.get().v.set(press);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(13).set('replyListOpen'));
    temp476.get().v.set(replylistopen);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(9).set('replyPost'));
    temp476.get().v.set(replypost);
    abap.statements.insertInternal({data: temp476, table: temp475});
    temp476.get().n.set(new abap.types.Character(4).set('icon'));
    temp476.get().v.set(icon);
    abap.statements.insertInternal({data: temp476, table: temp475});
    result.set((await this._generic({name: new abap.types.String().set(`TimelineItem`), ns: new abap.types.Character(7).set('commons'), t_prop: temp475})));
    return result;
  }
  async time_horizon(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let starttime = INPUT?.starttime || new abap.types.Character();
    let endtime = INPUT?.endtime || new abap.types.Character();
    let temp477 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp478 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp477);
    temp478.get().n.set(new abap.types.String().set(`startTime`));
    temp478.get().v.set(starttime);
    abap.statements.insertInternal({data: temp478, table: temp477});
    temp478.get().n.set(new abap.types.String().set(`endTime`));
    temp478.get().v.set(endtime);
    abap.statements.insertInternal({data: temp478, table: temp477});
    result.set((await this._generic({name: new abap.types.String().set(`TimeHorizon`), ns: new abap.types.String().set(`config`), t_prop: temp477})));
    return result;
  }
  async time_picker(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let displayformat = INPUT?.displayformat || new abap.types.Character();
    let valueformat = INPUT?.valueformat || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let datevalue = INPUT?.datevalue || new abap.types.Character();
    let localeid = INPUT?.localeid || new abap.types.Character();
    let mask = INPUT?.mask || new abap.types.Character();
    let maskmode = INPUT?.maskmode || new abap.types.Character();
    let minutesstep = INPUT?.minutesstep || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let placeholdersymbol = INPUT?.placeholdersymbol || new abap.types.Character();
    let secondsstep = INPUT?.secondsstep || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let showcurrenttimebutton = INPUT?.showcurrenttimebutton || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let support2400 = INPUT?.support2400 || new abap.types.Character();
    let initialfocuseddatevalue = INPUT?.initialfocuseddatevalue || new abap.types.Character();
    let hideinput = INPUT?.hideinput || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let aftervaluehelpopen = INPUT?.aftervaluehelpopen || new abap.types.Character();
    let aftervaluehelpclose = INPUT?.aftervaluehelpclose || new abap.types.Character();
    let temp479 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp480 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp479);
    temp480.get().n.set(new abap.types.String().set(`value`));
    temp480.get().v.set(value);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`dateValue`));
    temp480.get().v.set(datevalue);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`localeId`));
    temp480.get().v.set(localeid);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`placeholder`));
    temp480.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`mask`));
    temp480.get().v.set(mask);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`maskMode`));
    temp480.get().v.set(maskmode);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`minutesStep`));
    temp480.get().v.set(minutesstep);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`name`));
    temp480.get().v.set(name);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`placeholderSymbol`));
    temp480.get().v.set(placeholdersymbol);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`secondsStep`));
    temp480.get().v.set(secondsstep);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`textAlign`));
    temp480.get().v.set(textalign);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`textDirection`));
    temp480.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`title`));
    temp480.get().v.set(title);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`showCurrentTimeButton`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcurrenttimebutton})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`support2400`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: support2400})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`initialFocusedDateValue`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: initialfocuseddatevalue})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`hideInput`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideinput})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`editable`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`enabled`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`required`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`visible`));
    temp480.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`width`));
    temp480.get().v.set(width);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`valueState`));
    temp480.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`valueStateText`));
    temp480.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`displayFormat`));
    temp480.get().v.set(displayformat);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`afterValueHelpClose`));
    temp480.get().v.set(aftervaluehelpclose);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`afterValueHelpOpen`));
    temp480.get().v.set(aftervaluehelpopen);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`change`));
    temp480.get().v.set(change);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`liveChange`));
    temp480.get().v.set(livechange);
    abap.statements.insertInternal({data: temp480, table: temp479});
    temp480.get().n.set(new abap.types.String().set(`valueFormat`));
    temp480.get().v.set(valueformat);
    abap.statements.insertInternal({data: temp480, table: temp479});
    await this._generic({name: new abap.types.String().set(`TimePicker`), t_prop: temp479});
    return result;
  }
  async title(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let wrapping = INPUT?.wrapping || new abap.types.Character();
    let level = INPUT?.level || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let titlestyle = INPUT?.titlestyle || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrappingtype = INPUT?.wrappingtype || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let lv_name = new abap.types.Character(5, {});
    let temp2 = new abap.types.Character(5, {});
    let temp482 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp483 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    if (abap.compare.eq(ns, new abap.types.Character(1).set('f'))) {
      temp2.set(new abap.types.Character(5).set('title'));
    } else {
      temp2.set(new abap.types.String().set(`Title`));
    }
    lv_name.set(temp2);
    result.set(this.me);
    abap.statements.clear(temp482);
    temp483.get().n.set(new abap.types.String().set(`text`));
    temp483.get().v.set(text);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`class`));
    temp483.get().v.set($class);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`id`));
    temp483.get().v.set(id);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`wrappingType`));
    temp483.get().v.set(wrappingtype);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`textAlign`));
    temp483.get().v.set(textalign);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`textDirection`));
    temp483.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`titleStyle`));
    temp483.get().v.set(titlestyle);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`width`));
    temp483.get().v.set(width);
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`wrapping`));
    temp483.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: wrapping})));
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`visible`));
    temp483.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp483, table: temp482});
    temp483.get().n.set(new abap.types.String().set(`level`));
    temp483.get().v.set(level);
    abap.statements.insertInternal({data: temp483, table: temp482});
    await this._generic({ns: ns, name: lv_name, t_prop: temp482});
    return result;
  }
  async toggle_button(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let pressed = INPUT?.pressed || new abap.types.Character();
    let temp484 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp485 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp484);
    temp485.get().n.set(new abap.types.String().set(`press`));
    temp485.get().v.set(press);
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`text`));
    temp485.get().v.set(text);
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`enabled`));
    temp485.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`icon`));
    temp485.get().v.set(icon);
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`type`));
    temp485.get().v.set(type);
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`class`));
    temp485.get().v.set($class);
    abap.statements.insertInternal({data: temp485, table: temp484});
    temp485.get().n.set(new abap.types.String().set(`pressed`));
    temp485.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: pressed})));
    abap.statements.insertInternal({data: temp485, table: temp484});
    await this._generic({name: new abap.types.String().set(`ToggleButton`), t_prop: temp484});
    return result;
  }
  async token(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let temp486 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp487 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp486);
    temp487.get().n.set(new abap.types.String().set(`key`));
    temp487.get().v.set(key);
    abap.statements.insertInternal({data: temp487, table: temp486});
    temp487.get().n.set(new abap.types.String().set(`text`));
    temp487.get().v.set(text);
    abap.statements.insertInternal({data: temp487, table: temp486});
    temp487.get().n.set(new abap.types.String().set(`selected`));
    temp487.get().v.set(selected);
    abap.statements.insertInternal({data: temp487, table: temp486});
    temp487.get().n.set(new abap.types.String().set(`visible`));
    temp487.get().v.set(visible);
    abap.statements.insertInternal({data: temp487, table: temp486});
    temp487.get().n.set(new abap.types.String().set(`editable`));
    temp487.get().v.set(editable);
    abap.statements.insertInternal({data: temp487, table: temp486});
    await this._generic({name: new abap.types.String().set(`Token`), t_prop: temp486});
    return result;
  }
  async tokens(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`tokens`), ns: ns})));
    return result;
  }
  async toolbar(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let active = INPUT?.active || new abap.types.Character();
    let ariahaspopup = INPUT?.ariahaspopup || new abap.types.Character();
    let design = INPUT?.design || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let style = INPUT?.style || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let lv_name = new abap.types.Character(7, {});
    let temp3 = new abap.types.Character(7, {});
    let temp489 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp490 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    if (abap.compare.eq(ns, new abap.types.Character(5).set('table'))) {
      temp3.set(new abap.types.Character(7).set('toolbar'));
    } else if (abap.compare.eq(ns, new abap.types.Character(4).set('form'))) {
      temp3.set(new abap.types.Character(7).set('toolbar'));
    } else {
      temp3.set(new abap.types.String().set(`Toolbar`));
    }
    lv_name.set(temp3);
    abap.statements.clear(temp489);
    temp490.get().n.set(new abap.types.String().set(`active`));
    temp490.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: active})));
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`ariaHasPopup`));
    temp490.get().v.set(ariahaspopup);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`design`));
    temp490.get().v.set(design);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`enabled`));
    temp490.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`visible`));
    temp490.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`height`));
    temp490.get().v.set(height);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`style`));
    temp490.get().v.set(style);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`width`));
    temp490.get().v.set(width);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`id`));
    temp490.get().v.set(id);
    abap.statements.insertInternal({data: temp490, table: temp489});
    temp490.get().n.set(new abap.types.String().set(`press`));
    temp490.get().v.set(press);
    abap.statements.insertInternal({data: temp490, table: temp489});
    result.set((await this._generic({name: lv_name, ns: ns, t_prop: temp489})));
    return result;
  }
  async toolbar_spacer(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp491 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp492 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp491);
    temp492.get().n.set(new abap.types.String().set(`width`));
    temp492.get().v.set(width);
    abap.statements.insertInternal({data: temp492, table: temp491});
    await this._generic({name: new abap.types.String().set(`ToolbarSpacer`), ns: ns, t_prop: temp491});
    return result;
  }
  async tool_header() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`ToolHeader`), ns: new abap.types.String().set(`tnt`)})));
    return result;
  }
  async tool_page() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`ToolPage`), ns: new abap.types.String().set(`tnt`)})));
    return result;
  }
  async total_horizon() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`totalHorizon`), ns: new abap.types.String().set(`axistime`)})));
    return result;
  }
  async tree(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let headertext = INPUT?.headertext || new abap.types.Character();
    let headerlevel = INPUT?.headerlevel || new abap.types.Character();
    let footertext = INPUT?.footertext || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let includeiteminselection = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.includeiteminselection) {includeiteminselection.set(INPUT.includeiteminselection);}
    let inset = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    if (INPUT && INPUT.inset) {inset.set(INPUT.inset);}
    let width = INPUT?.width || new abap.types.Character();
    let toggleopenstate = INPUT?.toggleopenstate || new abap.types.Character();
    let selectionchange = INPUT?.selectionchange || new abap.types.Character();
    let itempress = INPUT?.itempress || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let multiselectmode = INPUT?.multiselectmode || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let shownodata = INPUT?.shownodata || new abap.types.Character();
    let temp493 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp494 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp493);
    temp494.get().n.set(new abap.types.String().set(`id`));
    temp494.get().v.set(id);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`items`));
    temp494.get().v.set(items);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`headerText`));
    temp494.get().v.set(headertext);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`footerText`));
    temp494.get().v.set(footertext);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`mode`));
    temp494.get().v.set(mode);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`toggleOpenState`));
    temp494.get().v.set(toggleopenstate);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`width`));
    temp494.get().v.set(width);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`selectionChange`));
    temp494.get().v.set(selectionchange);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`itemPress`));
    temp494.get().v.set(itempress);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`select`));
    temp494.get().v.set(select);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`multiSelectMode`));
    temp494.get().v.set(multiselectmode);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`noDataText`));
    temp494.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`headerLevel`));
    temp494.get().v.set(headerlevel);
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`includeItemInSelection`));
    temp494.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: includeiteminselection})));
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`showNoData`));
    temp494.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownodata})));
    abap.statements.insertInternal({data: temp494, table: temp493});
    temp494.get().n.set(new abap.types.String().set(`inset`));
    temp494.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inset})));
    abap.statements.insertInternal({data: temp494, table: temp493});
    result.set((await this._generic({name: new abap.types.String().set(`Tree`), t_prop: temp493})));
    return result;
  }
  async tree_column(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let label = INPUT?.label;
    let template = INPUT?.template || new abap.types.Character();
    let halign = INPUT?.halign || new abap.types.Character();
    if (INPUT === undefined || INPUT.halign === undefined) {halign = new abap.types.Character(5).set('Begin');}
    let temp495 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp496 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp495);
    temp496.get().n.set(new abap.types.String().set(`label`));
    temp496.get().v.set(label);
    abap.statements.insertInternal({data: temp496, table: temp495});
    temp496.get().n.set(new abap.types.String().set(`template`));
    temp496.get().v.set(template);
    abap.statements.insertInternal({data: temp496, table: temp495});
    temp496.get().n.set(new abap.types.String().set(`hAlign`));
    temp496.get().v.set(halign);
    abap.statements.insertInternal({data: temp496, table: temp495});
    result.set((await this._generic({name: new abap.types.String().set(`Column`), ns: new abap.types.String().set(`table`), t_prop: temp495})));
    return result;
  }
  async tree_columns() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`columns`), ns: new abap.types.String().set(`table`)})));
    return result;
  }
  async tree_table(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let rows = INPUT?.rows || new abap.types.Character();
    let selectionmode = INPUT?.selectionmode || new abap.types.Character();
    let enablecolumnreordering = INPUT?.enablecolumnreordering || new abap.types.Character();
    let expandfirstlevel = INPUT?.expandfirstlevel || new abap.types.Character();
    let columnselect = INPUT?.columnselect || new abap.types.Character();
    let rowselectionchange = INPUT?.rowselectionchange || new abap.types.Character();
    let selectionbehavior = INPUT?.selectionbehavior || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let alternaterowcolors = INPUT?.alternaterowcolors || new abap.types.Character();
    let columnheadervisible = INPUT?.columnheadervisible || new abap.types.Character();
    let enablecellfilter = INPUT?.enablecellfilter || new abap.types.Character();
    let enablecolumnfreeze = INPUT?.enablecolumnfreeze || new abap.types.Character();
    let enablecustomfilter = INPUT?.enablecustomfilter || new abap.types.Character();
    let enableselectall = INPUT?.enableselectall || new abap.types.Character();
    let shownodata = INPUT?.shownodata || new abap.types.Character();
    let showoverlay = INPUT?.showoverlay || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let columnheaderheight = INPUT?.columnheaderheight || new abap.types.Character();
    let firstvisiblerow = INPUT?.firstvisiblerow || new abap.types.Character();
    let fixedcolumncount = INPUT?.fixedcolumncount || new abap.types.Character();
    let threshold = INPUT?.threshold || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let usegroupmode = INPUT?.usegroupmode || new abap.types.Character();
    let groupheaderproperty = INPUT?.groupheaderproperty || new abap.types.Character();
    let rowactioncount = INPUT?.rowactioncount || new abap.types.Character();
    let selectedindex = INPUT?.selectedindex || new abap.types.Character();
    let visiblerowcount = INPUT?.visiblerowcount || new abap.types.Character();
    let visiblerowcountmode = INPUT?.visiblerowcountmode || new abap.types.Character();
    let minautorowcount = INPUT?.minautorowcount || new abap.types.Character();
    let fixedbottomrowcount = INPUT?.fixedbottomrowcount || new abap.types.Character();
    let fixedrowcount = INPUT?.fixedrowcount || new abap.types.Character();
    let rowheight = INPUT?.rowheight || new abap.types.Character();
    let toggleopenstate = INPUT?.toggleopenstate || new abap.types.Character();
    let temp497 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp498 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp497);
    temp498.get().n.set(new abap.types.String().set(`rows`));
    temp498.get().v.set(rows);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`selectionMode`));
    temp498.get().v.set(selectionmode);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`enableColumnReordering`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecolumnreordering})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`expandFirstLevel`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: expandfirstlevel})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`columnSelect`));
    temp498.get().v.set(columnselect);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`rowSelectionChange`));
    temp498.get().v.set(rowselectionchange);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`selectionBehavior`));
    temp498.get().v.set(selectionbehavior);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`id`));
    temp498.get().v.set(id);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`alternateRowColors`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: alternaterowcolors})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`columnHeaderVisible`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: columnheadervisible})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`enableCellFilter`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecellfilter})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`enableColumnFreeze`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecolumnfreeze})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`enableCustomFilter`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecustomfilter})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`enableSelectAll`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableselectall})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`showNoData`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownodata})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`showOverlay`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showoverlay})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`visible`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`columnHeaderHeight`));
    temp498.get().v.set(columnheaderheight);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`firstVisibleRow`));
    temp498.get().v.set(firstvisiblerow);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`fixedColumnCount`));
    temp498.get().v.set(fixedcolumncount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`threshold`));
    temp498.get().v.set(threshold);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`width`));
    temp498.get().v.set(width);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`useGroupMode`));
    temp498.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usegroupmode})));
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`groupHeaderProperty`));
    temp498.get().v.set(groupheaderproperty);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`rowActionCount`));
    temp498.get().v.set(rowactioncount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`selectedIndex`));
    temp498.get().v.set(selectedindex);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`rowHeight`));
    temp498.get().v.set(rowheight);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`fixedRowCount`));
    temp498.get().v.set(fixedrowcount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`fixedBottomRowCount`));
    temp498.get().v.set(fixedbottomrowcount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`minAutoRowCount`));
    temp498.get().v.set(minautorowcount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`visibleRowCount`));
    temp498.get().v.set(visiblerowcount);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`toggleOpenState`));
    temp498.get().v.set(toggleopenstate);
    abap.statements.insertInternal({data: temp498, table: temp497});
    temp498.get().n.set(new abap.types.String().set(`visibleRowCountMode`));
    temp498.get().v.set(visiblerowcountmode);
    abap.statements.insertInternal({data: temp498, table: temp497});
    result.set((await this._generic({name: new abap.types.String().set(`TreeTable`), ns: new abap.types.String().set(`table`), t_prop: temp497})));
    return result;
  }
  async tree_template() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`template`), ns: new abap.types.String().set(`table`)})));
    return result;
  }
  async two_columns_layout() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`TwoColumnsLayout`), ns: new abap.types.String().set(`nglayout`)})));
    return result;
  }
  async ui_column(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let showsortmenuentry = INPUT?.showsortmenuentry || new abap.types.Character();
    let sortproperty = INPUT?.sortproperty || new abap.types.Character();
    let autoresizable = INPUT?.autoresizable || new abap.types.Character();
    let filterproperty = INPUT?.filterproperty || new abap.types.Character();
    let showfiltermenuentry = INPUT?.showfiltermenuentry || new abap.types.Character();
    let defaultfilteroperator = INPUT?.defaultfilteroperator || new abap.types.Character();
    let filtertype = INPUT?.filtertype || new abap.types.Character();
    let halign = INPUT?.halign || new abap.types.Character();
    let minwidth = INPUT?.minwidth || new abap.types.Character();
    let resizable = INPUT?.resizable || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp499 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp500 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp499);
    temp500.get().n.set(new abap.types.String().set(`id`));
    temp500.get().v.set(id);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`width`));
    temp500.get().v.set(width);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`showSortMenuEntry`));
    temp500.get().v.set(showsortmenuentry);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`sortProperty`));
    temp500.get().v.set(sortproperty);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`showFilterMenuEntry`));
    temp500.get().v.set(showfiltermenuentry);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`autoresizable`));
    temp500.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: autoresizable})));
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`defaultFilterOperator`));
    temp500.get().v.set(defaultfilteroperator);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`filterProperty`));
    temp500.get().v.set(filterproperty);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`filterType`));
    temp500.get().v.set(filtertype);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`hAlign`));
    temp500.get().v.set(halign);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`minWidth`));
    temp500.get().v.set(minwidth);
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`resizable`));
    temp500.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resizable})));
    abap.statements.insertInternal({data: temp500, table: temp499});
    temp500.get().n.set(new abap.types.String().set(`visible`));
    temp500.get().v.set(visible);
    abap.statements.insertInternal({data: temp500, table: temp499});
    result.set((await this._generic({name: new abap.types.String().set(`Column`), ns: new abap.types.Character(5).set('table'), t_prop: temp499})));
    return result;
  }
  async ui_columns() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`columns`), ns: new abap.types.Character(5).set('table')})));
    return result;
  }
  async ui_custom_data() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`customData`), ns: new abap.types.Character(5).set('table')})));
    return result;
  }
  async ui_extension() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`extension`), ns: new abap.types.Character(5).set('table')})));
    return result;
  }
  async ui_row_action() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`RowAction`), ns: new abap.types.String().set(`table`)})));
    return result;
  }
  async ui_row_action_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let icon = INPUT?.icon || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let type = INPUT?.type || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp501 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp502 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp501);
    temp502.get().n.set(new abap.types.String().set(`icon`));
    temp502.get().v.set(icon);
    abap.statements.insertInternal({data: temp502, table: temp501});
    temp502.get().n.set(new abap.types.String().set(`text`));
    temp502.get().v.set(text);
    abap.statements.insertInternal({data: temp502, table: temp501});
    temp502.get().n.set(new abap.types.String().set(`type`));
    temp502.get().v.set(type);
    abap.statements.insertInternal({data: temp502, table: temp501});
    temp502.get().n.set(new abap.types.String().set(`press`));
    temp502.get().v.set(press);
    abap.statements.insertInternal({data: temp502, table: temp501});
    temp502.get().n.set(new abap.types.String().set(`visible`));
    temp502.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp502, table: temp501});
    result.set((await this._generic({name: new abap.types.String().set(`RowActionItem`), ns: new abap.types.String().set(`table`), t_prop: temp501})));
    return result;
  }
  async ui_row_action_template() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`rowActionTemplate`), ns: new abap.types.String().set(`table`)})));
    return result;
  }
  async ui_table(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let rows = INPUT?.rows || new abap.types.Character();
    let columnheadervisible = INPUT?.columnheadervisible || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let enablecellfilter = INPUT?.enablecellfilter || new abap.types.Character();
    let enablegrouping = INPUT?.enablegrouping || new abap.types.Character();
    let enableselectall = INPUT?.enableselectall || new abap.types.Character();
    let firstvisiblerow = INPUT?.firstvisiblerow || new abap.types.Character();
    let fixedbottomrowcount = INPUT?.fixedbottomrowcount || new abap.types.Character();
    let fixedcolumncount = INPUT?.fixedcolumncount || new abap.types.Character();
    let fixedrowcount = INPUT?.fixedrowcount || new abap.types.Character();
    let minautorowcount = INPUT?.minautorowcount || new abap.types.Character();
    let rowactioncount = INPUT?.rowactioncount || new abap.types.Character();
    let rowheight = INPUT?.rowheight || new abap.types.Character();
    let selectionmode = INPUT?.selectionmode || new abap.types.Character();
    let showcolumnvisibilitymenu = INPUT?.showcolumnvisibilitymenu || new abap.types.Character();
    let shownodata = INPUT?.shownodata || new abap.types.Character();
    let selectedindex = INPUT?.selectedindex || new abap.types.Character();
    let threshold = INPUT?.threshold || new abap.types.Character();
    let visiblerowcount = INPUT?.visiblerowcount || new abap.types.Character();
    let visiblerowcountmode = INPUT?.visiblerowcountmode || new abap.types.Character();
    let alternaterowcolors = INPUT?.alternaterowcolors || new abap.types.Character();
    let footer = INPUT?.footer || new abap.types.Character();
    let filter = INPUT?.filter || new abap.types.Character();
    let sort = INPUT?.sort || new abap.types.Character();
    let rowselectionchange = INPUT?.rowselectionchange || new abap.types.Character();
    let customfilter = INPUT?.customfilter || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let flex = INPUT?.flex || new abap.types.Character();
    let selectionbehavior = INPUT?.selectionbehavior || new abap.types.Character();
    let rowmode = INPUT?.rowmode || new abap.types.Character();
    let temp503 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp504 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp503);
    temp504.get().n.set(new abap.types.String().set(`rows`));
    temp504.get().v.set(rows);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`alternateRowColors`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: alternaterowcolors})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`columnHeaderVisible`));
    temp504.get().v.set(columnheadervisible);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`editable`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`class`));
    temp504.get().v.set($class);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`enableCellFilter`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablecellfilter})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`enableGrouping`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablegrouping})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`enableSelectAll`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enableselectall})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`firstVisibleRow`));
    temp504.get().v.set(firstvisiblerow);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`fixedBottomRowCount`));
    temp504.get().v.set(fixedbottomrowcount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`fixedColumnCount`));
    temp504.get().v.set(fixedcolumncount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`rowActionCount`));
    temp504.get().v.set(rowactioncount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`fixedRowCount`));
    temp504.get().v.set(fixedrowcount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`minAutoRowCount`));
    temp504.get().v.set(minautorowcount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`rowHeight`));
    temp504.get().v.set(rowheight);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`selectedIndex`));
    temp504.get().v.set(selectedindex);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`selectionMode`));
    temp504.get().v.set(selectionmode);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`selectionBehavior`));
    temp504.get().v.set(selectionbehavior);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`showColumnVisibilityMenu`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcolumnvisibilitymenu})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`showNoData`));
    temp504.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownodata})));
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`threshold`));
    temp504.get().v.set(threshold);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`visibleRowCount`));
    temp504.get().v.set(visiblerowcount);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`visibleRowCountMode`));
    temp504.get().v.set(visiblerowcountmode);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`footer`));
    temp504.get().v.set(footer);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`filter`));
    temp504.get().v.set(filter);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`sort`));
    temp504.get().v.set(sort);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`customFilter`));
    temp504.get().v.set(customfilter);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`id`));
    temp504.get().v.set(id);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`fl:flexibility`));
    temp504.get().v.set(flex);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`rowSelectionChange`));
    temp504.get().v.set(rowselectionchange);
    abap.statements.insertInternal({data: temp504, table: temp503});
    temp504.get().n.set(new abap.types.String().set(`rowMode`));
    temp504.get().v.set(rowmode);
    abap.statements.insertInternal({data: temp504, table: temp503});
    result.set((await this._generic({name: new abap.types.String().set(`Table`), ns: new abap.types.String().set(`table`), t_prop: temp503})));
    return result;
  }
  async ui_template() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`template`), ns: new abap.types.Character(5).set('table')})));
    return result;
  }
  async upload_set(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let instantupload = INPUT?.instantupload || new abap.types.Character();
    let showicons = INPUT?.showicons || new abap.types.Character();
    let uploadenabled = INPUT?.uploadenabled || new abap.types.Character();
    let terminationenabled = INPUT?.terminationenabled || new abap.types.Character();
    let filetypes = INPUT?.filetypes || new abap.types.Character();
    let maxfilenamelength = INPUT?.maxfilenamelength || new abap.types.Character();
    let maxfilesize = INPUT?.maxfilesize || new abap.types.Character();
    let mediatypes = INPUT?.mediatypes || new abap.types.Character();
    let uploadurl = INPUT?.uploadurl || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let mode = INPUT?.mode || new abap.types.Character();
    let selectionchanged = INPUT?.selectionchanged || new abap.types.Character();
    let uploadcompleted = INPUT?.uploadcompleted || new abap.types.Character();
    let afteritemadded = INPUT?.afteritemadded || new abap.types.Character();
    let samefilenameallowed = INPUT?.samefilenameallowed || new abap.types.Character();
    let uploadbuttoninvisible = INPUT?.uploadbuttoninvisible || new abap.types.Character();
    let directory = INPUT?.directory || new abap.types.Character();
    let multiple = INPUT?.multiple || new abap.types.Character();
    let dragdropdescription = INPUT?.dragdropdescription || new abap.types.Character();
    let dragdroptext = INPUT?.dragdroptext || new abap.types.Character();
    let nodatatext = INPUT?.nodatatext || new abap.types.Character();
    let nodatadescription = INPUT?.nodatadescription || new abap.types.Character();
    let nodataillustrationtype = INPUT?.nodataillustrationtype || new abap.types.Character();
    let afteritemedited = INPUT?.afteritemedited || new abap.types.Character();
    let afteritemremoved = INPUT?.afteritemremoved || new abap.types.Character();
    let beforeitemadded = INPUT?.beforeitemadded || new abap.types.Character();
    let beforeitemedited = INPUT?.beforeitemedited || new abap.types.Character();
    let beforeitemremoved = INPUT?.beforeitemremoved || new abap.types.Character();
    let beforeuploadstarts = INPUT?.beforeuploadstarts || new abap.types.Character();
    let beforeuploadtermination = INPUT?.beforeuploadtermination || new abap.types.Character();
    let filenamelengthexceeded = INPUT?.filenamelengthexceeded || new abap.types.Character();
    let filerenamed = INPUT?.filerenamed || new abap.types.Character();
    let filesizeexceeded = INPUT?.filesizeexceeded || new abap.types.Character();
    let filetypemismatch = INPUT?.filetypemismatch || new abap.types.Character();
    let itemdragstart = INPUT?.itemdragstart || new abap.types.Character();
    let itemdrop = INPUT?.itemdrop || new abap.types.Character();
    let mediatypemismatch = INPUT?.mediatypemismatch || new abap.types.Character();
    let uploadterminated = INPUT?.uploadterminated || new abap.types.Character();
    let temp505 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp506 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp505);
    temp506.get().n.set(new abap.types.String().set(`id`));
    temp506.get().v.set(id);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`instantUpload`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: instantupload})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`showIcons`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showicons})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`uploadEnabled`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: uploadenabled})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`terminationEnabled`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: terminationenabled})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`uploadButtonInvisible`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: uploadbuttoninvisible})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`fileTypes`));
    temp506.get().v.set(filetypes);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`maxFileNameLength`));
    temp506.get().v.set(maxfilenamelength);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`maxFileSize`));
    temp506.get().v.set(maxfilesize);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`mediaTypes`));
    temp506.get().v.set(mediatypes);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`items`));
    temp506.get().v.set(items);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`uploadUrl`));
    temp506.get().v.set(uploadurl);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`mode`));
    temp506.get().v.set(mode);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`fileRenamed`));
    temp506.get().v.set(filerenamed);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`directory`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: directory})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`multiple`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: multiple})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`dragDropDescription`));
    temp506.get().v.set(dragdropdescription);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`dragDropText`));
    temp506.get().v.set(dragdroptext);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`noDataText`));
    temp506.get().v.set(nodatatext);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`noDataDescription`));
    temp506.get().v.set(nodatadescription);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`noDataIllustrationType`));
    temp506.get().v.set(nodataillustrationtype);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`afterItemEdited`));
    temp506.get().v.set(afteritemedited);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`afterItemRemoved`));
    temp506.get().v.set(afteritemremoved);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`beforeItemAdded`));
    temp506.get().v.set(beforeitemadded);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`beforeItemEdited`));
    temp506.get().v.set(beforeitemedited);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`beforeItemRemoved`));
    temp506.get().v.set(beforeitemremoved);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`beforeUploadStarts`));
    temp506.get().v.set(beforeuploadstarts);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`beforeUploadTermination`));
    temp506.get().v.set(beforeuploadtermination);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`fileNameLengthExceeded`));
    temp506.get().v.set(filenamelengthexceeded);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`fileSizeExceeded`));
    temp506.get().v.set(filesizeexceeded);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`fileTypeMismatch`));
    temp506.get().v.set(filetypemismatch);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`itemDragStart`));
    temp506.get().v.set(itemdragstart);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`itemDrop`));
    temp506.get().v.set(itemdrop);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`mediaTypeMismatch`));
    temp506.get().v.set(mediatypemismatch);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`uploadTerminated`));
    temp506.get().v.set(uploadterminated);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`uploadCompleted`));
    temp506.get().v.set(uploadcompleted);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`afterItemAdded`));
    temp506.get().v.set(afteritemadded);
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`sameFilenameAllowed`));
    temp506.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: samefilenameallowed})));
    abap.statements.insertInternal({data: temp506, table: temp505});
    temp506.get().n.set(new abap.types.String().set(`selectionChanged`));
    temp506.get().v.set(selectionchanged);
    abap.statements.insertInternal({data: temp506, table: temp505});
    result.set((await this._generic({name: new abap.types.String().set(`UploadSet`), ns: new abap.types.Character(6).set('upload'), t_prop: temp505})));
    return result;
  }
  async upload_set_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let filename = INPUT?.filename || new abap.types.Character();
    let mediatype = INPUT?.mediatype || new abap.types.Character();
    let url = INPUT?.url || new abap.types.Character();
    let thumbnailurl = INPUT?.thumbnailurl || new abap.types.Character();
    let markers = INPUT?.markers || new abap.types.Character();
    let statuses = INPUT?.statuses || new abap.types.Character();
    let enablededit = INPUT?.enablededit || new abap.types.Character();
    let enabledremove = INPUT?.enabledremove || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let visibleedit = INPUT?.visibleedit || new abap.types.Character();
    let visibleremove = INPUT?.visibleremove || new abap.types.Character();
    let uploadstate = INPUT?.uploadstate || new abap.types.Character();
    let uploadurl = INPUT?.uploadurl || new abap.types.Character();
    let openpressed = INPUT?.openpressed || new abap.types.Character();
    let removepressed = INPUT?.removepressed || new abap.types.Character();
    let temp507 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp508 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp507);
    temp508.get().n.set(new abap.types.String().set(`fileName`));
    temp508.get().v.set(filename);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`mediaType`));
    temp508.get().v.set(mediatype);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`url`));
    temp508.get().v.set(url);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`thumbnailUrl`));
    temp508.get().v.set(thumbnailurl);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`markers`));
    temp508.get().v.set(markers);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`enabledEdit`));
    temp508.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablededit})));
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`enabledRemove`));
    temp508.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabledremove})));
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`selected`));
    temp508.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`visibleEdit`));
    temp508.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visibleedit})));
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`visibleRemove`));
    temp508.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visibleremove})));
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`uploadState`));
    temp508.get().v.set(uploadstate);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`uploadUrl`));
    temp508.get().v.set(uploadurl);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`openPressed`));
    temp508.get().v.set(openpressed);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`removePressed`));
    temp508.get().v.set(removepressed);
    abap.statements.insertInternal({data: temp508, table: temp507});
    temp508.get().n.set(new abap.types.String().set(`statuses`));
    temp508.get().v.set(statuses);
    abap.statements.insertInternal({data: temp508, table: temp507});
    result.set((await this._generic({name: new abap.types.String().set(`UploadSetItem`), ns: new abap.types.Character(6).set('upload'), t_prop: temp507})));
    return result;
  }
  async upload_set_toolbar_placeholder() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`UploadSetToolbarPlaceholder`), ns: new abap.types.String().set(`upload`)})));
    return result;
  }
  async variant_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let executeonselection = INPUT?.executeonselection || new abap.types.Character();
    let global = INPUT?.global || new abap.types.Character();
    let labelreadonly = INPUT?.labelreadonly || new abap.types.Character();
    let lifecyclepackage = INPUT?.lifecyclepackage || new abap.types.Character();
    let lifecycletransportid = INPUT?.lifecycletransportid || new abap.types.Character();
    let namespace = INPUT?.namespace || new abap.types.Character();
    let readonly = INPUT?.readonly || new abap.types.Character();
    let executeonselect = INPUT?.executeonselect || new abap.types.Character();
    let author = INPUT?.author || new abap.types.Character();
    let changeable = INPUT?.changeable || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let favorite = INPUT?.favorite || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let originaltitle = INPUT?.originaltitle || new abap.types.Character();
    let originalexecuteonselect = INPUT?.originalexecuteonselect || new abap.types.Character();
    let remove = INPUT?.remove || new abap.types.Character();
    let rename = INPUT?.rename || new abap.types.Character();
    let originalfavorite = INPUT?.originalfavorite || new abap.types.Character();
    let sharing = INPUT?.sharing || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let temp509 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp510 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp509);
    temp510.get().n.set(new abap.types.String().set(`executeOnSelection`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: executeonselection})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`global`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: global})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`labelReadOnly`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: labelreadonly})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`lifecyclePackage`));
    temp510.get().v.set(lifecyclepackage);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`lifecycleTransportId`));
    temp510.get().v.set(lifecycletransportid);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`namespace`));
    temp510.get().v.set(namespace);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`readOnly`));
    temp510.get().v.set(readonly);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`executeOnSelect`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: executeonselect})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`author`));
    temp510.get().v.set(author);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`changeable`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: changeable})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`enabled`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`favorite`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: favorite})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`key`));
    temp510.get().v.set(key);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`text`));
    temp510.get().v.set(text);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`title`));
    temp510.get().v.set(title);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`textDirection`));
    temp510.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`originalTitle`));
    temp510.get().v.set(originaltitle);
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`originalExecuteOnSelect`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: originalexecuteonselect})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`remove`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: remove})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`rename`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rename})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`originalFavorite`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: originalfavorite})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`sharing`));
    temp510.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sharing})));
    abap.statements.insertInternal({data: temp510, table: temp509});
    temp510.get().n.set(new abap.types.String().set(`change`));
    temp510.get().v.set(change);
    abap.statements.insertInternal({data: temp510, table: temp509});
    result.set((await this._generic({name: new abap.types.String().set(`VariantItem`), ns: new abap.types.String().set(`vm`), t_prop: temp509})));
    return result;
  }
  async variant_items() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`variantItems`), ns: new abap.types.String().set(`vm`)})));
    return result;
  }
  async variant_item_sapm(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let author = INPUT?.author || new abap.types.Character();
    let changeable = INPUT?.changeable || new abap.types.Character();
    let contexts = INPUT?.contexts || new abap.types.Character();
    let executeonselect = INPUT?.executeonselect || new abap.types.Character();
    let favorite = INPUT?.favorite || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let remove = INPUT?.remove || new abap.types.Character();
    let rename = INPUT?.rename || new abap.types.Character();
    let sharing = INPUT?.sharing || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let temp511 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp512 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp511);
    temp512.get().n.set(new abap.types.String().set(`id`));
    temp512.get().v.set(id);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`author`));
    temp512.get().v.set(author);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`changeable`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: changeable})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`enabled`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`favorite`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: favorite})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`remove`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: remove})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`rename`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: rename})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`visible`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`contexts`));
    temp512.get().v.set(contexts);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`key`));
    temp512.get().v.set(key);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`sharing`));
    temp512.get().v.set(sharing);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`text`));
    temp512.get().v.set(text);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`textDirection`));
    temp512.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`title`));
    temp512.get().v.set(title);
    abap.statements.insertInternal({data: temp512, table: temp511});
    temp512.get().n.set(new abap.types.String().set(`executeOnSelect`));
    temp512.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: executeonselect})));
    abap.statements.insertInternal({data: temp512, table: temp511});
    result.set((await this._generic({name: new abap.types.String().set(`VariantItem`), t_prop: temp511})));
    return result;
  }
  async variant_management(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let defaultvariantkey = INPUT?.defaultvariantkey || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let inerrorstate = INPUT?.inerrorstate || new abap.types.Character();
    let initialselectionkey = INPUT?.initialselectionkey || new abap.types.Character();
    let lifecyclesupport = INPUT?.lifecyclesupport || new abap.types.Character();
    let selectionkey = INPUT?.selectionkey || new abap.types.Character();
    let showcreatetile = INPUT?.showcreatetile || new abap.types.Character();
    let showexecuteonselection = INPUT?.showexecuteonselection || new abap.types.Character();
    let showsetasdefault = INPUT?.showsetasdefault || new abap.types.Character();
    let showshare = INPUT?.showshare || new abap.types.Character();
    let standarditemauthor = INPUT?.standarditemauthor || new abap.types.Character();
    let standarditemtext = INPUT?.standarditemtext || new abap.types.Character();
    let usefavorites = INPUT?.usefavorites || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let variantitems = INPUT?.variantitems || new abap.types.Character();
    let manage = INPUT?.manage || new abap.types.Character();
    let save = INPUT?.save || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let uservarcreate = INPUT?.uservarcreate || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp513 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp514 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp513);
    temp514.get().n.set(new abap.types.String().set(`defaultVariantKey`));
    temp514.get().v.set(defaultvariantkey);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`enabled`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`inErrorState`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inerrorstate})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`initialSelectionKey`));
    temp514.get().v.set(initialselectionkey);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`lifecycleSupport`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: lifecyclesupport})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`selectionKey`));
    temp514.get().v.set(selectionkey);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`showCreateTile`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcreatetile})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`showExecuteOnSelection`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showexecuteonselection})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`showSetAsDefault`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsetasdefault})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`showShare`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showshare})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`standardItemAuthor`));
    temp514.get().v.set(standarditemauthor);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`standardItemText`));
    temp514.get().v.set(standarditemtext);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`useFavorites`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: usefavorites})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`variantItems`));
    temp514.get().v.set(variantitems);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`manage`));
    temp514.get().v.set(manage);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`save`));
    temp514.get().v.set(save);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`select`));
    temp514.get().v.set(select);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`id`));
    temp514.get().v.set(id);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`variantCreationByUserAllowed`));
    temp514.get().v.set(uservarcreate);
    abap.statements.insertInternal({data: temp514, table: temp513});
    temp514.get().n.set(new abap.types.String().set(`visible`));
    temp514.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp514, table: temp513});
    result.set((await this._generic({name: new abap.types.String().set(`VariantManagement`), ns: new abap.types.String().set(`vm`), t_prop: temp513})));
    return result;
  }
  async variant_management_fl(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let displaytextfsv = INPUT?.displaytextfsv || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let executeonselectionforstandflt = INPUT?.executeonselectionforstandflt || new abap.types.Character();
    let headerlevel = INPUT?.headerlevel || new abap.types.Character();
    let inerrorstate = INPUT?.inerrorstate || new abap.types.Character();
    let maxwidth = INPUT?.maxwidth || new abap.types.Character();
    let modelname = INPUT?.modelname || new abap.types.Character();
    let resetoncontextchange = INPUT?.resetoncontextchange || new abap.types.Character();
    let showsetasdefault = INPUT?.showsetasdefault || new abap.types.Character();
    let titlestyle = INPUT?.titlestyle || new abap.types.Character();
    let updatevariantinurl = INPUT?.updatevariantinurl || new abap.types.Character();
    let $for = INPUT?.for || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let initialized = INPUT?.initialized || new abap.types.Character();
    let manage = INPUT?.manage || new abap.types.Character();
    let save = INPUT?.save || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let temp515 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp516 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp515);
    temp516.get().n.set(new abap.types.String().set(`displayTextForExecuteOnSelectionForStandardVariant`));
    temp516.get().v.set(displaytextfsv);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`editable`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`executeOnSelectionForStandardDefault`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: executeonselectionforstandflt})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`headerLevel`));
    temp516.get().v.set(headerlevel);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`inErrorState`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inerrorstate})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`maxWidth`));
    temp516.get().v.set(maxwidth);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`modelName`));
    temp516.get().v.set(modelname);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`resetOnContextChange`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: resetoncontextchange})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`showSetAsDefault`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsetasdefault})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`titleStyle`));
    temp516.get().v.set(titlestyle);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`updateVariantInURL`));
    temp516.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: updatevariantinurl})));
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`cancel`));
    temp516.get().v.set(cancel);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`initialized`));
    temp516.get().v.set(initialized);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`manage`));
    temp516.get().v.set(manage);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`save`));
    temp516.get().v.set(save);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`select`));
    temp516.get().v.set(select);
    abap.statements.insertInternal({data: temp516, table: temp515});
    temp516.get().n.set(new abap.types.String().set(`for`));
    temp516.get().v.set($for);
    abap.statements.insertInternal({data: temp516, table: temp515});
    result.set((await this._generic({name: new abap.types.String().set(`VariantManagement`), ns: new abap.types.String().set(`flvm`), t_prop: temp515})));
    return result;
  }
  async variant_management_sapm(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let creationallowed = INPUT?.creationallowed || new abap.types.Character();
    let defaultkey = INPUT?.defaultkey || new abap.types.Character();
    let inerrorstate = INPUT?.inerrorstate || new abap.types.Character();
    let level = INPUT?.level || new abap.types.Character();
    let maxwidth = INPUT?.maxwidth || new abap.types.Character();
    let modified = INPUT?.modified || new abap.types.Character();
    let popovertitle = INPUT?.popovertitle || new abap.types.Character();
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let showsaveas = INPUT?.showsaveas || new abap.types.Character();
    let supportapplyautomatically = INPUT?.supportapplyautomatically || new abap.types.Character();
    let supportcontexts = INPUT?.supportcontexts || new abap.types.Character();
    let supportdefault = INPUT?.supportdefault || new abap.types.Character();
    let supportfavorites = INPUT?.supportfavorites || new abap.types.Character();
    let supportpublic = INPUT?.supportpublic || new abap.types.Character();
    let titlestyle = INPUT?.titlestyle || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let items = INPUT?.items || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let manage = INPUT?.manage || new abap.types.Character();
    let managecancel = INPUT?.managecancel || new abap.types.Character();
    let save = INPUT?.save || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp517 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp518 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp517);
    temp518.get().n.set(new abap.types.String().set(`id`));
    temp518.get().v.set(id);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`defaultKey`));
    temp518.get().v.set(defaultkey);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`level`));
    temp518.get().v.set(level);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`maxWidth`));
    temp518.get().v.set(maxwidth);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`popoverTitle`));
    temp518.get().v.set(popovertitle);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`selectedKey`));
    temp518.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`titleStyle`));
    temp518.get().v.set(titlestyle);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`cancel`));
    temp518.get().v.set(cancel);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`manage`));
    temp518.get().v.set(manage);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`manageCancel`));
    temp518.get().v.set(managecancel);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`save`));
    temp518.get().v.set(save);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`select`));
    temp518.get().v.set(select);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`items`));
    temp518.get().v.set(items);
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`creationAllowed`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: creationallowed})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`inErrorState`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: inerrorstate})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`modified`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: modified})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`showFooter`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`showSaveAs`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showsaveas})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`supportApplyAutomatically`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: supportapplyautomatically})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`supportContexts`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: supportcontexts})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`supportDefault`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: supportdefault})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`supportFavorites`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: supportfavorites})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`supportPublic`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: supportpublic})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    temp518.get().n.set(new abap.types.String().set(`visible`));
    temp518.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp518, table: temp517});
    result.set((await this._generic({name: new abap.types.String().set(`VariantManagement`), t_prop: temp517})));
    return result;
  }
  async vbox(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let justifycontent = INPUT?.justifycontent || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let rendertype = INPUT?.rendertype || new abap.types.Character();
    let aligncontent = INPUT?.aligncontent || new abap.types.Character();
    let direction = INPUT?.direction || new abap.types.Character();
    let alignitems = INPUT?.alignitems || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let wrap = INPUT?.wrap || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let displayinline = INPUT?.displayinline || new abap.types.Character();
    let fitcontainer = INPUT?.fitcontainer || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let temp519 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp520 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp519);
    temp520.get().n.set(new abap.types.String().set(`height`));
    temp520.get().v.set(height);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`id`));
    temp520.get().v.set(id);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`justifyContent`));
    temp520.get().v.set(justifycontent);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`renderType`));
    temp520.get().v.set(rendertype);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`alignContent`));
    temp520.get().v.set(aligncontent);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`alignItems`));
    temp520.get().v.set(alignitems);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`width`));
    temp520.get().v.set(width);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`wrap`));
    temp520.get().v.set(wrap);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp520.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`direction`));
    temp520.get().v.set(direction);
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`displayInline`));
    temp520.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: displayinline})));
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`visible`));
    temp520.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`fitContainer`));
    temp520.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: fitcontainer})));
    abap.statements.insertInternal({data: temp520, table: temp519});
    temp520.get().n.set(new abap.types.String().set(`class`));
    temp520.get().v.set($class);
    abap.statements.insertInternal({data: temp520, table: temp519});
    result.set((await this._generic({name: new abap.types.String().set(`VBox`), t_prop: temp519})));
    return result;
  }
  async vertical_layout(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let $class = INPUT?.class || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let temp521 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp522 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp521);
    temp522.get().n.set(new abap.types.String().set(`id`));
    temp522.get().v.set(id);
    abap.statements.insertInternal({data: temp522, table: temp521});
    temp522.get().n.set(new abap.types.String().set(`visible`));
    temp522.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp522, table: temp521});
    temp522.get().n.set(new abap.types.String().set(`enabled`));
    temp522.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp522, table: temp521});
    temp522.get().n.set(new abap.types.String().set(`class`));
    temp522.get().v.set($class);
    abap.statements.insertInternal({data: temp522, table: temp521});
    temp522.get().n.set(new abap.types.String().set(`width`));
    temp522.get().v.set(width);
    abap.statements.insertInternal({data: temp522, table: temp521});
    result.set((await this._generic({name: new abap.types.String().set(`VerticalLayout`), ns: new abap.types.String().set(`layout`), t_prop: temp521})));
    return result;
  }
  async view_settings_dialog(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let confirm = INPUT?.confirm || new abap.types.Character();
    let cancel = INPUT?.cancel || new abap.types.Character();
    let filterdetailpageopened = INPUT?.filterdetailpageopened || new abap.types.Character();
    let reset = INPUT?.reset || new abap.types.Character();
    let resetfilters = INPUT?.resetfilters || new abap.types.Character();
    let filtersearchoperator = INPUT?.filtersearchoperator || new abap.types.Character();
    let groupdescending = INPUT?.groupdescending || new abap.types.Character();
    let sortdescending = INPUT?.sortdescending || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let titlealignment = INPUT?.titlealignment || new abap.types.Character();
    let selectedgroupitem = INPUT?.selectedgroupitem || new abap.types.Character();
    let selectedpresetfilteritem = INPUT?.selectedpresetfilteritem || new abap.types.Character();
    let selectedsortitem = INPUT?.selectedsortitem || new abap.types.Character();
    let filteritems = INPUT?.filteritems || new abap.types.Character();
    let sortitems = INPUT?.sortitems || new abap.types.Character();
    let groupitems = INPUT?.groupitems || new abap.types.Character();
    let temp523 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp524 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp523);
    temp524.get().n.set(new abap.types.String().set(`confirm`));
    temp524.get().v.set(confirm);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`cancel`));
    temp524.get().v.set(cancel);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`filterDetailPageOpened`));
    temp524.get().v.set(filterdetailpageopened);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`reset`));
    temp524.get().v.set(reset);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`resetFilters`));
    temp524.get().v.set(resetfilters);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`filterSearchOperator`));
    temp524.get().v.set(filtersearchoperator);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`groupDescending`));
    temp524.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: groupdescending})));
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`sortDescending`));
    temp524.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: sortdescending})));
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`title`));
    temp524.get().v.set(title);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`selectedGroupItem`));
    temp524.get().v.set(selectedgroupitem);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`selectedPresetFilterItem`));
    temp524.get().v.set(selectedpresetfilteritem);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`selectedSortItem`));
    temp524.get().v.set(selectedsortitem);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`selectedSortItem`));
    temp524.get().v.set(selectedsortitem);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`filterItems`));
    temp524.get().v.set(filteritems);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`sortItems`));
    temp524.get().v.set(sortitems);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`groupItems`));
    temp524.get().v.set(groupitems);
    abap.statements.insertInternal({data: temp524, table: temp523});
    temp524.get().n.set(new abap.types.String().set(`titleAlignment`));
    temp524.get().v.set(titlealignment);
    abap.statements.insertInternal({data: temp524, table: temp523});
    result.set((await this._generic({name: new abap.types.String().set(`ViewSettingsDialog`), t_prop: temp523})));
    return result;
  }
  async view_settings_filter_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let enabled = INPUT?.enabled || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let multiselect = INPUT?.multiselect || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let temp525 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp526 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp525);
    temp526.get().n.set(new abap.types.String().set(`enabled`));
    temp526.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp526, table: temp525});
    temp526.get().n.set(new abap.types.String().set(`key`));
    temp526.get().v.set(key);
    abap.statements.insertInternal({data: temp526, table: temp525});
    temp526.get().n.set(new abap.types.String().set(`selected`));
    temp526.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp526, table: temp525});
    temp526.get().n.set(new abap.types.String().set(`text`));
    temp526.get().v.set(text);
    abap.statements.insertInternal({data: temp526, table: temp525});
    temp526.get().n.set(new abap.types.String().set(`textDirection`));
    temp526.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp526, table: temp525});
    temp526.get().n.set(new abap.types.String().set(`multiSelect`));
    temp526.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: multiselect})));
    abap.statements.insertInternal({data: temp526, table: temp525});
    result.set((await this._generic({name: new abap.types.String().set(`ViewSettingsFilterItem`), t_prop: temp525})));
    return result;
  }
  async view_settings_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let enabled = INPUT?.enabled || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let selected = INPUT?.selected || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let temp527 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp528 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp527);
    temp528.get().n.set(new abap.types.String().set(`enabled`));
    temp528.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp528, table: temp527});
    temp528.get().n.set(new abap.types.String().set(`key`));
    temp528.get().v.set(key);
    abap.statements.insertInternal({data: temp528, table: temp527});
    temp528.get().n.set(new abap.types.String().set(`selected`));
    temp528.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: selected})));
    abap.statements.insertInternal({data: temp528, table: temp527});
    temp528.get().n.set(new abap.types.String().set(`text`));
    temp528.get().v.set(text);
    abap.statements.insertInternal({data: temp528, table: temp527});
    temp528.get().n.set(new abap.types.String().set(`textDirection`));
    temp528.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp528, table: temp527});
    result.set((await this._generic({name: new abap.types.String().set(`ViewSettingsItem`), t_prop: temp527})));
    return result;
  }
  async visible_horizon() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`visibleHorizon`), ns: new abap.types.String().set(`axistime`)})));
    return result;
  }
  async vos() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`vos`), ns: new abap.types.String().set(`vbm`)})));
    return result;
  }
  async wizard(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let backgrounddesign = INPUT?.backgrounddesign || new abap.types.Character();
    let busy = INPUT?.busy || new abap.types.Character();
    let busyindicatordelay = INPUT?.busyindicatordelay || new abap.types.Character();
    let busyindicatorsize = INPUT?.busyindicatorsize || new abap.types.Character();
    let enablebranching = INPUT?.enablebranching || new abap.types.Character();
    let fieldgroupids = INPUT?.fieldgroupids || new abap.types.Character();
    let finishbuttontext = INPUT?.finishbuttontext || new abap.types.Character();
    let height = INPUT?.height || new abap.types.Character();
    let rendermode = INPUT?.rendermode || new abap.types.Character();
    let shownextbutton = INPUT?.shownextbutton || new abap.types.Character();
    let steptitlelevel = INPUT?.steptitlelevel || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let complete = INPUT?.complete || new abap.types.Character();
    let navigationchange = INPUT?.navigationchange || new abap.types.Character();
    let stepactivate = INPUT?.stepactivate || new abap.types.Character();
    let temp529 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp530 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp529);
    temp530.get().n.set(new abap.types.String().set(`id`));
    temp530.get().v.set(id);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`class`));
    temp530.get().v.set($class);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`backgroundDesign`));
    temp530.get().v.set(backgrounddesign);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`busy`));
    temp530.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: busy})));
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`busyIndicatorDelay`));
    temp530.get().v.set(busyindicatordelay);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`busyIndicatorSize`));
    temp530.get().v.set(busyindicatorsize);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`enableBranching`));
    temp530.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enablebranching})));
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`fieldGroupIds`));
    temp530.get().v.set(fieldgroupids);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`finishButtonText`));
    temp530.get().v.set(finishbuttontext);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`height`));
    temp530.get().v.set(height);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`renderMode`));
    temp530.get().v.set(rendermode);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`showNextButton`));
    temp530.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shownextbutton})));
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`stepTitleLevel`));
    temp530.get().v.set(steptitlelevel);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`visible`));
    temp530.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`width`));
    temp530.get().v.set(width);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`complete`));
    temp530.get().v.set(complete);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`navigationChange`));
    temp530.get().v.set(navigationchange);
    abap.statements.insertInternal({data: temp530, table: temp529});
    temp530.get().n.set(new abap.types.String().set(`stepActivate`));
    temp530.get().v.set(stepactivate);
    abap.statements.insertInternal({data: temp530, table: temp529});
    result.set((await this._generic({name: new abap.types.String().set(`Wizard`), t_prop: temp529})));
    return result;
  }
  async wizard_step(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let busy = INPUT?.busy || new abap.types.Character();
    let busyindicatordelay = INPUT?.busyindicatordelay || new abap.types.Character();
    let busyindicatorsize = INPUT?.busyindicatorsize || new abap.types.Character();
    let fieldgroupids = INPUT?.fieldgroupids || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let optional = INPUT?.optional || new abap.types.Character();
    let title = INPUT?.title || new abap.types.Character();
    let validated = INPUT?.validated || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let activate = INPUT?.activate || new abap.types.Character();
    let subsequentsteps = INPUT?.subsequentsteps || new abap.types.Character();
    let nextstep = INPUT?.nextstep || new abap.types.Character();
    let complete = INPUT?.complete || new abap.types.Character();
    let temp531 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp532 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp531);
    temp532.get().n.set(new abap.types.String().set(`id`));
    temp532.get().v.set(id);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`busy`));
    temp532.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: busy})));
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`busyIndicatorDelay`));
    temp532.get().v.set(busyindicatordelay);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`busyIndicatorSize`));
    temp532.get().v.set(busyindicatorsize);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`fieldGroupIds`));
    temp532.get().v.set(fieldgroupids);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`icon`));
    temp532.get().v.set(icon);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`optional`));
    temp532.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: optional})));
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`title`));
    temp532.get().v.set(title);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`validated`));
    temp532.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: validated})));
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`visible`));
    temp532.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`activate`));
    temp532.get().v.set(activate);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`complete`));
    temp532.get().v.set(complete);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`nextStep`));
    temp532.get().v.set(nextstep);
    abap.statements.insertInternal({data: temp532, table: temp531});
    temp532.get().n.set(new abap.types.String().set(`subsequentSteps`));
    temp532.get().v.set(subsequentsteps);
    abap.statements.insertInternal({data: temp532, table: temp531});
    result.set((await this._generic({name: new abap.types.String().set(`WizardStep`), t_prop: temp531})));
    return result;
  }
  async xml_get() {
    let result = new abap.types.String({qualifiedName: "STRING"});
    let temp533 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp534 = new abap.types.Integer({qualifiedName: "I"});
    let lt_prop = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"HASHED","isUnique":true,"keyFields":["N"]},"secondary":[]}, "");
    let temp535 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"HASHED","isUnique":true,"keyFields":["N"]},"secondary":[]}, "");
    let temp536 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp537 = new abap.types.String({qualifiedName: "STRING"});
    let lr_ns = new abap.types.DataReference(new abap.types.String({qualifiedName: "STRING"}));
    let ls_prop = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp4 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp5 = new abap.types.Integer({qualifiedName: "I"});
    let temp538 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp539 = new abap.types.String({qualifiedName: "STRING"});
    let lv_tmp2 = new abap.types.String({qualifiedName: "STRING"});
    let temp540 = new abap.types.String({qualifiedName: "STRING"});
    let val = new abap.types.String({qualifiedName: "STRING"});
    let row = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    let temp6 = new abap.types.String({qualifiedName: "STRING"});
    let lv_tmp3 = new abap.types.String({qualifiedName: "STRING"});
    let lr_child = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let temp541 = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let temp542 = new abap.types.String({qualifiedName: "STRING"});
    let lv_ns = new abap.types.String({qualifiedName: "STRING"});
    let unique183 = this.mv_name;
    if (abap.compare.eq(unique183, new abap.types.String().set(`ZZPLAIN`))) {
      temp534.set(abap.builtin.sy.get().tabix);
      abap.statements.readTable(this.mt_prop,{into: temp533,
        withKey: (i) => {return abap.compare.eq(i.n, new abap.types.String().set(`VALUE`));},
        withKeyValue: [{key: (i) => {return i.n}, value: new abap.types.String().set(`VALUE`)}],
        usesTableLine: false,
        withKeySimple: {"n": new abap.types.String().set(`VALUE`)}});
      abap.builtin.sy.get().tabix.set(temp534);
      if (abap.compare.ne(abap.builtin.sy.get().subrc, abap.IntegerFactory.get(0))) {
        abap.statements.assert(abap.compare.eq(abap.IntegerFactory.get(1), abap.IntegerFactory.get(0)));
      }
      result.set(temp533.get().v);
      return result;
    } else {
    }
    if (abap.compare.eq(this.me, this.mo_root)) {
      abap.statements.clear(temp535);
      temp536.get().n.set(new abap.types.String().set(`z2ui5`));
      temp536.get().v.set(new abap.types.String().set(`z2ui5`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`layout`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.layout`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`networkgraph`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.commons.networkgraph`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`nglayout`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.commons.networkgraph.layout`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`ngcustom`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.commons.sample.NetworkGraphCustomRendering`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`table`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.table`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`template`));
      temp536.get().v.set(new abap.types.String().set(`http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`customData`));
      temp536.get().v.set(new abap.types.String().set(`http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`f`));
      temp536.get().v.set(new abap.types.String().set(`sap.f`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`columnmenu`));
      temp536.get().v.set(new abap.types.String().set(`sap.m.table.columnmenu`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`card`));
      temp536.get().v.set(new abap.types.String().set(`sap.f.cards`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`form`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.layout.form`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`editor`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.codeeditor`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`mchart`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.microchart`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`webc`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.webc.main`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`uxap`));
      temp536.get().v.set(new abap.types.String().set(`sap.uxap`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`sap`));
      temp536.get().v.set(new abap.types.String().set(`sap`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`text`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.richtexteditor`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`html`));
      temp536.get().v.set(new abap.types.String().set(`http://www.w3.org/1999/xhtml`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`fb`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.comp.filterbar`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`u`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.unified`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`gantt`));
      temp536.get().v.set(new abap.types.String().set(`sap.gantt.simple`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`axistime`));
      temp536.get().v.set(new abap.types.String().set(`sap.gantt.axistime`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`config`));
      temp536.get().v.set(new abap.types.String().set(`sap.gantt.config`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`shapes`));
      temp536.get().v.set(new abap.types.String().set(`sap.gantt.simple.shapes`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`commons`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.commons`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`si`));
      temp536.get().v.set(new abap.types.String().set(`sap.suite.ui.commons.statusindicator`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`vm`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.comp.variants`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`viz`));
      temp536.get().v.set(new abap.types.String().set(`sap.viz.ui5.controls`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`vk`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.vk`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`vbm`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.vbm`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`ndc`));
      temp536.get().v.set(new abap.types.String().set(`sap.ndc`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`svm`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.comp.smartvariants`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`flvm`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.fl.variants`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`p13n`));
      temp536.get().v.set(new abap.types.String().set(`sap.m.p13n`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`upload`));
      temp536.get().v.set(new abap.types.String().set(`sap.m.upload`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`fl`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.fl`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`plugins`));
      temp536.get().v.set(new abap.types.String().set(`sap.m.plugins`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`tnt`));
      temp536.get().v.set(new abap.types.String().set(`sap.tnt`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`mdc`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.mdc`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      temp536.get().n.set(new abap.types.String().set(`trm`));
      temp536.get().v.set(new abap.types.String().set(`sap.ui.table.rowmodes`));
      abap.statements.insertInternal({data: temp536, table: temp535});
      lt_prop.set(temp535);
      for await (const unique184 of abap.statements.loop(this.mt_ns,{where: async (I) => {return abap.compare.initial(I.table_line) === false && abap.compare.ne(I.table_line, new abap.types.String().set(`mvc`)) && abap.compare.ne(I.table_line, new abap.types.String().set(`core`));}})) {
        lr_ns.assign(unique184);
        try {
          temp5.set(abap.builtin.sy.get().tabix);
          abap.statements.readTable(lt_prop,{into: temp4,
            withKey: (i) => {return abap.compare.eq(i.n, lr_ns.dereference());},
            withKeyValue: [{key: (i) => {return i.n}, value: lr_ns.dereference()}],
            usesTableLine: false,
            withKeySimple: {"n": lr_ns.dereference()}});
          abap.builtin.sy.get().tabix.set(temp5);
          if (abap.compare.ne(abap.builtin.sy.get().subrc, abap.IntegerFactory.get(0))) {
            abap.statements.assert(abap.compare.eq(abap.IntegerFactory.get(1), abap.IntegerFactory.get(0)));
          }
          ls_prop.set(temp4);
          abap.statements.clear(temp538);
          temp538.get().n.set(abap.operators.concat(new abap.types.String().set(`xmlns:`),ls_prop.get().n));
          temp538.get().v.set(ls_prop.get().v);
          abap.statements.insertInternal({data: temp538, table: this.mt_prop});
        } catch (e) {
          if ((abap.Classes['CX_ROOT'] && e instanceof abap.Classes['CX_ROOT'])) {
            await abap.Classes['Z2UI5_CL_UTIL'].x_raise({v: new abap.types.String().set(`XML_VIEW_ERROR_NO_NAMESPACE_FOUND_FOR:  ${abap.templateFormatting(lr_ns.dereference())}`)});
          } else {
            throw e;
          }
        }
      }
    }
    if (abap.compare.ne(this.mv_ns, new abap.types.String().set(``))) {
      temp539.set(new abap.types.String().set(`${abap.templateFormatting(this.mv_ns)}:`));
    } else {
      abap.statements.clear(temp539);
    }
    lv_tmp2.set(temp539);
    val.set(new abap.types.String().set(``));
    for await (const unique185 of abap.statements.loop(this.mt_prop,{where: async (I) => {return abap.compare.ne(I.v, new abap.types.String().set(``));}})) {
      row.set(unique185);
      if (abap.compare.eq(row.get().v, abap.builtin.abap_true)) {
        temp6.set(new abap.types.String().set(`true`));
      } else {
        temp6.set(row.get().v);
      }
      val.set(new abap.types.String().set(`${abap.templateFormatting(val)} ${abap.templateFormatting(row.get().n)}="${abap.templateFormatting(abap.builtin.escape({val: temp6, format: abap.Classes['CL_ABAP_FORMAT'].e_xml_attr}))}"`));
    }
    temp540.set(val);
    lv_tmp3.set(temp540);
    result.set(new abap.types.String().set(`${abap.templateFormatting(result)} <${abap.templateFormatting(lv_tmp2)}${abap.templateFormatting(this.mv_name)}${abap.templateFormatting(lv_tmp3)}`));
    if (abap.compare.initial(this.mt_child)) {
      result.set(new abap.types.String().set(`${abap.templateFormatting(result)}/>`));
      return result;
    }
    result.set(new abap.types.String().set(`${abap.templateFormatting(result)}>`));
    for await (const unique186 of abap.statements.loop(this.mt_child)) {
      lr_child.set(unique186);
      await abap.statements.cast(temp541, lr_child);
      result.set(abap.operators.concat(result,(await temp541.get().xml_get())));
    }
    if (abap.compare.ne(this.mv_ns, new abap.types.String().set(``))) {
      temp542.set(new abap.types.String().set(`${abap.templateFormatting(this.mv_ns)}:`));
    } else {
      abap.statements.clear(temp542);
    }
    lv_ns.set(temp542);
    result.set(new abap.types.String().set(`${abap.templateFormatting(result)}</${abap.templateFormatting(lv_ns)}${abap.templateFormatting(this.mv_name)}>`));
    return result;
  }
  async _cc_plain_xml(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let val = INPUT?.val || new abap.types.Character();
    let temp543 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp544 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp543);
    temp544.get().n.set(new abap.types.String().set(`VALUE`));
    temp544.get().v.set(val);
    abap.statements.insertInternal({data: temp544, table: temp543});
    await this._generic({name: new abap.types.String().set(`ZZPLAIN`), t_prop: temp543});
    return result;
  }
  async _generic(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let name = INPUT?.name;
    let ns = INPUT?.ns || new abap.types.Character();
    let t_prop = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    if (INPUT && INPUT.t_prop) {t_prop.set(INPUT.t_prop);}
    let temp545 = new abap.types.String({qualifiedName: "STRING"});
    let result2 = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    try {
      temp545.set(ns);
      abap.statements.insertInternal({data: temp545, table: this.mo_root.get().mt_ns});
    } catch (e) {
      if ((abap.Classes['CX_ROOT'] && e instanceof abap.Classes['CX_ROOT'])) {
      } else {
        throw e;
      }
    }
    result2.set(await (new abap.Classes['Z2UI5_CL_XML_VIEW']()).constructor_());
    result2.get().mv_name.set(name);
    result2.get().mv_ns.set(ns);
    result2.get().mt_prop.set(t_prop);
    result2.get().mo_parent.set(this.me);
    result2.get().mo_root.set(this.mo_root);
    abap.statements.insertInternal({data: result2, table: this.mt_child});
    this.mo_root.get().mo_previous.set(result2);
    result.set(result2);
    return result;
  }
  async _generic_property(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let val = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    if (INPUT && INPUT.val) {val.set(INPUT.val);}
    abap.statements.insertInternal({data: val, table: this.mt_prop});
    result.set(this.me);
    return result;
  }
  async _z2ui5() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW_CC", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW_CC"});
    result.set(await (new abap.Classes['Z2UI5_CL_XML_VIEW_CC']()).constructor_({view: this.me}));
    return result;
  }
  async p_cell_selector(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let temp546 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp547 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp546);
    temp547.get().n.set(new abap.types.String().set(`id`));
    temp547.get().v.set(id);
    abap.statements.insertInternal({data: temp547, table: temp546});
    await this._generic({name: new abap.types.String().set(`CellSelector`), ns: new abap.types.String().set(`plugins`), t_prop: temp546});
    return result;
  }
  async p_copy_provider(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let extract_data = INPUT?.extract_data || new abap.types.Character();
    let copy = INPUT?.copy || new abap.types.Character();
    let temp548 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp549 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp548);
    temp549.get().n.set(new abap.types.String().set(`id`));
    temp549.get().v.set(id);
    abap.statements.insertInternal({data: temp549, table: temp548});
    temp549.get().n.set(new abap.types.String().set(`copy`));
    temp549.get().v.set(copy);
    abap.statements.insertInternal({data: temp549, table: temp548});
    temp549.get().n.set(new abap.types.String().set(`extractData`));
    temp549.get().v.set(extract_data);
    abap.statements.insertInternal({data: temp549, table: temp548});
    await this._generic({name: new abap.types.String().set(`CopyProvider`), ns: new abap.types.String().set(`plugins`), t_prop: temp548});
    return result;
  }
  async date_range_selection(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let value = INPUT?.value || new abap.types.Character();
    let placeholder = INPUT?.placeholder || new abap.types.Character();
    let displayformat = INPUT?.displayformat || new abap.types.Character();
    let valueformat = INPUT?.valueformat || new abap.types.Character();
    let required = INPUT?.required || new abap.types.Character();
    let valuestate = INPUT?.valuestate || new abap.types.Character();
    let valuestatetext = INPUT?.valuestatetext || new abap.types.Character();
    let enabled = INPUT?.enabled || new abap.types.Character();
    let showcurrentdatebutton = INPUT?.showcurrentdatebutton || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let hideinput = INPUT?.hideinput || new abap.types.Character();
    let showfooter = INPUT?.showfooter || new abap.types.Character();
    let visible = INPUT?.visible || new abap.types.Character();
    let showvaluestatemessage = INPUT?.showvaluestatemessage || new abap.types.Character();
    let mindate = INPUT?.mindate || new abap.types.Character();
    let maxdate = INPUT?.maxdate || new abap.types.Character();
    let editable = INPUT?.editable || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let calendarweeknumbering = INPUT?.calendarweeknumbering || new abap.types.Character();
    let displayformattype = INPUT?.displayformattype || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let textdirection = INPUT?.textdirection || new abap.types.Character();
    let textalign = INPUT?.textalign || new abap.types.Character();
    let name = INPUT?.name || new abap.types.Character();
    let datevalue = INPUT?.datevalue || new abap.types.Character();
    let seconddatevalue = INPUT?.seconddatevalue || new abap.types.Character();
    let initialfocuseddatevalue = INPUT?.initialfocuseddatevalue || new abap.types.Character();
    let delimiter = INPUT?.delimiter || new abap.types.Character();
    let temp550 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp551 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp550);
    temp551.get().n.set(new abap.types.String().set(`value`));
    temp551.get().v.set(value);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`displayFormat`));
    temp551.get().v.set(displayformat);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`displayFormatType`));
    temp551.get().v.set(displayformattype);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`valueFormat`));
    temp551.get().v.set(valueformat);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`required`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: required})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`valueState`));
    temp551.get().v.set(valuestate);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`valueStateText`));
    temp551.get().v.set(valuestatetext);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`placeholder`));
    temp551.get().v.set(placeholder);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`textAlign`));
    temp551.get().v.set(textalign);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`textDirection`));
    temp551.get().v.set(textdirection);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`change`));
    temp551.get().v.set(change);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`maxDate`));
    temp551.get().v.set(maxdate);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`minDate`));
    temp551.get().v.set(mindate);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`width`));
    temp551.get().v.set(width);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`id`));
    temp551.get().v.set(id);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`dateValue`));
    temp551.get().v.set(datevalue);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`secondDateValue`));
    temp551.get().v.set(seconddatevalue);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`name`));
    temp551.get().v.set(name);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`class`));
    temp551.get().v.set($class);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`calendarWeekNumbering`));
    temp551.get().v.set(calendarweeknumbering);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`initialFocusedDateValue`));
    temp551.get().v.set(initialfocuseddatevalue);
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`enabled`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: enabled})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`visible`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: visible})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`editable`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: editable})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`hideInput`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: hideinput})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`showFooter`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showfooter})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`showValueStateMessage`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showvaluestatemessage})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`showCurrentDateButton`));
    temp551.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showcurrentdatebutton})));
    abap.statements.insertInternal({data: temp551, table: temp550});
    temp551.get().n.set(new abap.types.String().set(`delimiter`));
    temp551.get().v.set(delimiter);
    abap.statements.insertInternal({data: temp551, table: temp550});
    await this._generic({name: new abap.types.String().set(`DateRangeSelection`), t_prop: temp550});
    return result;
  }
  async toolbar_layout_data(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let maxwidth = INPUT?.maxwidth || new abap.types.Character();
    let minwidth = INPUT?.minwidth || new abap.types.Character();
    let shrinkable = INPUT?.shrinkable || new abap.types.Character();
    let temp552 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp553 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp552);
    temp553.get().n.set(new abap.types.String().set(`id`));
    temp553.get().v.set(id);
    abap.statements.insertInternal({data: temp553, table: temp552});
    temp553.get().n.set(new abap.types.String().set(`maxWidth`));
    temp553.get().v.set(maxwidth);
    abap.statements.insertInternal({data: temp553, table: temp552});
    temp553.get().n.set(new abap.types.String().set(`minWidth`));
    temp553.get().v.set(minwidth);
    abap.statements.insertInternal({data: temp553, table: temp552});
    temp553.get().n.set(new abap.types.String().set(`shrinkable`));
    temp553.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: shrinkable})));
    abap.statements.insertInternal({data: temp553, table: temp552});
    result.set((await this._generic({name: new abap.types.String().set(`ToolbarLayoutData`), t_prop: temp552})));
    return result;
  }
  async feed_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let contenttext = INPUT?.contenttext || new abap.types.Character();
    let subheader = INPUT?.subheader || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp554 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp555 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp554);
    temp555.get().n.set(new abap.types.String().set(`contentText`));
    temp555.get().v.set(contenttext);
    abap.statements.insertInternal({data: temp555, table: temp554});
    temp555.get().n.set(new abap.types.String().set(`subheader`));
    temp555.get().v.set(subheader);
    abap.statements.insertInternal({data: temp555, table: temp554});
    temp555.get().n.set(new abap.types.String().set(`value`));
    temp555.get().v.set(value);
    abap.statements.insertInternal({data: temp555, table: temp554});
    temp555.get().n.set(new abap.types.String().set(`class`));
    temp555.get().v.set($class);
    abap.statements.insertInternal({data: temp555, table: temp554});
    temp555.get().n.set(new abap.types.String().set(`press`));
    temp555.get().v.set(press);
    abap.statements.insertInternal({data: temp555, table: temp554});
    result.set((await this._generic({name: new abap.types.String().set(`FeedContent`), t_prop: temp554})));
    return result;
  }
  async news_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let contenttext = INPUT?.contenttext || new abap.types.Character();
    let subheader = INPUT?.subheader || new abap.types.Character();
    let press = INPUT?.press || new abap.types.Character();
    let temp556 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp557 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp556);
    temp557.get().n.set(new abap.types.String().set(`contentText`));
    temp557.get().v.set(contenttext);
    abap.statements.insertInternal({data: temp557, table: temp556});
    temp557.get().n.set(new abap.types.String().set(`subheader`));
    temp557.get().v.set(subheader);
    abap.statements.insertInternal({data: temp557, table: temp556});
    temp557.get().n.set(new abap.types.String().set(`press`));
    temp557.get().v.set(press);
    abap.statements.insertInternal({data: temp557, table: temp556});
    result.set((await this._generic({name: new abap.types.String().set(`NewsContent`), t_prop: temp556})));
    return result;
  }
  async splitter(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let height = INPUT?.height || new abap.types.Character();
    let orientation = INPUT?.orientation || new abap.types.Character();
    let width = INPUT?.width || new abap.types.Character();
    let temp558 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp559 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp558);
    temp559.get().n.set(new abap.types.String().set(`height`));
    temp559.get().v.set(height);
    abap.statements.insertInternal({data: temp559, table: temp558});
    temp559.get().n.set(new abap.types.String().set(`orientation`));
    temp559.get().v.set(orientation);
    abap.statements.insertInternal({data: temp559, table: temp558});
    temp559.get().n.set(new abap.types.String().set(`width`));
    temp559.get().v.set(width);
    abap.statements.insertInternal({data: temp559, table: temp558});
    result.set((await this._generic({name: new abap.types.String().set(`Splitter`), ns: new abap.types.String().set(`layout`), t_prop: temp558})));
    return result;
  }
  async invisible_text(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns;
    let id = INPUT?.id || new abap.types.Character();
    let text = INPUT?.text || new abap.types.Character();
    let temp560 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp561 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp560);
    temp561.get().n.set(new abap.types.String().set(`id`));
    temp561.get().v.set(id);
    abap.statements.insertInternal({data: temp561, table: temp560});
    temp561.get().n.set(new abap.types.String().set(`text`));
    temp561.get().v.set(text);
    abap.statements.insertInternal({data: temp561, table: temp560});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`InvisibleText`), t_prop: temp560})));
    return result;
  }
  async fix_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`fixContent`)})));
    return result;
  }
  async fix_flex(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let fixcontentsize = INPUT?.fixcontentsize || new abap.types.Character();
    let temp562 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp563 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp562);
    temp563.get().n.set(new abap.types.String().set(`class`));
    temp563.get().v.set($class);
    abap.statements.insertInternal({data: temp563, table: temp562});
    temp563.get().n.set(new abap.types.String().set(`fixContentSize`));
    temp563.get().v.set(fixcontentsize);
    abap.statements.insertInternal({data: temp563, table: temp562});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`FixFlex`), t_prop: temp562})));
    return result;
  }
  async flex_content(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`flexContent`)})));
    return result;
  }
  async side_navigation(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let id = INPUT?.id || new abap.types.Character();
    let $class = INPUT?.class || new abap.types.Character();
    let selectedkey = INPUT?.selectedkey || new abap.types.Character();
    let temp564 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp565 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp564);
    temp565.get().n.set(new abap.types.String().set(`id`));
    temp565.get().v.set(id);
    abap.statements.insertInternal({data: temp565, table: temp564});
    temp565.get().n.set(new abap.types.String().set(`class`));
    temp565.get().v.set($class);
    abap.statements.insertInternal({data: temp565, table: temp564});
    temp565.get().n.set(new abap.types.String().set(`selectedKey`));
    temp565.get().v.set(selectedkey);
    abap.statements.insertInternal({data: temp565, table: temp564});
    result.set((await this._generic({name: new abap.types.String().set(`SideNavigation`), ns: new abap.types.String().set(`tnt`), t_prop: temp564})));
    return result;
  }
  async navigation_list() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`NavigationList`), ns: new abap.types.String().set(`tnt`)})));
    return result;
  }
  async navigation_list_item(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let text = INPUT?.text || new abap.types.Character();
    let icon = INPUT?.icon || new abap.types.Character();
    let select = INPUT?.select || new abap.types.Character();
    let href = INPUT?.href || new abap.types.Character();
    let key = INPUT?.key || new abap.types.Character();
    let temp566 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp567 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp566);
    temp567.get().n.set(new abap.types.String().set(`text`));
    temp567.get().v.set(text);
    abap.statements.insertInternal({data: temp567, table: temp566});
    temp567.get().n.set(new abap.types.String().set(`icon`));
    temp567.get().v.set(icon);
    abap.statements.insertInternal({data: temp567, table: temp566});
    temp567.get().n.set(new abap.types.String().set(`href`));
    temp567.get().v.set(href);
    abap.statements.insertInternal({data: temp567, table: temp566});
    temp567.get().n.set(new abap.types.String().set(`key`));
    temp567.get().v.set(key);
    abap.statements.insertInternal({data: temp567, table: temp566});
    temp567.get().n.set(new abap.types.String().set(`select`));
    temp567.get().v.set(select);
    abap.statements.insertInternal({data: temp567, table: temp566});
    await this._generic({name: new abap.types.String().set(`NavigationListItem`), ns: new abap.types.String().set(`tnt`), t_prop: temp566});
    return result;
  }
  async fixed_item() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`fixedItem`), ns: new abap.types.String().set(`tnt`)})));
    return result;
  }
  async content_areas(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`contentAreas`), ns: ns})));
    return result;
  }
  async field(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let id = INPUT?.id || new abap.types.Character();
    let value = INPUT?.value || new abap.types.Character();
    let editmode = INPUT?.editmode || new abap.types.Character();
    let showemptyindicator = INPUT?.showemptyindicator || new abap.types.Character();
    let temp568 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp569 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp568);
    temp569.get().n.set(new abap.types.String().set(`id`));
    temp569.get().v.set(id);
    abap.statements.insertInternal({data: temp569, table: temp568});
    temp569.get().n.set(new abap.types.String().set(`value`));
    temp569.get().v.set(value);
    abap.statements.insertInternal({data: temp569, table: temp568});
    temp569.get().n.set(new abap.types.String().set(`editMode`));
    temp569.get().v.set(editmode);
    abap.statements.insertInternal({data: temp569, table: temp568});
    temp569.get().n.set(new abap.types.String().set(`showEmptyIndicator`));
    temp569.get().v.set((await abap.Classes['Z2UI5_CL_UTIL'].boolean_abap_2_json({val: showemptyindicator})));
    abap.statements.insertInternal({data: temp569, table: temp568});
    result.set((await this._generic({name: new abap.types.String().set(`Field`), ns: ns, t_prop: temp568})));
    return result;
  }
  async color_picker(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let colorstring = INPUT?.colorstring;
    let displaymode = INPUT?.displaymode || new abap.types.Character();
    let change = INPUT?.change || new abap.types.Character();
    let livechange = INPUT?.livechange || new abap.types.Character();
    let temp570 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp571 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    result.set(this.me);
    abap.statements.clear(temp570);
    temp571.get().n.set(new abap.types.String().set(`colorString`));
    temp571.get().v.set(colorstring);
    abap.statements.insertInternal({data: temp571, table: temp570});
    temp571.get().n.set(new abap.types.String().set(`displayMode`));
    temp571.get().v.set(displaymode);
    abap.statements.insertInternal({data: temp571, table: temp570});
    temp571.get().n.set(new abap.types.String().set(`change`));
    temp571.get().v.set(change);
    abap.statements.insertInternal({data: temp571, table: temp570});
    temp571.get().n.set(new abap.types.String().set(`liveChange`));
    temp571.get().v.set(livechange);
    abap.statements.insertInternal({data: temp571, table: temp570});
    await this._generic({ns: new abap.types.String().set(`u`), name: new abap.types.String().set(`ColorPicker`), t_prop: temp570});
    return result;
  }
  async tiles() {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    result.set((await this._generic({name: new abap.types.String().set(`tiles`)})));
    return result;
  }
  async analytical_column(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`AnalyticalColumn`)})));
    return result;
  }
  async analytical_table(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let selectionmode = INPUT?.selectionmode || new abap.types.Character();
    let rowmode = INPUT?.rowmode || new abap.types.Character();
    let toolbar = INPUT?.toolbar || new abap.types.Character();
    let columns = INPUT?.columns || new abap.types.Character();
    let temp572 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp573 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp572);
    temp573.get().n.set(new abap.types.String().set(`selectionMode`));
    temp573.get().v.set(selectionmode);
    abap.statements.insertInternal({data: temp573, table: temp572});
    temp573.get().n.set(new abap.types.String().set(`rowMode`));
    temp573.get().v.set(rowmode);
    abap.statements.insertInternal({data: temp573, table: temp572});
    temp573.get().n.set(new abap.types.String().set(`toolbar`));
    temp573.get().v.set(toolbar);
    abap.statements.insertInternal({data: temp573, table: temp572});
    temp573.get().n.set(new abap.types.String().set(`columns`));
    temp573.get().v.set(columns);
    abap.statements.insertInternal({data: temp573, table: temp572});
    result.set((await this._generic({name: new abap.types.String().set(`AnalyticalTable`), ns: ns, t_prop: temp572})));
    return result;
  }
  async auto(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let rowcontentheight = INPUT?.rowcontentheight || new abap.types.Character();
    let temp574 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp575 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp574);
    temp575.get().n.set(new abap.types.String().set(`rowContentHeight`));
    temp575.get().v.set(rowcontentheight);
    abap.statements.insertInternal({data: temp575, table: temp574});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`Auto`), t_prop: temp574})));
    return result;
  }
  async rowmode(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    result.set((await this._generic({name: new abap.types.String().set(`rowMode`), ns: ns})));
    return result;
  }
  async breadcrumbs(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let link = INPUT?.link || new abap.types.Character();
    let temp576 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp577 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp576);
    temp577.get().n.set(new abap.types.String().set(`link`));
    temp577.get().v.set(link);
    abap.statements.insertInternal({data: temp577, table: temp576});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`Breadcrumbs`), t_prop: temp576})));
    return result;
  }
  async current_location(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let link = INPUT?.link || new abap.types.Character();
    let temp578 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp579 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp578);
    temp579.get().n.set(new abap.types.String().set(`link`));
    temp579.get().v.set(link);
    abap.statements.insertInternal({data: temp579, table: temp578});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`currentLocation`), t_prop: temp578})));
    return result;
  }
  async color_palette(INPUT) {
    let result = new abap.types.ABAPObject({qualifiedName: "Z2UI5_CL_XML_VIEW", RTTIName: "\\CLASS=Z2UI5_CL_XML_VIEW"});
    let ns = INPUT?.ns || new abap.types.Character();
    let colorselect = INPUT?.colorselect || new abap.types.Character();
    let temp580 = abap.types.TableFactory.construct(new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "z2ui5_if_types=>ty_t_name_value");
    let temp581 = new abap.types.Structure({"n": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-N"}), "v": new abap.types.String({qualifiedName: "Z2UI5_IF_TYPES=>TY_S_NAME_VALUE-V"})}, "z2ui5_if_types=>ty_s_name_value", undefined, {}, {});
    abap.statements.clear(temp580);
    temp581.get().n.set(new abap.types.String().set(`colorSelect`));
    temp581.get().v.set(colorselect);
    abap.statements.insertInternal({data: temp581, table: temp580});
    result.set((await this._generic({ns: ns, name: new abap.types.String().set(`ColorPalette`), t_prop: temp580})));
    return result;
  }
}
abap.Classes['Z2UI5_CL_XML_VIEW'] = z2ui5_cl_xml_view;
export {z2ui5_cl_xml_view};
//# sourceMappingURL=z2ui5_cl_xml_view.clas.mjs.map